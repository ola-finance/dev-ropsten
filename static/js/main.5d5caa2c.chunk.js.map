{"version":3,"sources":["reportWebVitals.ts","store/storeHooks.ts","components/structure/ContentContainer.tsx","components/header/Header.tsx","theme/commonClasses.ts","components/panel/Panel.tsx","components/icons/TokenIcon.tsx","theme/themeConstants.ts","pages/LendingNetworkPage/MarketsTab/markets/AssetPanelRow.tsx","pages/LendingNetworkPage/MarketsTab/markets/MarketsPanel.tsx","pages/LendingNetworkPage/MarketsTab/markets/MarketsSection.tsx","components/AnimatedNumberText/AnimatedNumberText.tsx","pages/LendingNetworkPage/MarketsTab/overview/BalanceHeadline.tsx","pages/LendingNetworkPage/MarketsTab/overview/NetApy.tsx","pages/LendingNetworkPage/MarketsTab/overview/BalancesAndApy.tsx","pages/LendingNetworkPage/MarketsTab/overview/BorrowLimitBar.tsx","pages/LendingNetworkPage/MarketsTab/overview/BalancesTotal.tsx","pages/LendingNetworkPage/MarketsTab/overview/BorrowOverview.tsx","pages/LendingNetworkPage/MarketsTab/MainLendingNetworkTab.tsx","components/modals/MarketInteractionModal/base/ModalFooter.tsx","components/modals/MarketInteractionModal/base/ModalActionButton.tsx","components/modals/MarketInteractionModal/base/rates/BaseRates.tsx","components/modals/MarketInteractionModal/base/rates/ActionRates.tsx","components/modals/MarketInteractionModal/base/rates/BorrowLimitRates.tsx","components/modals/txWaitingModal/TxWaitingModal.tsx","components/modals/MarketInteractionModal/base/MarketInteractionModal.tsx","constants/ethereumErrorCodes.ts","components/modals/txWaitingModal/txWaitingHooks.ts","components/modals/MarketInteractionModal/marketInteractionModalHooks.ts","components/modals/MarketInteractionModal/base/mainModalMessage/MainModalMessage.tsx","components/modals/MarketInteractionModal/SupplyModal.tsx","components/modals/MarketInteractionModal/BorrowModal.tsx","components/modals/collateralModal/CollateralModal.tsx","components/modals/collateralModal/ConnectedCollateralModal.tsx","components/modals/collateralModal/collateralModalHooks.ts","pages/LendingNetworkPage/LendingNetworkPage.tsx","pages/AllNetworksPage/NetworkListItem.tsx","pages/AllNetworksPage/NetworksList.tsx","pages/AllNetworksPage/AllNetworksPage.tsx","pages/Main.tsx","App.tsx","theme/Theme.tsx","services/cryptoWalletConnectionService/CryptoWalletConnectionService.ts","configs.ts","services/networkActions.ts","constants/constantAddresses.ts","services/lendingNetworksService/LendingNetworksService.ts","services/contractsIntegration/contractsIntegrationUtils.ts","services/contractsIntegration/UniswapAnchoredView/UniswapAnchoredViewService.ts","ethereumConnection/ethereumConnection.ts","services/contractsIntegration/TokensLensService/TokensLensService.ts","services/contractsIntegration/CompoundLensService/CompoundLensService.ts","services/contractsIntegration/ComptrollerService/ComptrollerService.ts","services/contractsIntegration/erc20Service/Erc20Service.ts","services/contractsIntegration/erc20Service/Erc20BuilderService.ts","services/contractsIntegration/cTokensService/CErc20Service.ts","services/contractsIntegration/cTokensService/CEtherService.ts","services/contractsIntegration/cTokensService/CTokensBuilderService.ts","constants/supportedTokensPerChain.ts","store/CryptoWalletConnectionStore.ts","store/AccountStore.ts","services/lendingNetworksService/ILendingNetworksService.ts","store/multiInstanceStores/SingleCTokenStore.ts","store/multiInstanceStores/SingleLNStore.ts","store/LendingNetworksStore.ts","store/ServicesStore.ts","store/ModalsStore.ts","store/storesInitialization.ts","AppWrapper.tsx","services/Services.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStores","React","useContext","MobXProviderContext","useAccountStore","accountStore","useLendingNetworksStore","lendingNetworksStore","useModalsStore","modalsStore","useActiveLendingNetworkStore","activeLNStore","useStyles","makeStyles","theme","contentContainer","margin","paddingRight","paddingLeft","maxWidth","ContentContainer","memo","props","children","rest","classes","className","header","padding","background","minHeight","alignedRow","display","flexDirection","alignItems","logoLink","minWidth","height","backgroundImage","process","backgroundRepeat","backgroundSize","backgroundColor","logoLinkText","color","textDecoration","fontSize","actions","justifyContent","tokenBalance","borderRadius","cursor","letterSpacing","fontWeight","textTransform","account","marginLeft","tokenIcon","width","iconComp","icon","flexShrink","backgroundPosition","Header","observer","address","cryptoWalletConnectionStore","cryptoWalletIntegrationStore","walletText","isConnectedToWallet","mainAddress","substring","length","Grid","container","direction","style","alignContent","item","xs","to","Hidden","xsDown","clsx","sm","onClick","alert","askToConnect","useCommonClasses","mobileHide","breakpoints","down","mobileOnly","up","label","fontStyle","textRight","textAlign","textCenter","panel","boxShadow","Panel","token","transform","TokenIcon","symbol","extraClasses","commonClasses","classesForSpan","useMemo","safeExtraClasses","BRAND_MAIN_COLOR","AFFIRMATIVE_GREEN_COLOR","GRAYISH_TEXT","a","textRransform","asset","flexWrap","borderBottom","borderLeft","transition","list_icon","identity","identity_icon","marginRight","identity_balance","flex","overflow","balance","whiteSpace","textOverflow","balanceSubtitle","marginTop","AssetPanelRow","marketType","assetSummary","onCollateralableChange","onAssetSelected","name","cTokenStore","baseAssetAddress","activeLN","cTokensStores","find","underlyingAssetAddress","useCTokenStoreByBaseAsset","isCollaterable","borrowApy","borrowApyInPercentages","supplyApy","supplyApyInPercentages","usdCashLiquidity","cTokenCashInUSD","walletBalanceInUnits","accountUnderlyingBalanceInUnits","liquidityUSDInScale","amount","scaleUnit","scaleDivider","units","amountToSumInScale","supplyInUnits","accountSupplyInUnits","borrowInUnits","accountBorrowInUnits","isSupply","ApyToDisplay","unitsToDisplay","unitsText","showActionUnits","onCollateralSwitch","useCallback","event","target","checked","onAssetInteractionRequested","hasBeenInitialized","console","log","collateralLiquidityOrLoading","collateralOrLiquidity","Switch","onChange","e","stopPropagation","parseFloat","toLocaleString","Skeleton","animation","toFixed","panelHeader","flexFlow","zeroMargin","assetsList","panelLabels","assets","MarketsPanel","assetsInMarket","userBalancesInUnits","marketsUserIsIn","map","unitsInWallet","interfaceContainer","row","marketsColumn","flexBasis","MarketsSection","useState","error","lnStore","newCollaterableValue","showCollateralModal","onSupplyAssetSelected","cTokenMeta","undefined","assetParameters","baseAssetsToCTokenStore","get","assetsParams","assetParam","showSupplyModal","onBorrowAssetSelected","showBorrowModal","Typography","symbolsToUnits","standardSumFormat","n","AnimatedNumberText","value","formatValue","headline","textLeft","supply","borrow","BalanceHeadline","titleText","sum","alignLeft","netApyWrapper","position","left","netApy","netApyDescription","top","right","bottom","netApyDescription_Active","label_active","headline_inactive","headline_active","NetApy","totalYearlyChangeUsd","hoverTargetRef","useRef","isHovering","useHover","isEarning","apyDirectionMessage","earnedOrPaid","netApyStringified","totalYearlyChangeUsdStringified","labelText","headlineText","ref","viewBox","d","stroke","fill","content","alignMiddle","column","BalancesAndApy","borrowBalanceUsd","supplyBalanceUsd","smUp","limitBar","limitBarLabel","progressBarWrapper","progress_bar_green","progress","dark_clear","thin","progress_bar_percent_label","p","float","small","progress_bar_hover_space","BorrowLimitBar","usedBorrowPercentage","collateralPotentialInUSD","role","aria-valuemin","aria-valuemax","balancesTotal","BalancesTotal","palette","hero","marginBottom","BorrowOverview","totalAccountSupplyBalanceUsd","totalAccountBorrowBalanceUsd","MainLendingNetworkTab","footer","ModalFooter","tokenSymbol","tokenAmount","title","ModalActionButton","text","disabled","Button","variant","fullWidth","rateRow","bottomBorder","heavyBottomBorder","symbolIcon","valueText","primary","BaseRates","subTitle","rateRows","index","isLast","predictedValue","displayPredictedValues","valueSuffix","ActionRates","actionName","assetSymbol","assetSupplyApy","distributionAssetSymbol","distributionAssetApy","BorrowLimitRates","borrowLimitUsd","borrowLimitUsedPercentage","predictedBorrowLimitUsd","predictedBorrowLimitPercentage","note","TOP_DISTANCE_REM","modal","txWaitingPanel","upperRightCorner","upperLeftCorner","messageContainer","paddingTop","paddingBottom","tabBody","TxWaitingModal","open","closeModal","txWaitingStage","isWaitingForUserApproval","message","Modal","onBackdropClick","Fade","in","IconButton","marketInteractionPanel","MarketInteractionModal","messageOrInput","inputActionButtonText","onInputActionButtonPressed","showInputActionButton","inputActionButtonActive","actionAssetSymbol","actionAssetName","currentTabIndex","onTabIndexChange","tab0Title","tab1Title","actionApy","distributionApy","showBorrowLimit","showPredictedBorrowLimits","currentBorrowLimit","borrowLimitAfterChange","usedBorrowLimitPercentage","usedBorrowLimitPercentageAfterChange","borrowLimitNote","actionButtonActive","actionButtonText","actionButtonDisabledText","actionButtonOnClick","footerTitle","footerTokenAmount","waitingForUserApproval","waitingForTxConfirmation","maxHeight","JSON_RPC_ERROR_CODES","userRejectedRequest","unauthorized","unsupportedMethod","useTxWaitingStateExplicit","setWaitingForUserApproval","setWaitingForTxConfirmation","useTxWaitingLogicExplicit","txCreatingFunction","contractTx","wait","code","useMarketInteractionModalBase","assetAddressToParamsMap","assetBaseAddressToParams","Map","assetBaseAddress","assetParams","isNativeCoin","nativeCoinSymbol","cToken","cTokenAddress","supplyTokenSymbol","supplyTokenName","distributionTokenSymbol","distributionAssetParams","walletBalance","hasWalletBalance","needToApprove","pricePerUnitUsd","underlyingUsdPrice","collateralFactorInUnits","currentBorrowLimitUsd","liquidityUsd","currentLiquidityUsd","hasAvailableLiquidity","liquidityInAssetUnits","useMarketInteractionModalTabsState","activeTabIndex","setActiveTabIndex","useMarketInteractionActiveTabState","useOnEnableClicked","wrappedEnableTx","approveErc20Usage","ethers","constants","MaxUint256","useCalculateChangeInBorrowLimits","actionInUnits","unitPriceInUsd","actionEffectInUsd","collateralValueOfActionEffect","actionLeadsToShortfall","useCalculateChangeInBorrowLimitsForBorrow","largeIcon","MainModalMessage","SupplyModal","isWithdraw","onEnableClicked","supplyInputValue","setSupplyInputValue","withdrawInputValue","setWithdrawInputValue","clearStateBeforeClose","inputComponent","Input","inputProps","appearance","type","sanitizeNumericInput","hasApprovedERC20","hasAnyAllowance","currentSupplyBalance","hasSupplyBalance","wrappedSupplyTx","supplyToMarket","utils","parseUnits","toString","underlyingDecimals","wrappedWIthdrawTx","withdrawFromMarket","onSupplyClicked","onWithdrawClicked","messageOrInputComponent","canSupply","canWithdraw","commonPayloadPart","marketModalStatePayloadForSupplyTab","isSupplyInputValueValid","isOfferingMoreThanWalletBalance","actionButtonTextForSupply","activeButtonActive","actionButtonCbForSupply","reasonForNotBeingAbleToWithdraw","marketModalStatePayloadForWithdrawTab","withdrawInputValid","isRequestingMoreThanSuppliedBalance","statePerTabPayload","marketModalStatePayload","stringValueOfNumericInput","safeString","charAt","parsedAsFloat","isNaN","BorrowModal","isBorrow","isRepay","isRepayingMax","setIsRepayingMax","borrowInputValue","setBorrowInputValue","repayInputValue","setRepayInputValue","useEffect","currentBorrowBalance","hasBorrowBalance","needsToButNotYetApproved","repayAmount","wrappedBorrowTx","borrowFromMarket","wrappedRepayTx","repayToMarket","onBorrowClicked","onRepayClicked","cTokenCashInUnits","cTokenCashInUsd","repayIsZero","hasEnoughToRepayAll","canRepayMax","onSetRepayToMaxClicked","maxPossibleBorrow","Math","max","marketModalStatePayloadForBorrowTab","isRequestingMoreThanCanBorrow","isRequestingMoreThanMarketLiquidity","reasonForNotBeingAbleToBorrow","marketModalStatePayloadForRepayTab","isOfferingMoreThanHasBorrowed","canRepay","actionButtonCbForRepay","reasonForNotBeingAbleToRepay","actionButtonTextForRepay","collateralInteractionPanel","CollateralModal","ConnectedCollateralModal","underlyingName","underlyingSymbol","useCollateralModalState","effectiveUnits","wrappedTxBuildingFunction","useTxWaitingLogic","enterMarketByCTokenAddress","exitMarketByCTokenAddress","onActionButtonClicked","root","LendingNetworkPage","networkId","useRouteMatch","path","url","useHistory","isSupplyModalActive","setActiveLn","isLoading","exact","render","hideSupplyModal","isBorrowModalActive","hideBorrowModal","isCollateralModalActive","hideCollateralModal","NetworkListItem","onViewNetwork","networkGist","id","Card","CardHeader","CardContent","CardActions","spacing","NetworksList","lendingNetworksGists","network","AllNetworksPage","history","targetUrl","push","align","allLNGists","Main","component","match","params","network_id","App","lendingNetworkParameters","unitrollerAddress","baseTheme","responsiveFontSizes","createMuiTheme","main","secondary","CryptoWalletConnectionService","ethereum","web3","hasEthereumProvider","hasEventsSupport","isMetamaskInstalled","isSemiCompliantEthereumProviderInstalled","this","isMetaMask","Web3","onFunction","on","enable","selectedAddress","networkVersion","eth","getChainId","chainId","getBalance","balanceInDecimal","parseInt","fromWei","getAccounts","accounts","getBlockNumber","Error","listener","off","READ_ONLY_ETHEREUM_ENDPOINT","REACT_APP_READ_ONLY_ETHEREUM_ENDPOINT","fetchLocalJson","localPath","fetch","fetchRes","json","ZERO_ADDRESS","NATIVE_COIN_ASSET_ADDRESS","LendingNetworksService","lnParams","devNetworksgist","participatingSuppliers","tvl","LocalNetworkDevLNAddresses","unitroller","assetInMarket","assetAddress","LocalNetworkDevTokensAddresses","assetAddressToUse","etheresStructResponseToObject","ethersStructResponse","obj","key","Number","UniswapAnchoredViewService","uniswapAnchoredViewAddress","signerOrProvider","uniswapAnchoredViewContract","Contract","UniswapAnchoredViewJson","abi","getTokenConfigBySymbol","getSignerOrProvider","ethereumProvider","signer","providers","Web3Provider","JsonRpcProvider","getSigner","getAddress","catch","TokensLensService","tokensLensAddress","tokensLensContract","TokensLensJson","tokenAddresses","erc20MetadataAll","rawRes","ownerAddress","erc20MetadataAndBalanceAll","rawMetas","rawBalances","owner","spender","tokenAddress","erc20TokenAllowanceWithDecimals","allowance","decimalsBN","toNumber","erc20TokenAllowance","erc20AllowancesAll","spenders","erc20AllowancesMultiple","CompoundLensService","compoundLensAddress","compoundLensContract","CompoundLensJson","callStatic","cTokenMetadata","cTokenAddresses","cTokenMetadataAll","rawMeta","cTokenBalancesAll","cTokenUnderlyingPriceAll","comptrollerAddress","getAccountLimits","rawAccountLimits","marketsIn","liquidity","shortfall","ComptrollerService","unitrollerProxyContract","ComptrollerJson","after","attach","toJS","getAllMarkets","markets","cTokens","enterMarkets","exitMarket","Erc20Service","erc20Address","erc20Contract","ERC20Json","balanceOf","spenderAddress","approve","Erc20BuilderService","CErc20Service","cErc20Contract","CErc20Json","mint","redeem","repayBorrow","CEtherService","cEther","CEtherJson","CTokensBuilderService","cErc20Address","NATIVE_COIN_SYMBOL_PER_CHAIN","localTokensAddressesJson","1337","31337","1","FUSE_BLOCK_PER_YEAR","FUSE_BLOCK_PER_DAY","DAILY_BLOCK_PER_CHAIN","3","ROPSTEN_BLOCK_PER_DAY","122","CryptoWalletConnectionStore","action","cryptoWalletConnectionService","addressCheckingInterval","reactionToWalletConnection","makeObservable","getEthereumProvider","reaction","isConnected","readInformationFromConnectedWallet","fireImmediately","onMainAddressChange","setMainAddress","onChainIdChange","setChainId","setInterval","refreshState","blocksPerYear","didUserApproveDappInThePast","walletConnectionRequestApproved","requestConnectionPermission","permissionGranted","setWalletConnectionRequestApproved","readChainId","readMainAddress","walletAddress","requestApproved","observable","computed","AccountStore","erc20BuilderService","cTokensBuilderService","tokensLensService","compoundLensService","addressChangeReaction","activeLNStoreId","setDoneLoading","reactToConnectedChainOrAddressChanged","Array","from","tokensWithBalances","entries","reduce","cur","metaWithBalances","balanceInUnits","promievent","resetTxIndicators","setTxPending","res","setTxCanceled","buildErc20Service","contractInteraction","manuallyUpdateAllStores","cTokenService","buildCEtherService","buildCErc20Service","withdraw","currentAddress","activeLnStore","setNativeCoinSymbol","refreshAccountListeners","refreshDataForAccount","failLoadingProcess","refreshFromOutside","manuallyReadAccountData","accountAddress","clearAllAccountData","clearTokenBalancesMap","cancelAllCurrentSubscriptions","setErrorLoading","setTxHadError","doneLoading","errorLoading","txPending","txCanceled","txHadError","clear","tokensWithBalancesMap","replace","EMPTY_ASSET_IN_MARKET_PARAMETERS","decimals","SingleCTokenStore","assetInMarketParams","cTokenName","cTokenSymbol","cTokenDecimals","BigNumber","exchangeRateCurrent","supplyRatePerBlock","borrowRatePerBlock","totalBorrows","totalReserves","totalSupply","totalCash","reserveFactorMantissa","collateralFactorMantissa","isListed","borrowBalanceCurrent","balanceOfUnderlying","tokenAllowance","underlyingPrice","cTokenBalances","cTokenUnderlyingPrice","batchUpdateFromCTokenMeta","setIsCollaterable","formatUnits","totalSupplyInUnits","totalBorrowInUnits","blockPerYear","supplyRatePerBlockInUnits","borrowRatePerBlockInUnits","supplyApyInUnits","borrowApyInUnits","totalSupplyBalanceUsd","accountBorrowBalanceUsd","totalYearlyGainsUsd","totalYearlyLossesUsd","gt","SingleLNStore","lendingNetworksService","lendingNetworkGist","comptrollerService","distributionAssetParameters","set","totalSupplyUsd","totalAccountSupplyUsd","accountSupplyBalanceUsd","totalBorrowUsd","totalBorrowBalanceUsd","totalAccountBorrowUsd","totalYearlyGains","totalLossesGains","totalYearlyChanges","totalYearlyChange","potentialCollateral","distributionAssetRatePerBlock","readDataForAccount","refreshLNNetworkState","readNSetMarkets","batchReadAndUpdateCTokensStores","readNSetAccountLimits","JSON","stringify","fetchLendingNetworkLiveState","liveState","setLiveState","assetToCTokenStore","has","tx","comptrollerProxy","accountLimits","setAccountLimits","warn","replaceMarkets","cTokenMarkets","allMarkets","cTokenMetas","cTokenUnderlyingPricesAll","i","cTokenUnderlyingPrices","matchingSTokenStore","updateWithFreshState","marketIsColleterable","includes","updateIsInCollaterable","lnLiveState","newMarkets","usdLiquidity","LendingNetworksStore","initializeStore","lendingNetworksStores","lnGist","activeLendingNetworkId","l","setLoadingState","fetchAllLnParameters","buildStoresForEachLn","initializeLNStores","fetchALlLendingNetworksParameters","lnParameters","setLendingNetworkParameters","lnStores","buildLNStore","setLendingNetworksStores","forEach","initialize","gist","lnIdAddress","setActiveLendingNetworkId","lendingNetworkStores","lendingNetworkGists","ServiceStore","addressesPerChain","chainIdReaction","reactToChainIdChanged","setIsChainSupported","chainAddresses","createServicesForChain","addresses","isChainSupported","ModalsStore","currentModalId","supplyAssetBaseAddress","showAssetActionModal","borrowAssetBaseAddress","supplyModalId","setAssetBaseAddress","setCurrentModalId","configure","enforceActions","window","services","contractsAddresses","cryptoWalletIntegrationService","uniswapAnchoredViewService","UniswapAnchoredView","TokensLens","CompoundLens","erc20ServiceBuilder","cTokenServiceBuilder","buildServices","lnServices","comptrollerLiveService","buildLNServices","stores","servicesStore","getStores","AppWrapper","StylesProvider","injectFirst","ThemeProvider","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d5caa2c.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from \"react\";\nimport { MobXProviderContext } from \"mobx-react\";\nimport { IStores } from \"./stores\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { AccountStore } from \"./AccountStore\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { TLNContractsAddresses } from \"../services/Services\";\nimport { ModalsStore } from \"./ModalsStore\";\nimport { SingleCTokenStore } from \"./multiInstanceStores/SingleCTokenStore\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\n\nexport function useStores(): IStores {\n  // @ts-ignore\n  return React.useContext(MobXProviderContext);\n}\n\nexport function useCryptoWalletIntegrationStore(): CryptoWalletConnectionStore {\n  return useStores().cryptoWalletIntegrationStore;\n}\n\nexport function useAccountStore(): AccountStore {\n  return useStores().accountStore;\n}\n\nexport function useLendingNetworksStore(): LendingNetworksStore {\n  return useStores().lendingNetworksStore;\n}\n\nexport function useModalsStore(): ModalsStore {\n  return useStores().modalsStore;\n}\n\nexport function useActiveLendingNetworkStore(): SingleLNStore | undefined {\n  return useStores().lendingNetworksStore.activeLNStore;\n}\n\nexport function useCTokenStoreByBaseAsset(\n  baseAssetAddress: string\n): SingleCTokenStore | undefined {\n  const lendingNetworksStore = useLendingNetworksStore();\n  const activeLN = lendingNetworksStore.activeLNStore;\n  const cTokenStore = activeLN?.cTokensStores.find(\n    (cTokenStore) => cTokenStore.underlyingAssetAddress === baseAssetAddress\n  );\n  return cTokenStore;\n}\n","import { makeStyles } from \"@material-ui/core\";\nimport React, { DetailedHTMLProps } from \"react\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    margin: \"0 auto\",\n    paddingRight: \"1.33rem\",\n    paddingLeft: \"1.33rem\",\n    maxWidth: \"82rem\",\n  },\n}));\n\nexport const ContentContainer = React.memo<\n  IProps &\n    DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\n>((props) => {\n  const { children, ...rest } = props;\n  const classes = useStyles();\n\n  return (\n    <div className={classes.contentContainer} {...rest}>\n      {children}\n    </div>\n  );\n});\n","import { makeStyles, Typography, Grid, Hidden } from \"@material-ui/core\";\nimport React from \"react\";\nimport clsx from \"clsx\";\nimport { observer } from \"mobx-react\";\nimport { useCryptoWalletIntegrationStore } from \"../../store/storeHooks\";\nimport { ContentContainer } from \"../structure/ContentContainer\";\nimport { Link } from \"react-router-dom\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    padding: \"1rem 0\",\n    background: \"#070A0E\",\n    minHeight: \"80px\",\n  },\n  alignedRow: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  logoLink: {\n    minWidth: 127,\n    height: 27,\n    backgroundImage: `url(${process.env.PUBLIC_URL}/images/compound-logo.svg)`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"contain\",\n    backgroundColor: \"transparent\",\n  },\n\n  // Placeholder until we will have our logo ready\n  logoLinkText: {\n    minWidth: 127,\n    height: 27,\n    color: \"white\",\n    textDecoration: \"none\",\n    fontSize: 20,\n    // backgroundImage: `url(${process.env.PUBLIC_URL}/images/compound-logo.svg)`,\n    // backgroundRepeat: \"no-repeat\",\n    // backgroundSize: \"contain\",\n    // backgroundColor: \"transparent\",\n  },\n  actions: {\n    minHeight: \"3rem\",\n    justifyContent: \"flex-end\",\n    color: \"#CFD8DC\",\n  },\n  tokenBalance: {\n    background: \"#141E27\",\n    borderRadius: \"3px\",\n    cursor: \"pointer\",\n    padding: \"0.43rem 0.665rem\",\n    display: \"flex\",\n    alignItems: \"center\",\n    letterSpacing: \"1px\",\n    fontSize: \"12px\",\n    fontWeight: 600,\n    textTransform: \"none\",\n\n    \"&:hover\": {\n      background: \"#1d2b38\",\n    },\n  },\n\n  account: {\n    background: \"#141E27\",\n    borderRadius: \"3px\",\n    cursor: \"pointer\",\n    padding: \"0.665rem\",\n    marginLeft: \"1.33rem\",\n    letterSpacing: \"1px\",\n    fontSize: \"12px\",\n    fontWeight: 600,\n    textTransform: \"none\",\n\n    \"&:hover\": {\n      background: \"#1d2b38\",\n    },\n  },\n\n  // DEV_NOTE : All of these 'icon' classes can be moved to a common file\n  tokenIcon: {\n    marginLeft: \"0.25rem\",\n    height: \"1.25rem\",\n    width: \"1.25rem\",\n    minHeight: \"1.25rem\",\n    minWidth: \"1.25rem\",\n  },\n  iconComp: {\n    backgroundImage: `url(${process.env.PUBLIC_URL}/tokens/COMP.svg)`,\n  },\n  icon: {\n    flexShrink: 0,\n    display: \"inline-block\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\",\n    backgroundSize: \"contain\",\n    borderRadius: \"50%\",\n  },\n}));\n\nexport const Header = observer<React.FunctionComponent<IProps>>((props) => {\n  const classes = useStyles();\n\n  const cryptoWalletConnectionStore = useCryptoWalletIntegrationStore();\n\n  const walletText = cryptoWalletConnectionStore.isConnectedToWallet\n    ? summarizeAddress(cryptoWalletConnectionStore.mainAddress)\n    : \"Connect\";\n\n  return (\n    <header className={classes.header}>\n      <ContentContainer>\n        <Grid\n          container\n          direction=\"row\"\n          alignItems=\"center\"\n          style={{\n            alignItems: \"center\",\n            alignContent: \"center\",\n          }}\n        >\n          {/* Logo */}\n          <Grid item xs={3} className={classes.alignedRow}>\n            {/* TODO : Add Project logo here */}\n            {/*<Link className={classes.logoLink} to=\"/\" />*/}\n            <Link className={classes.logoLinkText} to=\"/\">\n              {\" \"}\n              Ultima{\" \"}\n            </Link>\n          </Grid>\n          {/* Empty spaces */}\n          {/* DEV_NOTE : Place holder for the navigations */}\n          <Hidden xsDown>\n            <Grid item xs={6}></Grid>\n          </Hidden>\n\n          <Grid\n            className={clsx(classes.alignedRow, classes.actions)}\n            item\n            xs={9}\n            sm={3}\n          >\n            {/* Token balance */}\n            <div\n              className={classes.tokenBalance}\n              onClick={() => alert(\"Token info\")}\n            >\n              0.0000\n              <div\n                className={clsx(\n                  classes.tokenIcon,\n                  classes.iconComp,\n                  classes.icon\n                )}\n              />\n            </div>\n\n            {/* Address */}\n            {/* DEV_NOTE : Hides on mobile to keep original UX*/}\n            <Hidden xsDown>\n              <a\n                className={clsx(classes.account)}\n                onClick={() => cryptoWalletConnectionStore.askToConnect()}\n              >\n                <span />\n                {walletText}\n              </a>\n            </Hidden>\n          </Grid>\n        </Grid>\n      </ContentContainer>\n    </header>\n  );\n});\n\n/**\n * QuicknDirty\n */\nfunction summarizeAddress(address: string): string {\n  return `${address.substring(0, 3)}...${address.substring(\n    address.length - 3,\n    address.length\n  )}`;\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nexport const useCommonClasses = makeStyles((theme) => ({\n  mobileHide: {\n    [theme.breakpoints.down(\"xs\")]: {\n      display: \"none !important\",\n    },\n  },\n  mobileOnly: {\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none !important\",\n    },\n  },\n  label: {\n    // fontFamily: 'Haas Grot Text R',\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    color: \"#AAB8C1\",\n  },\n\n  textRight: {\n    textAlign: \"right\",\n  },\n  textCenter: {\n    textAlign: \"center\",\n  },\n  icon: {\n    flexShrink: 0,\n    display: \"inline-block\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\",\n    backgroundSize: \"contain\",\n    borderRadius: \"50%\",\n    width: \"1.8rem\",\n    height: \"1.8rem\",\n    minWidth: \"1.8rem\",\n    minHeight: \"1.8rem\",\n  },\n}));\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  panel: {\n    background: \"#ffffff\",\n    boxShadow: \"0px 2px 4px rgb(16 21 24 / 5%)\",\n    borderRadius: \"4px\",\n    // marginBottom: \"1.33rem\",\n    height: \"100%\",\n    width: \"100%\",\n  },\n}));\n\nexport const Panel = React.memo<IProps>((props) => {\n  const classes = useStyles();\n\n  return <div className={classes.panel}>{props.children}</div>;\n});\n","import React, { useMemo } from \"react\";\nimport clsx from \"clsx\";\nimport { useCommonClasses } from \"../../theme/commonClasses\";\nimport { makeStyles } from \"@material-ui/core\";\n\ninterface IProps {\n  symbol: string;\n  extraClasses?: string[];\n}\n\nconst PUBLIC_URL = process.env.PUBLIC_URL;\n\nconst useStyles = makeStyles((theme) => ({\n  token: {\n    // \"&:hover\": {\n    //   animation: \"$turn 3000ms linear\",\n    // },\n  },\n\n  \"@keyframes turn\": {\n    \"0%\": {\n      transform: \"rotateY(0deg)\",\n    },\n    // \"25%\": {\n    //   transform: \"rotateY(-180deg)\",\n    // },\n    \"50%\": {\n      transform: \"rotateY(-360deg)\",\n    },\n    // \"75%\": {\n    //   transform: \"rotateY(180deg)\",\n    // },\n    \"100%\": {\n      transform: \"rotateY(0deg)\",\n    },\n  },\n  \"@keyframes return\": {\n    \"100%\": {\n      transform: \"rotateY(0deg)\",\n    },\n  },\n}));\n\nexport const TokenIcon = React.memo<IProps>((props) => {\n  const { symbol, extraClasses } = props;\n  const classes = useStyles();\n  const commonClasses = useCommonClasses();\n\n  const classesForSpan = useMemo(() => {\n    const safeExtraClasses = extraClasses || [];\n    return clsx([commonClasses.icon, classes.token, ...safeExtraClasses]);\n  }, [classes.token, commonClasses.icon, extraClasses]);\n\n  return (\n    <span\n      className={classesForSpan}\n      style={{\n        backgroundImage: `url(${PUBLIC_URL}/tokens/asset_${symbol}.svg)`,\n        backgroundSize: \"contain\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    />\n  );\n});\n","// export const BRAND_MAIN_COLOR = \"#00D395\";\nexport const BRAND_MAIN_COLOR = \"#00D395\";\nexport const AFFIRMATIVE_GREEN_COLOR = \"#00D395\";\n\nexport const GRAYISH_TEXT = \"#AAB8C1\";\n","import React, { useCallback, useMemo } from \"react\";\nimport { Grid, makeStyles, Switch } from \"@material-ui/core\";\nimport { TMarketType } from \"./types\";\nimport clsx from \"clsx\";\nimport { useCommonClasses } from \"../../../../theme/commonClasses\";\nimport { TAssetInMarketParameters } from \"../../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { TokenIcon } from \"../../../../components/icons/TokenIcon\";\nimport { BRAND_MAIN_COLOR } from \"../../../../theme/themeConstants\";\nimport { observer } from \"mobx-react\";\nimport {\n  useCryptoWalletIntegrationStore,\n  useCTokenStoreByBaseAsset,\n} from \"../../../../store/storeHooks\";\nimport { Skeleton } from \"@material-ui/lab\";\n\ninterface IProps {\n  assetSummary: TAssetInMarketParameters;\n  unitsInWallet: number;\n  marketType: TMarketType;\n\n  onCollateralableChange: (\n    baseAssetAddress: string,\n    newCollaterableValue: boolean\n  ) => void;\n\n  onAssetSelected: (baseAssetAddress: string) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  // TODO : Consider making this global\n  a: {\n    color: \"inherit\",\n    letterSpacing: \"1px\",\n    // fontSize: \"12px\",\n    // fontWeight: 700,\n    textRransform: \"uppercase\",\n    textDecoration: \"none\",\n    cursor: \"pointer\",\n  },\n  asset: {\n    // display: \"flex\",\n    // alignItems: \"center\",\n    // borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    // padding: \"1.25rem 1.75rem\",\n    // fontSize: \"1rem\",\n    // fontWeight: 500,\n    // textTransform: \"capitalize\",\n    // letterSpacing: 0,\n    // transition: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    // padding: \"1.25rem 1.75rem\",\n    padding: \"1.25rem 1.75rem\",\n    borderLeft: \"2px solid transparent\",\n    paddingLeft: \"1.625rem\",\n    textTransform: \"none\",\n    fontSize: \"1rem\",\n    fontWeight: 500,\n    letterSpacing: 0,\n    transition: \"none\",\n\n    \"&:hover\": {\n      borderLeft: `2px solid ${BRAND_MAIN_COLOR}`,\n      color: \"#141E27\",\n    },\n\n    height: \"6rem\",\n  },\n\n  list_icon: {\n    width: \"2.25rem\",\n    height: \"2.25rem\",\n  },\n\n  identity: {\n    alignItems: \"center\",\n  },\n\n  identity_icon: {\n    marginRight: \"1rem\",\n  },\n\n  identity_balance: {\n    flex: \"1 1\",\n    marginRight: \"0.25rem\",\n    overflow: \"hidden\",\n  },\n\n  balance: {\n    \"& > div\": {\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n    },\n  },\n\n  balanceSubtitle: {\n    display: \"block\",\n    marginTop: \"9px\",\n    color: \"#AAB8C1\",\n    fontSize: \"0.9em\",\n  },\n}));\n\nexport const AssetPanelRow = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const classes = useStyles();\n    const commonClasses = useCommonClasses();\n    const {\n      marketType,\n      assetSummary,\n      // cTokenMeta,\n      onCollateralableChange,\n      onAssetSelected,\n    } = props;\n\n    const { address } = assetSummary;\n\n    const {\n      name,\n      symbol,\n      // amountInWallet,\n      // isCollateralable,\n      // supplyApy,\n      // usdLiquidity,\n    } = assetSummary;\n\n    const cTokenStore = useCTokenStoreByBaseAsset(address);\n\n    const isCollaterable = cTokenStore?.isCollaterable;\n\n    // console.log({ supplyRatePerBlock: supplyRatePerBlock });\n\n    const borrowApy = cTokenStore?.borrowApyInPercentages || 0;\n    const supplyApy = cTokenStore?.supplyApyInPercentages || 0;\n\n    const usdCashLiquidity = cTokenStore?.cTokenCashInUSD || 0;\n    const walletBalanceInUnits =\n      cTokenStore?.accountUnderlyingBalanceInUnits || 0;\n\n    const liquidityUSDInScale = amountToSumInScale(usdCashLiquidity);\n\n    const supplyInUnits = cTokenStore?.accountSupplyInUnits || 0;\n    const borrowInUnits = cTokenStore?.accountBorrowInUnits || 0;\n\n    const isSupply = marketType === \"supply\";\n    const ApyToDisplay = isSupply ? supplyApy : borrowApy;\n    const unitsToDisplay = isSupply ? supplyInUnits : borrowInUnits;\n    const unitsText = isSupply ? \"Supplied\" : \"Borrowed\";\n    const showActionUnits = unitsToDisplay > 0;\n\n    const onCollateralSwitch = useCallback(\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        onCollateralableChange(address, event.target.checked);\n      },\n      [address, onCollateralableChange]\n    );\n\n    const onAssetInteractionRequested = useCallback(\n      (event: React.MouseEvent<HTMLAnchorElement>) => {\n        if (cTokenStore?.hasBeenInitialized) {\n          onAssetSelected(address);\n        } else {\n          console.log(`Asset interation: cTokenStore not yet initialised`);\n        }\n      },\n      [address, cTokenStore?.hasBeenInitialized, onAssetSelected]\n    );\n\n    const collateralLiquidityOrLoading = useMemo(() => {\n      const collateralOrLiquidity =\n        marketType === \"supply\" ? (\n          // <input type=\"checkbox\" />\n          //  TODO : Add a proper toggle component\n          <Switch\n            checked={isCollaterable}\n            onChange={onCollateralSwitch}\n            // Preventing toggle-click from being intercepted by the row's 'onClick'\n            onClick={(e) => e.stopPropagation()}\n          />\n        ) : (\n          <div>\n            $\n            {parseFloat(\n              liquidityUSDInScale.units.toLocaleString()\n            ).toLocaleString()}\n            {liquidityUSDInScale.scaleUnit}\n          </div>\n        );\n\n      return cTokenStore?.hasBeenInitialized ? (\n        collateralOrLiquidity\n      ) : (\n        <Skeleton animation=\"wave\" />\n      );\n    }, [\n      cTokenStore?.hasBeenInitialized,\n      isCollaterable,\n      liquidityUSDInScale.scaleUnit,\n      liquidityUSDInScale.units,\n      marketType,\n      onCollateralSwitch,\n    ]);\n\n    return (\n      <a\n        className={clsx([classes.a, classes.asset])}\n        onClick={onAssetInteractionRequested}\n      >\n        {/* Asset (+APY subtitle) */}\n        <Grid container item xs={4} sm={4} className={classes.identity}>\n          <TokenIcon\n            symbol={symbol}\n            extraClasses={[classes.identity_icon, classes.list_icon]}\n          />\n          <div className={clsx([classes.balance, classes.identity_balance])}>\n            <div>{name}</div>\n            <span\n              className={clsx([\n                commonClasses.mobileOnly,\n                classes.balanceSubtitle,\n              ])}\n            >\n              {ApyToDisplay}%\n            </span>\n          </div>\n        </Grid>\n\n        {/* APY (mobile hidden) */}\n        <Grid\n          item\n          xs={1}\n          sm={3}\n          className={clsx([commonClasses.mobileHide, commonClasses.textCenter])}\n        >\n          <div className={clsx([classes.balance])}>\n            {cTokenStore?.hasBeenInitialized ? (\n              <div>{(+ApyToDisplay.toFixed(2)).toLocaleString()}%</div>\n            ) : (\n              <Skeleton animation={\"wave\"} />\n            )}\n          </div>\n        </Grid>\n\n        {/* Wallet */}\n        <Grid item xs={4} sm={3} className={clsx([commonClasses.textCenter])}>\n          <div className={clsx([classes.balance])}>\n            <div>\n              {walletBalanceInUnits.toLocaleString()} {symbol}\n            </div>\n            {showActionUnits && (\n              <span\n                className={clsx([\n                  // commonClasses.mobileOnly,\n                  classes.balanceSubtitle,\n                ])}\n              >\n                {(+unitsToDisplay.toFixed(3)).toLocaleString()} {unitsText}\n              </span>\n            )}\n          </div>\n        </Grid>\n\n        {/* Collateral / Liquidity */}\n        <Grid item xs={4} sm={2} className={clsx([commonClasses.textRight])}>\n          <div className={clsx([classes.balance])}>\n            {collateralLiquidityOrLoading}\n          </div>\n        </Grid>\n      </a>\n    );\n  }\n);\n\ntype TNumericalScaleUnit = \"M\" | \"K\";\ntype TSumInScale = {\n  scaleUnit: TNumericalScaleUnit;\n  units: number;\n};\n\nfunction amountToSumInScale(amount: number): TSumInScale {\n  let scaleUnit: TNumericalScaleUnit = \"M\";\n  let scaleDivider = 1_000_000;\n\n  // TODO : Play with this threshold\n  if (amount < 500_000) {\n    scaleUnit = \"K\";\n    scaleDivider = 1_000;\n  }\n\n  const sumInScale: TSumInScale = {\n    scaleUnit,\n    units: amount / scaleDivider,\n  };\n\n  return sumInScale;\n}\n","import React, { FunctionComponent, SFC } from \"react\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\n\nimport clsx from \"clsx\";\nimport { TAssetInMarketGist, TMarketType } from \"./types\";\nimport { useCommonClasses } from \"../../../../theme/commonClasses\";\nimport { Panel } from \"../../../../components/panel/Panel\";\nimport { AssetPanelRow } from \"./AssetPanelRow\";\nimport { TAssetInMarketParameters } from \"../../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TCTokenMetadata } from \"../../../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\n\ninterface IProps {\n  header: string;\n  marketType: TMarketType;\n  assetsInMarket: TAssetInMarketParameters[];\n  // Symbol -> balanceInUnits\n  userBalancesInUnits: Record<string, number>;\n  marketsUserIsIn: string[];\n\n  /**\n   *  Asset 'collateral' flag toggle is clicked (user want to add/remove asset from being used as collateral)\n   */\n  onCollateralableChange: (\n    baseAssetAddress: string,\n    newCollaterableValue: boolean\n  ) => void;\n\n  /**\n   *  Asset row is clicked (user want to interact with this asset's market)\n   */\n  onAssetSelected: (baseAssetAddress: string) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  panelHeader: {\n    display: \"flex\",\n    flexFlow: \"inherit\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    fontSize: \"1.1rem\",\n    padding: \"1rem 1.75rem\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n  },\n  zeroMargin: {\n    margin: 0,\n  },\n  assetsList: {},\n  panelLabels: {\n    // display: \"flex\",\n    padding: \"1rem 1.75rem\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    alignItems: \"center\",\n  },\n  assets: {},\n}));\n\n// export const MarketsPanel = React.memo<IProps>((props) => {\nexport const MarketsPanel: FunctionComponent<IProps> = (props) => {\n  const classes = useStyles();\n  const commonClasses = useCommonClasses();\n  const {\n    header,\n    marketType,\n    assetsInMarket,\n    userBalancesInUnits,\n    marketsUserIsIn,\n    onCollateralableChange,\n    onAssetSelected,\n  } = props;\n\n  console.log(`Building markets panel ${header}`);\n\n  return (\n    <Panel>\n      <div className={classes.panelHeader}>\n        <h4 className={classes.zeroMargin}>{header}</h4>\n      </div>\n      <div className={classes.assetsList}>\n        <Grid container direction={\"row\"} className={classes.panelLabels}>\n          {/* Asset */}\n          <Grid item xs={4} sm={4}>\n            <label className={commonClasses.label}>Asset</label>\n          </Grid>\n\n          {/* APY */}\n          <Grid\n            className={clsx([\n              commonClasses.textCenter,\n              commonClasses.mobileHide,\n            ])}\n            item\n            xs={false}\n            sm={3}\n          >\n            <label className={clsx([commonClasses.label])}>APY</label>\n          </Grid>\n\n          {/* WALLET */}\n          <Grid className={commonClasses.textCenter} item xs={4} sm={3}>\n            <label\n              className={clsx([commonClasses.label, commonClasses.textRight])}\n            >\n              Wallet\n            </label>\n          </Grid>\n\n          {/* Collateral/Liquidity */}\n          <Grid className={commonClasses.textRight} item xs={4} sm={2}>\n            <label\n              className={clsx([commonClasses.label, commonClasses.textRight])}\n            >\n              {marketType === \"supply\" ? \"Collateral\" : \"Liquidity\"}\n            </label>\n          </Grid>\n        </Grid>\n\n        <div className={classes.assets}>\n          {assetsInMarket.map((asset) => (\n            <AssetPanelRow\n              marketType={marketType}\n              assetSummary={asset}\n              unitsInWallet={userBalancesInUnits[asset.symbol] || 0}\n              key={asset.symbol}\n              onCollateralableChange={onCollateralableChange}\n              onAssetSelected={onAssetSelected}\n            />\n          ))}\n        </div>\n      </div>\n    </Panel>\n  );\n};\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { observer } from \"mobx-react\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { SingleLNStore } from \"../../../../store/multiInstanceStores/SingleLNStore\";\nimport { MarketsPanel } from \"./MarketsPanel\";\nimport { ContentContainer } from \"../../../../components/structure/ContentContainer\";\nimport {\n  useAccountStore,\n  useActiveLendingNetworkStore,\n  useModalsStore,\n} from \"../../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TCTokenMetadata } from \"../../../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\n\nconst useStyles = makeStyles((theme) => ({\n  interfaceContainer: {\n    \"--alertHeight\": \"0px\",\n    // TODO : Understand this calculation\n    minHeight: \"calc(100vh - 82px - 23rem + 34px - var(--alertHeight))\",\n  },\n  row: {\n    display: \"flex\",\n    flexFlow: \"row wrap\",\n    marginRight: \"-0.665rem\",\n    marginLeft: \"-0.665rem\",\n  },\n  marketsColumn: {\n    flexBasis: \"100%\",\n    padding: \"0 0.665rem\",\n    // DEV_NOTE : Original : @media (min-width: 40em)\n    [theme.breakpoints.up(\"sm\")]: {\n      flexBasis: \"50%\",\n      maxWidth: \"50%\",\n    },\n\n    // Same as 'Panel'\n    marginBottom: \"1.33rem\",\n  },\n}));\n\ninterface IProps {}\nexport const MarketsSection: React.FC<IProps> = observer((props) => {\n  const classes = useStyles();\n  const [error, setError] = React.useState<string | null>(null);\n\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lnStore = useActiveLendingNetworkStore();\n\n  const onCollateralableChange = useCallback(\n    async (baseAssetAddress: string, newCollaterableValue: boolean) => {\n      modalsStore.showCollateralModal(baseAssetAddress);\n      // if (!lnStore) {\n      //   return;\n      // }\n      //\n      // // TODO : Make this tx handling better\n      // if (newCollaterableValue) {\n      //   console.log(`Entered market request - ${baseAssetAddress}`);\n      //   await lnStore.enterMarket(baseAssetAddress);\n      //   console.log(\"Entered market\");\n      // } else {\n      //   await lnStore.exitMarket(baseAssetAddress);\n      //   console.log(\"Left market\");\n      // }\n    },\n    [modalsStore]\n  );\n\n  const getPayloadForMarketInteractionModal = useCallback(\n    (baseAssetAddress: string) => {\n      if (!lnStore) {\n        return {\n          cTokenMeta: undefined,\n          assetParameters: undefined,\n        };\n      }\n      const cTokenStore = lnStore.baseAssetsToCTokenStore.get(baseAssetAddress);\n      const assetParameters = lnStore.assetsParams.find(\n        (assetParam) => assetParam.address === baseAssetAddress\n      );\n\n      if (!assetParameters) {\n        console.error(`No asset parameters found for ${baseAssetAddress}`);\n      } else if (!cTokenStore) {\n        console.error(`No cToken meta found for ${baseAssetAddress}`);\n      }\n\n      const payload: {\n        assetParameters: TAssetInMarketParameters | undefined;\n        cTokenMeta: TCTokenMetadata | undefined;\n      } = {\n        assetParameters,\n        cTokenMeta: undefined,\n      };\n\n      return payload;\n    },\n    [lnStore]\n  );\n\n  const onSupplyAssetSelected = useCallback(\n    (baseAssetAddress: string) => {\n      modalsStore.showSupplyModal(baseAssetAddress);\n    },\n    [modalsStore]\n  );\n\n  const onBorrowAssetSelected = useCallback(\n    (baseAssetAddress: string) => {\n      modalsStore.showBorrowModal(baseAssetAddress);\n    },\n    [modalsStore]\n  );\n\n  // React.useEffect(() => {\n  //   if (lendingNetworkStore && lendingNetworkStore.tokens === null) {\n  //     let cancel = false;\n  //     const fetch = async () => {\n  //       if (!cancel) {\n  //         try {\n  //           await lendingNetworkStore.loadCTokenMetadata();\n  //         } catch (e) {\n  //           setError(\n  //             `Unable to fetch the tokens data of network \"${lendingNetworkStore.id}\"`\n  //           );\n  //         }\n  //       }\n  //     };\n  //\n  //     fetch();\n  //     return () => {\n  //       cancel = true;\n  //     };\n  //   }\n  // }, [lendingNetworkStore]);\n\n  // if (lendingNetworkStore.assetsGists === null) {\n  //   return <div style={{ color: \"white\" }}>Loading tokens meta data...</div>;\n  // }\n\n  if (error) {\n    return <Typography style={{ color: \"white\" }}>Error: {error}</Typography>;\n  }\n\n  if (!lnStore) {\n    return <Typography style={{ color: \"white\" }}>Initializing...</Typography>;\n  }\n\n  return (\n    <ContentContainer>\n      <section>\n        <div className={clsx([classes.interfaceContainer, classes.row])}>\n          {/* Supply(/Withdraw) */}\n          <div className={classes.marketsColumn}>\n            <MarketsPanel\n              header={\"Supply Markets\"}\n              marketType={\"supply\"}\n              assetsInMarket={lnStore.assetsParams}\n              userBalancesInUnits={accountStore.symbolsToUnits}\n              marketsUserIsIn={lnStore.marketsUserIsIn}\n              onCollateralableChange={onCollateralableChange}\n              onAssetSelected={onSupplyAssetSelected}\n            />\n          </div>\n          {/* Borrow(/Repay) */}\n          <div className={classes.marketsColumn}>\n            <MarketsPanel\n              header={\"Borrow Markets\"}\n              marketType={\"borrow\"}\n              assetsInMarket={lnStore.assetsParams}\n              userBalancesInUnits={accountStore.symbolsToUnits}\n              marketsUserIsIn={lnStore.marketsUserIsIn}\n              onCollateralableChange={onCollateralableChange}\n              onAssetSelected={onBorrowAssetSelected}\n            />\n          </div>\n        </div>\n      </section>\n    </ContentContainer>\n  );\n});\n","import React from \"react\";\n// @ts-ignore\nimport AnimatedNumber from \"animated-number-react\";\n\ninterface IProps {\n  value: number;\n}\n\nfunction standardSumFormat(n: number) {\n  return (+n.toFixed(2)).toLocaleString();\n}\n\nexport const AnimatedNumberText = React.memo<IProps>((props) => {\n  const { value } = props;\n\n  return <AnimatedNumber value={value} formatValue={standardSumFormat} />;\n});\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { AFFIRMATIVE_GREEN_COLOR } from \"../../../../theme/themeConstants\";\nimport { AnimatedNumberText } from \"../../../../components/AnimatedNumberText/AnimatedNumberText\";\n\ninterface IProps {\n  titleText: string;\n  sum: number;\n  isSupply: boolean;\n  alignLeft: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  headline: {\n    fontSize: \"1.6rem\",\n    fontWeight: 300,\n    color: \"#ffffff\",\n    marginTop: \"0.7rem\",\n  },\n  textCenter: {\n    textAlign: \"center\",\n  },\n  textLeft: {\n    textAlign: \"left\",\n  },\n  label: {\n    // fontFamily: \"Haas Grot Text R\",\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    color: \"#AAB8C1\",\n  },\n  supply: {\n    color: AFFIRMATIVE_GREEN_COLOR,\n  },\n  borrow: {\n    color: \"#9669ED\",\n  },\n}));\n\nexport const BalanceHeadline = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { titleText, sum, isSupply, alignLeft } = props;\n\n  return (\n    <div className={alignLeft ? classes.textLeft : classes.textCenter}>\n      <label\n        className={clsx([\n          classes.label,\n          isSupply ? classes.supply : classes.borrow,\n        ])}\n      >\n        {titleText}\n      </label>\n      {/* TODO : Add the digits CSS */}\n      <div className={classes.headline}>\n        $\n        <AnimatedNumberText value={sum} />\n        {/*{sum.toLocaleString()}*/}\n      </div>\n    </div>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { useRef } from \"react\";\nimport useHover from \"@react-hook/hover\";\nimport { AFFIRMATIVE_GREEN_COLOR } from \"../../../../theme/themeConstants\";\n\ninterface IProps {\n  netApy: number;\n  totalYearlyChangeUsd: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  netApyWrapper: {\n    // TODO : decrease by 20 when in small screen\n    height: \"140px\",\n    width: \"140px\",\n    position: \"relative\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    [theme.breakpoints.down(\"xs\")]: {\n      height: \"120px\",\n      width: \"120px\",\n    },\n  },\n  netApy: {},\n  netApyDescription: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    margin: \"0.1875rem\",\n    backgroundColor: \"#070A0E\",\n    borderRadius: \"50%\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: \"0.25rem\",\n\n    \"&:hover\": {\n      backgroundColor: \"rgba(20, 30, 39, 0.98)\",\n    },\n  },\n  netApyDescription_Active: {\n    backgroundColor: \"rgba(20, 30, 39, 0.98)\",\n  },\n  label: {\n    textAlign: \"center\",\n    color: \"#657786\",\n\n    // fontFamily: \"Haas Grot Text R\",\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    // color: \"#AAB8C1\",\n  },\n  label_active: {\n    color: \"white\",\n  },\n  headline: {\n    fontWeight: 300,\n    color: \"#ffffff\",\n    marginTop: \"0.7rem\",\n  },\n  headline_inactive: {\n    fontSize: \"1.6rem\",\n  },\n  headline_active: {\n    color: \"#F9FAFB\",\n    fontSize: \"12px\",\n    textAlign: \"center\",\n  },\n}));\n\nexport const NetApy: React.FC<IProps> = (props) => {\n  const classes = useStyles();\n  const { netApy, totalYearlyChangeUsd } = props;\n\n  // TODO : Add 'click detect' to keep same behavior on mobile\n  const hoverTargetRef = useRef<HTMLDivElement>(null);\n  const isHovering = useHover(hoverTargetRef);\n\n  const isEarning = netApy > 0;\n  const apyOrApr = isEarning ? \"APY\" : \"APR\";\n  const apyDirectionMessage = `Net ${apyOrApr}`;\n  const earnedOrPaid = isEarning ? \"earned interest\" : \"paid interest\";\n\n  const netApyStringified = (+netApy.toFixed(2)).toLocaleString();\n  const totalYearlyChangeUsdStringified = (+totalYearlyChangeUsd.toFixed(\n    2\n  )).toLocaleString();\n\n  console.log({ totalYearlyChangeUsdStringified });\n\n  const labelText = isHovering\n    ? `${totalYearlyChangeUsdStringified} $`\n    : apyDirectionMessage;\n  const headlineText = isHovering\n    ? // ? \"Interest earned and paid, plus TOKEN\"\n      `Anticipated yearly ${earnedOrPaid}`\n    : `${netApyStringified}%`;\n\n  return (\n    <div className={classes.netApyWrapper} ref={hoverTargetRef}>\n      <div className={classes.netApy}>\n        <svg viewBox=\"0 0 140 140\" width=\"100%\">\n          <path\n            d=\"M 70 70 L  70 0 A 70 70 0 0 1 70 0 Z\"\n            stroke=\"transparent\"\n            fill=\"#9669ED\"\n          />\n          <path\n            d=\"M 70 70 L  70 0 A 70 70 0 1 1 69.99956017702848 1.381744718642608e-9 Z\"\n            stroke=\"transparent\"\n            fill={AFFIRMATIVE_GREEN_COLOR}\n          />\n        </svg>\n      </div>\n      <div\n        className={clsx([\n          classes.netApyDescription,\n          isHovering ? classes.netApyDescription_Active : false,\n        ])}\n      >\n        <label\n          className={clsx([\n            classes.label,\n            isHovering ? classes.label_active : false,\n          ])}\n        >\n          {labelText}\n        </label>\n        <div\n          className={clsx([\n            classes.headline,\n            isHovering ? classes.headline_active : classes.headline,\n          ])}\n        >\n          {headlineText}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Grid, Hidden, makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { BalanceHeadline } from \"./BalanceHeadline\";\nimport { NetApy } from \"./NetApy\";\n\ninterface IProps {\n  supplyBalanceUsd: number;\n  borrowBalanceUsd: number;\n  netApy: number;\n  totalYearlyChangeUsd: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  content: {},\n  row: {\n    marginRight: \"-0.665rem\",\n    marginLeft: \"-0.665rem\",\n  },\n  alignMiddle: {\n    alignItems: \"center\",\n  },\n  textCenter: {\n    textAlign: \"center\",\n  },\n  column: {\n    padding: \"0 0.665rem\",\n  },\n}));\n\nexport const BalancesAndApy = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    borrowBalanceUsd,\n    supplyBalanceUsd,\n    netApy,\n    totalYearlyChangeUsd,\n  } = props;\n\n  return (\n    <div className={classes.content}>\n      {/* Large */}\n      <Hidden xsDown>\n        <Grid\n          container\n          direction={\"row\"}\n          className={clsx([classes.row, classes.alignMiddle])}\n        >\n          <Grid\n            className={classes.column}\n            item\n            container\n            direction={\"column\"}\n            xs={5}\n          >\n            <BalanceHeadline\n              sum={supplyBalanceUsd}\n              titleText={\"Supply balance\"}\n              isSupply={true}\n              alignLeft={false}\n            />\n          </Grid>\n\n          <Grid\n            className={classes.column}\n            container\n            item\n            direction={\"column\"}\n            xs={2}\n          >\n            <NetApy\n              netApy={netApy}\n              totalYearlyChangeUsd={totalYearlyChangeUsd}\n            />\n          </Grid>\n\n          <Grid\n            className={classes.column}\n            container\n            item\n            direction={\"column\"}\n            xs={5}\n          >\n            <BalanceHeadline\n              sum={borrowBalanceUsd}\n              titleText={\"Borrow balance\"}\n              isSupply={false}\n              alignLeft={false}\n            />\n          </Grid>\n        </Grid>\n      </Hidden>\n\n      {/* Mobile */}\n      <Hidden smUp>\n        <Grid\n          container\n          direction={\"row\"}\n          className={clsx([classes.row, classes.alignMiddle])}\n        >\n          <Grid className={classes.column} item xs={4}>\n            <NetApy\n              netApy={netApy}\n              totalYearlyChangeUsd={totalYearlyChangeUsd}\n            />\n          </Grid>\n\n          <Grid className={classes.column} item xs={8}>\n            <BalanceHeadline\n              sum={0}\n              titleText={\"Supply balance\"}\n              isSupply={true}\n              alignLeft={true}\n            />\n            <BalanceHeadline\n              sum={0}\n              titleText={\"Borrow balance\"}\n              isSupply={false}\n              alignLeft={true}\n            />\n          </Grid>\n        </Grid>\n      </Hidden>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\n\nimport clsx from \"clsx\";\nimport { AFFIRMATIVE_GREEN_COLOR } from \"../../../../theme/themeConstants\";\nimport { AnimatedNumberText } from \"../../../../components/AnimatedNumberText/AnimatedNumberText\";\n\ninterface IProps {\n  usedBorrowPercentage: number;\n  collateralPotentialInUSD: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  limitBar: {\n    display: \"flex\",\n    marginTop: \"3.25rem\",\n  },\n  label: {\n    // fontFamily: \"Haas Grot Text R\",\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    color: \"#AAB8C1\",\n  },\n  limitBarLabel: {\n    color: \"#657786\",\n    // marginTop: \"0.7rem\",\n    // marginRight: \"0.625rem\",\n    marginTop: \"0.7rem\",\n    marginRight: \"0.625rem\",\n    \"&:last-of-type\": {\n      marginRight: 0,\n      marginLeft: \"0.625rem\",\n    },\n  },\n  progressBarWrapper: {\n    position: \"relative\",\n    flex: \"1 1\",\n  },\n  progress_bar_green: {\n    display: \"flex\",\n    backgroundColor: AFFIRMATIVE_GREEN_COLOR,\n  },\n  progress: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: \"1 1\",\n    height: \"5px\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    backgroundColor: \"rgba(40, 49, 55, 0.1)\",\n    borderRadius: \"100px\",\n    marginTop: \"1rem\",\n  },\n  dark_clear: {\n    background: \"rgba(54, 61, 68, 0.5)\",\n  },\n  thin: {\n    height: \"3px\",\n  },\n  progress_bar_percent_label: {\n    display: \"inline-block\",\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    width: \"100%\",\n  },\n  p: {\n    position: \"relative\",\n    float: \"right\",\n    marginRight: \"-0.7rem\",\n    color: \"#ffffff\",\n    padding: \"0.3rem 0.3rem 0.25rem 0.25rem\",\n    backgroundColor: \"#070A0E\",\n  },\n  small: {\n    fontSize: \"12px\",\n  },\n  progress_bar_hover_space: {\n    display: \"inline-block\",\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    width: \"100%\",\n    height: \"10px\",\n    marginTop: \"1rem\",\n  },\n}));\n\nexport const BorrowLimitBar = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { usedBorrowPercentage, collateralPotentialInUSD } = props;\n\n  // TODO : Add tooltip\n\n  return (\n    <div className={classes.limitBar}>\n      <label className={clsx([classes.label, classes.limitBarLabel])}>\n        Borrow Limit (<AnimatedNumberText value={usedBorrowPercentage} />\n        %)\n      </label>\n      <div className={classes.progressBarWrapper}>\n        {/*<div className=\"progress dark-clear thin\">*/}\n        <div\n          className={clsx([classes.progress, classes.dark_clear, classes.thin])}\n        >\n          <div\n            role=\"progressbar\"\n            aria-valuemin={0}\n            aria-valuemax={100}\n            className={classes.progress_bar_green}\n            style={{ width: `${usedBorrowPercentage}%` }}\n          />\n        </div>\n\n        <div className={classes.progress_bar_percent_label}>\n          <div\n            style={{\n              minWidth: \"1%\",\n              maxWidth: \"99%\",\n              width: `${usedBorrowPercentage}%`,\n            }}\n          >\n            {/*<p className={clsx([classes.p, classes.small])}>*/}\n            {/*  {usedBorrowPercentage.toFixed(2)}%*/}\n            {/*</p>*/}\n          </div>\n        </div>\n\n        <div className={classes.progress_bar_hover_space}></div>\n      </div>\n      <label className={clsx([classes.label, classes.limitBarLabel])}>\n        $\n        <AnimatedNumberText value={collateralPotentialInUSD} />\n        {/*{\" \"}*/}\n        {/*$ {collateralPotentialInUSD.toFixed(2)}*/}\n      </label>\n    </div>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { BalancesAndApy } from \"./BalancesAndApy\";\nimport { BorrowLimitBar } from \"./BorrowLimitBar\";\n\ninterface IProps {\n  supplyBalanceUsd: number;\n  borrowBalanceUsd: number;\n  netApy: number;\n  totalYearlyChangeUsd: number;\n\n  // Borrow limit\n  usedBorrowPercentage: number;\n  collateralPotentialInUSD: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  balancesTotal: {\n    position: \"relative\",\n    maxWidth: \"60em\",\n    margin: \"0 auto\",\n    [theme.breakpoints.down(\"xs\")]: {\n      margin: \"0 1.33rem\",\n    },\n  },\n}));\n\nexport const BalancesTotal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n\n  const {\n    supplyBalanceUsd,\n    netApy,\n    totalYearlyChangeUsd,\n    borrowBalanceUsd,\n    usedBorrowPercentage,\n    collateralPotentialInUSD,\n  } = props;\n\n  return (\n    <div className={classes.balancesTotal}>\n      <BalancesAndApy\n        netApy={netApy}\n        totalYearlyChangeUsd={totalYearlyChangeUsd}\n        supplyBalanceUsd={supplyBalanceUsd}\n        borrowBalanceUsd={borrowBalanceUsd}\n      />\n      <BorrowLimitBar\n        usedBorrowPercentage={usedBorrowPercentage}\n        collateralPotentialInUSD={collateralPotentialInUSD}\n      />\n    </div>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { BalancesTotal } from \"./BalancesTotal\";\nimport { useActiveLendingNetworkStore } from \"../../../../store/storeHooks\";\nimport { observer } from \"mobx-react\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles(({ palette }) => ({\n  hero: {\n    background: \"#070A0E\",\n    marginBottom: \"-3.75rem\",\n    padding: \"1.2635rem 0 7.315rem\",\n  },\n}));\n\nexport const BorrowOverview = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const classes = useStyles();\n\n    const lnStore = useActiveLendingNetworkStore();\n\n    const supplyBalanceUsd = lnStore?.totalAccountSupplyBalanceUsd || 0;\n    const borrowBalanceUsd = lnStore?.totalAccountBorrowBalanceUsd || 0;\n    const netApy = lnStore?.netApy || 0;\n    const totalYearlyChangeUsd = lnStore?.totalYearlyChangeUsd || 0;\n    const collateralPotentialInUSD = lnStore?.collateralPotentialInUSD || 0;\n    const usedBorrowPercentage = lnStore?.usedBorrowPercentage || 0;\n\n    return (\n      <section className={clsx(classes.hero)}>\n        <BalancesTotal\n          supplyBalanceUsd={supplyBalanceUsd}\n          borrowBalanceUsd={borrowBalanceUsd}\n          netApy={netApy}\n          totalYearlyChangeUsd={totalYearlyChangeUsd}\n          usedBorrowPercentage={usedBorrowPercentage}\n          collateralPotentialInUSD={collateralPotentialInUSD}\n        />\n      </section>\n    );\n  }\n);\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { SingleLNStore } from \"../../../store/multiInstanceStores/SingleLNStore\";\nimport { MarketsSection } from \"./markets/MarketsSection\";\nimport { BorrowOverview } from \"./overview/BorrowOverview\";\nimport { useActiveLendingNetworkStore } from \"../../../store/storeHooks\";\n\ninterface IProps {}\n\nexport const MainLendingNetworkTab = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    return (\n      <>\n        <BorrowOverview />\n        <MarketsSection />\n      </>\n    );\n  }\n);\n","import React from \"react\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\n\ninterface IProps {\n  title: string;\n  tokenAmount: number;\n  tokenSymbol: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n}));\n\nexport const ModalFooter = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { tokenSymbol, tokenAmount, title } = props;\n\n  return (\n    <div className={classes.footer}>\n      <Typography>{title}</Typography>\n      <Typography>\n        {tokenAmount.toLocaleString()} {tokenSymbol}\n      </Typography>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { Button, makeStyles } from \"@material-ui/core\";\n\ninterface IProps {\n  text: string;\n  onClick: () => void;\n  disabled?: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({}));\n\nexport const ModalActionButton = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { text, onClick, disabled } = props;\n\n  console.log(\"Building button\");\n\n  return (\n    <Button\n      variant={\"contained\"}\n      fullWidth\n      disabled={disabled}\n      onClick={onClick}\n      color={\"primary\"}\n    >\n      {text}\n    </Button>\n  );\n});\n","import React from \"react\";\nimport {\n  Collapse,\n  Fade,\n  Grow,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { TokenIcon } from \"../../../../icons/TokenIcon\";\nimport { AnimatedNumberText } from \"../../../../AnimatedNumberText/AnimatedNumberText\";\n\nexport type TRatesRow = {\n  label: string;\n  value: number;\n  valuePrefix?: string;\n  valueSuffix?: string;\n  tokenSymbol?: string;\n\n  // Predicted value\n  displayPredictedValues?: boolean;\n  predictedValue?: number;\n};\n\ninterface IProps {\n  title: string;\n  subTitle?: string;\n\n  rateRows: TRatesRow[];\n\n  // Styling\n  bottomBorder?: boolean;\n}\n\nconst GRAYISH_TEXT = \"#AAB8C1\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    // alignItems: \"stretch\",\n  },\n\n  rateRow: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"start\",\n    alignItems: \"center\",\n    padding: \"0.5rem\",\n  },\n\n  bottomBorder: {\n    borderBottom: \"1px solid #CCD6DD\",\n  },\n  heavyBottomBorder: {\n    borderBottom: \"1px solid rgb(20, 30, 39)\",\n  },\n  symbolIcon: {\n    marginRight: \"0.25rem\",\n  },\n  labelText: {\n    // Push to the right\n    color: GRAYISH_TEXT,\n  },\n  valueText: {\n    // Push to the right\n    // marginLeft: \"auto\",\n    color: theme.palette.text.primary,\n  },\n}));\n\nexport const BaseRates = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { title, subTitle, rateRows, bottomBorder } = props;\n\n  const arrowText = \"->\";\n\n  return (\n    <div\n      className={clsx([\n        classes.container,\n        bottomBorder ? classes.heavyBottomBorder : null,\n      ])}\n    >\n      <Typography>{title}</Typography>\n      {subTitle && <Typography variant={\"caption\"}>{subTitle}</Typography>}\n      {rateRows.map((rateRow, index) => {\n        const isLast = index === rateRows.length;\n        const predictedValue = rateRow?.predictedValue || 0;\n\n        return (\n          <div\n            className={clsx([\n              classes.rateRow,\n              isLast ? null : classes.bottomBorder,\n            ])}\n            key={`${rateRow.tokenSymbol}_${rateRow.label}`}\n          >\n            {rateRow.tokenSymbol && (\n              <TokenIcon\n                symbol={rateRow.tokenSymbol}\n                extraClasses={[classes.symbolIcon]}\n              />\n            )}\n            <Typography className={classes.labelText}>\n              {rateRow.label}\n            </Typography>\n            <div></div>\n            <Typography\n              className={classes.valueText}\n              style={{ marginLeft: \"auto\" }}\n            >\n              {(+rateRow.value.toFixed(2)).toLocaleString()}\n              {\"  \"}\n              {!rateRow.displayPredictedValues && rateRow.valueSuffix}\n            </Typography>\n\n            {rateRow.displayPredictedValues && (\n              <>\n                <Typography className={classes.valueText}>\n                  {\"   \"}\n                  {arrowText}\n                  {/*{rateRow.valuePrefix}*/}\n                  {(+predictedValue.toFixed(2)).toLocaleString()}\n                  {\"  \"}\n                  {rateRow.valueSuffix}\n                </Typography>\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import React, { useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { BaseRates, TRatesRow } from \"./BaseRates\";\n\ninterface IProps {\n  actionName: string;\n  assetSymbol: string;\n  assetSupplyApy: number;\n  distributionAssetSymbol: string;\n  distributionAssetApy: number;\n}\n\nexport const ActionRates = React.memo<IProps>((props) => {\n  const {\n    actionName,\n    assetSymbol,\n    assetSupplyApy,\n    distributionAssetSymbol,\n    distributionAssetApy,\n  } = props;\n\n  const rateRows = useMemo<TRatesRow[]>(() => {\n    const firstRow: TRatesRow = {\n      label: `${actionName} APY`,\n      tokenSymbol: assetSymbol,\n      value: assetSupplyApy,\n      valueSuffix: \"%\",\n    };\n    const secondRow: TRatesRow = {\n      label: \"Distribution APY\",\n      tokenSymbol: distributionAssetSymbol,\n      value: distributionAssetApy,\n      valueSuffix: \"%\",\n    };\n\n    return [firstRow, secondRow];\n  }, [\n    actionName,\n    assetSupplyApy,\n    assetSymbol,\n    distributionAssetApy,\n    distributionAssetSymbol,\n  ]);\n\n  return <BaseRates title={`${actionName} Rates`} rateRows={rateRows} />;\n});\n","import React, { useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { BaseRates, TRatesRow } from \"./BaseRates\";\n\ninterface IProps {\n  borrowLimitUsd: number;\n  borrowLimitUsedPercentage: number;\n  predictedBorrowLimitUsd: number;\n  predictedBorrowLimitPercentage: number;\n  displayPredictedValues?: boolean;\n  note?: string;\n}\n\nexport const BorrowLimitRates = React.memo<IProps>((props) => {\n  const {\n    borrowLimitUsd,\n    borrowLimitUsedPercentage,\n    predictedBorrowLimitUsd,\n    predictedBorrowLimitPercentage,\n    displayPredictedValues,\n    note,\n  } = props;\n\n  const rateRows = useMemo<TRatesRow[]>(() => {\n    const firstRow: TRatesRow = {\n      label: `Borrow Limit`,\n      value: borrowLimitUsd,\n      valueSuffix: \"$\",\n      displayPredictedValues: displayPredictedValues,\n      predictedValue: predictedBorrowLimitUsd,\n    };\n    const secondRow: TRatesRow = {\n      label: \"Borrow Limit Used\",\n      value: borrowLimitUsedPercentage,\n      valueSuffix: \"%\",\n      displayPredictedValues: displayPredictedValues,\n      predictedValue: predictedBorrowLimitPercentage,\n    };\n\n    return [firstRow, secondRow];\n  }, [\n    borrowLimitUsd,\n    borrowLimitUsedPercentage,\n    displayPredictedValues,\n    predictedBorrowLimitPercentage,\n    predictedBorrowLimitUsd,\n  ]);\n\n  const title = \"Borrow Limit\";\n  const subTitle = note;\n\n  return (\n    <BaseRates\n      title={title}\n      subTitle={subTitle}\n      rateRows={rateRows}\n      bottomBorder\n    />\n  );\n});\n","import React from \"react\";\nimport {\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { TokenIcon } from \"../../icons/TokenIcon\";\nimport { BRAND_MAIN_COLOR, GRAYISH_TEXT } from \"../../../theme/themeConstants\";\nimport { ActionRates } from \"../MarketInteractionModal/base/rates/ActionRates\";\nimport { BorrowLimitRates } from \"../MarketInteractionModal/base/rates/BorrowLimitRates\";\nimport { ModalActionButton } from \"../MarketInteractionModal/base/ModalActionButton\";\nimport { ModalFooter } from \"../MarketInteractionModal/base/ModalFooter\";\n\nexport type TTxWaitingStage = \"USER_APPROVAL\" | \"CONFIRMATION\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n\n  txWaitingStage: TTxWaitingStage;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  txWaitingPanel: {\n    position: \"relative\",\n    width: \"30rem\",\n    maxWidth: \"100%\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {\n    fontWeight: \"bold\",\n  },\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  messageContainer: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    textAlign: \"center\",\n\n    color: GRAYISH_TEXT,\n  },\n\n  tabBody: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    backgroundColor: \"#ffffff\",\n  },\n}));\n\nexport const TxWaitingModal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { open, closeModal, txWaitingStage } = props;\n\n  const isWaitingForUserApproval = txWaitingStage === \"USER_APPROVAL\";\n  const isWaitingForTxConfirmation = txWaitingStage === \"CONFIRMATION\";\n  const title = isWaitingForUserApproval\n    ? \"Please confirm the transaction\"\n    : \"Waiting for the transaction to be mined\";\n\n  const message = isWaitingForUserApproval\n    ? \"Please approve the tx in your wallet.\"\n    : \"This might take a few moments\";\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.txWaitingPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h6\"} className={classes.title}>\n              {title}\n            </Typography>\n          </div>\n\n          <div className={classes.messageContainer}>\n            <Typography>{message}</Typography>\n          </div>\n\n          {/* Tab Body */}\n          {/*  <div className={classes.tabBody}>*/}\n          {/*  //   /!* Borrow limit rates *!/*/}\n          {/*  //   <BorrowLimitRates*/}\n          {/*  //     borrowLimitUsd={currentBorrowLimit || 0}*/}\n          {/*  //     borrowLimitUsedPercentage={usedBorrowLimitPercentage || 0}*/}\n          {/*  //     predictedBorrowLimitPercentage={*/}\n          {/*  //       usedBorrowLimitPercentageAfterChange || 0*/}\n          {/*  //     }*/}\n          {/*  //     predictedBorrowLimitUsd={borrowLimitAfterChange || 0}*/}\n          {/*  //     displayPredictedValues={showPredictedBorrowLimits}*/}\n          {/*  //   />*/}\n          {/*  //*/}\n          {/*  /!*  <br />*!/*/}\n          {/*  /!*  <br />*!/*/}\n\n          {/*  /!*  /!* Action button *!/*!/*/}\n          {/*  /!*  <ModalActionButton*!/*/}\n          {/*  /!*    onClick={actionButtonOnClick}*!/*/}\n          {/*  /!*    text={actionButtonText}*!/*/}\n          {/*  /!*    disabled={!actionButtonActive}*!/*/}\n          {/*  /!*  />*!/*/}\n          {/*  /!*</div>*!/*/}\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","import React, { ReactNode } from \"react\";\nimport {\n  Button,\n  Collapse,\n  Fade,\n  Grid,\n  Grow,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n  Zoom,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport clsx from \"clsx\";\nimport { TokenIcon } from \"../../../icons/TokenIcon\";\nimport { IReactComponent } from \"mobx-react/src/types/IReactComponent\";\nimport { ModalFooter } from \"./ModalFooter\";\nimport { ModalActionButton } from \"./ModalActionButton\";\nimport { ActionRates } from \"./rates/ActionRates\";\nimport { BRAND_MAIN_COLOR } from \"../../../../theme/themeConstants\";\nimport { BorrowLimitRates } from \"./rates/BorrowLimitRates\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../../txWaitingModal/TxWaitingModal\";\n\nexport type TZeroOrOne = 0 | 1;\n\nexport interface IMarketModalCommonStatePayload {\n  // Tabs\n  currentTabIndex: TZeroOrOne;\n  onTabIndexChange: (newIndex: TZeroOrOne) => void;\n  tab0Title: string;\n  tab1Title: string;\n\n  // Assets\n  actionAssetSymbol: string;\n  actionAssetName: string;\n  distributionAssetSymbol: string;\n\n  // Borrow Limit (optional)\n  currentBorrowLimit?: number;\n  usedBorrowLimitPercentage?: number;\n\n  // TX waiting\n  waitingForUserApproval?: boolean;\n  waitingForTxConfirmation?: boolean;\n}\n\nexport interface IMarketModalPerTabStatePayload {\n  // Message or input component\n  messageOrInput: ReactNode;\n  showInputActionButton: boolean;\n  inputActionButtonActive: boolean;\n  inputActionButtonText: string;\n  onInputActionButtonPressed?: () => void;\n\n  // Action Rates\n  actionName: string;\n  actionApy: number;\n  distributionApy: number;\n\n  // Borrow Limit (optional)\n  showBorrowLimit?: boolean;\n  showPredictedBorrowLimits?: boolean;\n  borrowLimitAfterChange?: number;\n  usedBorrowLimitPercentageAfterChange?: number;\n  borrowLimitNote?: string;\n\n  // Action button\n  actionButtonActive: boolean;\n  actionButtonText: string;\n  actionButtonDisabledText?: string;\n  actionButtonOnClick: () => void;\n\n  // Footer\n  footerTitle: string;\n  footerTokenAmount: number;\n}\n\n// DEV_NOTE : To make it easier to build in parent components\nexport interface IMarketModalStatePayload\n  extends IMarketModalCommonStatePayload,\n    IMarketModalPerTabStatePayload {}\n\ninterface IProps extends IMarketModalStatePayload {\n  open: boolean;\n  closeModal: () => void;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  // paper: {\n  //   backgroundColor: theme.palette.background.paper,\n  //   // border: \"2px solid #000\",\n  //   boxShadow: theme.shadows[5],\n  //   padding: theme.spacing(20, 4, 3),\n  // },\n  marketInteractionPanel: {\n    position: \"relative\",\n    width: \"25.5rem\",\n    maxWidth: \"100%\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {},\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  tabBody: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    backgroundColor: \"#ffffff\",\n  },\n}));\n\nexport const MarketInteractionModal = React.memo<IProps>((props) => {\n  const {\n    open,\n    closeModal,\n\n    // Input/message\n    messageOrInput,\n    inputActionButtonText,\n    onInputActionButtonPressed,\n    showInputActionButton,\n    inputActionButtonActive,\n\n    // Assets\n    actionAssetSymbol,\n    actionAssetName,\n    distributionAssetSymbol,\n\n    // Tabs\n    currentTabIndex,\n    onTabIndexChange,\n    tab0Title,\n    tab1Title,\n\n    // Action Rates\n    actionName,\n    actionApy,\n    distributionApy,\n\n    // Borrow Limits (Optional)\n    showBorrowLimit,\n    showPredictedBorrowLimits,\n    currentBorrowLimit,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentage,\n    usedBorrowLimitPercentageAfterChange,\n    borrowLimitNote,\n\n    // Action button\n    actionButtonActive,\n    actionButtonText,\n    actionButtonDisabledText,\n    actionButtonOnClick,\n\n    // Footer\n    footerTitle,\n    footerTokenAmount,\n\n    // TX Waiting\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n  } = props;\n\n  const classes = useStyles();\n\n  if (waitingForTxConfirmation || waitingForUserApproval) {\n    const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n      ? \"CONFIRMATION\"\n      : \"USER_APPROVAL\";\n\n    return (\n      <TxWaitingModal\n        open={open}\n        closeModal={closeModal}\n        txWaitingStage={txWaitingStage}\n      />\n    );\n  }\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.marketInteractionPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Quick-n-Dirty Market icon */}\n          <TokenIcon\n            symbol={actionAssetSymbol}\n            extraClasses={[classes.tokenIcon, classes.upperLeftCorner]}\n          />\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h5\"} className={classes.title}>\n              {actionAssetName}\n            </Typography>\n          </div>\n\n          {/* Input or message */}\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {messageOrInput}\n\n            {showInputActionButton && (\n              <Button\n                color={\"primary\"}\n                style={{ marginRight: \"1.5rem\", maxHeight: \"2rem\" }}\n                variant={\"outlined\"}\n                onClick={onInputActionButtonPressed}\n                disabled={!inputActionButtonActive}\n              >\n                {inputActionButtonText}\n              </Button>\n            )}\n          </div>\n\n          {/* Tabs */}\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n            }}\n          >\n            <div\n              style={{\n                flex: 1,\n                textAlign: \"center\",\n                borderBottom:\n                  currentTabIndex === 0\n                    ? `2px solid ${BRAND_MAIN_COLOR}`\n                    : \"none\",\n              }}\n            >\n              <Button fullWidth onClick={() => onTabIndexChange(0)}>\n                <Typography>{tab0Title}</Typography>\n              </Button>\n            </div>\n            <div\n              style={{\n                flex: 1,\n                textAlign: \"center\",\n                borderBottom:\n                  currentTabIndex === 1\n                    ? `2px solid ${BRAND_MAIN_COLOR}`\n                    : \"none\",\n              }}\n            >\n              <Button fullWidth onClick={() => onTabIndexChange(1)}>\n                <Typography>{tab1Title}</Typography>\n              </Button>\n            </div>\n          </div>\n\n          {/* Tab Body */}\n          <div className={classes.tabBody}>\n            {/* Modal action rates */}\n            <ActionRates\n              actionName={actionName}\n              assetSupplyApy={actionApy}\n              assetSymbol={actionAssetSymbol}\n              distributionAssetApy={distributionApy}\n              distributionAssetSymbol={distributionAssetSymbol}\n            />\n            <br />\n\n            {/* Borrow limit rates */}\n            {showBorrowLimit && (\n              <>\n                <br />\n                <BorrowLimitRates\n                  borrowLimitUsd={currentBorrowLimit || 0}\n                  borrowLimitUsedPercentage={usedBorrowLimitPercentage || 0}\n                  predictedBorrowLimitPercentage={\n                    usedBorrowLimitPercentageAfterChange || 0\n                  }\n                  predictedBorrowLimitUsd={borrowLimitAfterChange || 0}\n                  displayPredictedValues={showPredictedBorrowLimits}\n                  note={borrowLimitNote}\n                />\n                <br />\n              </>\n            )}\n\n            <br />\n            {/* Action button */}\n            <ModalActionButton\n              onClick={actionButtonOnClick}\n              text={\n                actionButtonActive || !actionButtonDisabledText\n                  ? actionButtonText\n                  : actionButtonDisabledText\n              }\n              disabled={!actionButtonActive}\n            />\n\n            <br />\n            <br />\n\n            {/* DEV_NOTE : Footer inside of body to keep same padding easily */}\n            <ModalFooter\n              title={footerTitle}\n              tokenAmount={footerTokenAmount}\n              tokenSymbol={actionAssetSymbol}\n            />\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","// DEV_NOTE : Taken from typeless library 'eth-json-rpc-errors';\nexport const JSON_RPC_ERROR_CODES = {\n  rpc: {\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603,\n  },\n  provider: {\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n  },\n};\n","import { ContractTransaction } from \"ethers\";\nimport { useCallback, useState } from \"react\";\nimport { JSON_RPC_ERROR_CODES } from \"../../../constants/ethereumErrorCodes\";\n\nexport type TTxCreatingFunction = () =>\n  | Promise<ContractTransaction>\n  | undefined;\n\nexport function useTxWaitingLogic(\n  txCreatingFunction: TTxCreatingFunction,\n  closeModal: () => void\n) {\n  const {\n    waitingForTxConfirmation,\n    waitingForUserApproval,\n    setWaitingForTxConfirmation,\n    setWaitingForUserApproval,\n  } = useTxWaitingStateExplicit();\n\n  const wrappedTxBuildingFunction = useTxWaitingLogicExplicit(\n    txCreatingFunction,\n    closeModal,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation\n  );\n\n  return {\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n    wrappedTxBuildingFunction,\n  };\n}\n\nexport function useTxWaitingStateExplicit() {\n  const [waitingForUserApproval, setWaitingForUserApproval] = useState(false);\n  const [waitingForTxConfirmation, setWaitingForTxConfirmation] = useState(\n    false\n  );\n\n  return {\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation,\n  };\n}\n\nexport function useTxWaitingLogicExplicit(\n  txCreatingFunction: TTxCreatingFunction,\n  closeModal: () => void,\n  setWaitingForUserApproval: (val: boolean) => void,\n  setWaitingForTxConfirmation: (val: boolean) => void\n) {\n  const wrappedTxBuildingFunction = useCallback(async () => {\n    let contractTx: ContractTransaction | undefined;\n\n    // We are going to ask the user to approve tx\n    setWaitingForUserApproval(true);\n\n    try {\n      contractTx = await txCreatingFunction();\n\n      // We are after user approval, let's wait for the tx to be mined\n      setWaitingForTxConfirmation(true);\n\n      await contractTx?.wait();\n    } catch (e) {\n      if (e.code === JSON_RPC_ERROR_CODES.provider.userRejectedRequest) {\n        // User denied tx\n        console.log(\"User denied tx\");\n      } else {\n        // TODO : Have a more user-friendly error communication.\n        // DEV_NOTE :\n        closeModal();\n        throw e;\n      }\n    } finally {\n      // No matter what, we ain't waiting after this line\n      setWaitingForUserApproval(false);\n      setWaitingForTxConfirmation(false);\n    }\n  }, [\n    closeModal,\n    setWaitingForTxConfirmation,\n    setWaitingForUserApproval,\n    txCreatingFunction,\n  ]);\n\n  return wrappedTxBuildingFunction;\n}\n","import {\n  useAccountStore,\n  useLendingNetworksStore,\n  useModalsStore,\n} from \"../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { SingleCTokenStore } from \"../../../store/multiInstanceStores/SingleCTokenStore\";\nimport { useCallback, useState } from \"react\";\nimport { TZeroOrOne } from \"./base/MarketInteractionModal\";\nimport { ethers } from \"ethers\";\nimport { useTxWaitingLogicExplicit } from \"../txWaitingModal/txWaitingHooks\";\n\nexport function useMarketInteractionModalBase() {\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const activeLNStore = lendingNetworksStore.activeLNStore;\n  const assetAddressToParamsMap =\n    activeLNStore?.assetBaseAddressToParams ||\n    new Map<string, TAssetInMarketParameters>();\n  const assetBaseAddress = modalsStore.assetBaseAddress;\n\n  const assetParams = assetAddressToParamsMap.get(assetBaseAddress);\n  const isNativeCoin = assetParams?.symbol === accountStore.nativeCoinSymbol;\n\n  const cTokenStore = activeLNStore?.baseAssetsToCTokenStore.get(\n    assetBaseAddress\n  );\n\n  const cToken = cTokenStore?.cTokenAddress || \"\";\n\n  const supplyTokenSymbol = assetParams?.symbol || \"\";\n  const supplyTokenName = assetParams?.name || \"\";\n  const distributionTokenSymbol =\n    activeLNStore?.distributionAssetParams.symbol || \"NONE\";\n\n  const walletBalance = cTokenStore?.accountUnderlyingBalanceInUnits || 0;\n  const hasWalletBalance = walletBalance > 0;\n  const needToApprove = !isNativeCoin; // False for native\n\n  const pricePerUnitUsd = cTokenStore?.underlyingUsdPrice || 0;\n  const collateralFactorInUnits = cTokenStore?.collateralFactorInUnits || 0;\n  const currentBorrowLimitUsd = activeLNStore?.liquidityUsd || 0;\n  const usedBorrowPercentage = activeLNStore?.usedBorrowPercentage || 0;\n  const totalAccountBorrowBalanceUsd =\n    activeLNStore?.totalAccountBorrowBalanceUsd || 0;\n\n  const distributionAssetApy = activeLNStore?.distributionAssetApy || 0;\n  const supplyApy = cTokenStore?.supplyApyInPercentages || 0;\n  const borrowApy = cTokenStore?.borrowApyInPercentages || 0;\n\n  // Can they borrow more ?\n  const currentLiquidityUsd = activeLNStore?.liquidityUsd || 0;\n  const hasAvailableLiquidity = currentLiquidityUsd > 0; // True means user can borrow&withdraw\n\n  // How many units can the user borrow more\n  const liquidityInAssetUnits = currentLiquidityUsd / pricePerUnitUsd;\n\n  const isCollaterable = cTokenStore?.isCollaterable || false;\n\n  return {\n    accountStore,\n    modalsStore,\n    lendingNetworksStore,\n    activeLNStore,\n    assetBaseAddress,\n    isNativeCoin,\n    cTokenStore,\n    cToken,\n    supplyTokenSymbol,\n    supplyTokenName,\n    distributionTokenSymbol,\n    isCollaterable,\n\n    walletBalance,\n    hasWalletBalance,\n    needToApprove,\n\n    pricePerUnitUsd,\n    collateralFactorInUnits,\n    currentBorrowLimitUsd,\n    usedBorrowPercentage,\n    totalAccountBorrowBalanceUsd,\n\n    distributionAssetApy,\n    supplyApy,\n    borrowApy,\n\n    hasAvailableLiquidity,\n    liquidityInAssetUnits,\n  };\n}\n\nexport function useMarketInteractionModalTabsState() {\n  const [activeTabIndex, setActiveTabIndex] = useState<TZeroOrOne>(0);\n\n  const borrowTabIndex = 0;\n  const repayTabIndex = 1;\n  const tab0Title = \"Borrow\";\n  const tab1Title = \"Repay\";\n\n  const isBorrow = activeTabIndex === borrowTabIndex;\n  const isRepay = activeTabIndex === repayTabIndex;\n\n  return {\n    activeTabIndex,\n    setActiveTabIndex,\n  };\n}\n\nexport function useMarketInteractionActiveTabState(activeTabIndex: TZeroOrOne) {\n  return [activeTabIndex === 0, activeTabIndex === 1];\n}\n\nexport function useOnEnableClicked(\n  cToken: string,\n  assetBaseAddress: string,\n  closeModal: () => void,\n  setWaitingForUserApproval: (val: boolean) => void,\n  setWaitingForTxConfirmation: (val: boolean) => void\n) {\n  const accountStore = useAccountStore();\n\n  const createEnableTx = useCallback(() => {\n    return accountStore.approveErc20Usage(\n      assetBaseAddress,\n      cToken,\n      ethers.constants.MaxUint256\n    );\n  }, [accountStore, assetBaseAddress, cToken]);\n\n  const wrappedEnableTx = useTxWaitingLogicExplicit(\n    createEnableTx,\n    closeModal,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation\n  );\n\n  const onEnableClicked = useCallback(async () => {\n    if (!cToken) {\n      return console.log(\"No CToken Address\");\n    }\n\n    await wrappedEnableTx();\n\n    console.log(`Enable button clicked`);\n    await console.log(`Enable is done !`);\n  }, [cToken, wrappedEnableTx]);\n\n  return onEnableClicked;\n}\n\n/**\n *\n * @param currentBorrowLimitUsd\n * @param totalAccountBorrowBalanceUsd sum of all active borrows in USD\n * @param actionInUnits DEV_NOTE : Units should be negative for actions that reduce collateral (borrow/withdraw)\n * @param unitPriceInUsd\n * @param collateralFactorInUnits\n */\nexport function useCalculateChangeInBorrowLimits(\n  currentBorrowLimitUsd: number,\n  totalAccountBorrowBalanceUsd: number,\n  actionInUnits: number,\n  unitPriceInUsd: number,\n  collateralFactorInUnits: number\n) {\n  const actionEffectInUsd = actionInUnits * unitPriceInUsd;\n\n  const collateralValueOfActionEffect =\n    actionEffectInUsd * collateralFactorInUnits;\n\n  const borrowLimitAfterChange =\n    currentBorrowLimitUsd + collateralValueOfActionEffect;\n\n  const usedBorrowLimitPercentageAfterChange =\n    totalAccountBorrowBalanceUsd / borrowLimitAfterChange;\n\n  const actionLeadsToShortfall = borrowLimitAfterChange < 0;\n\n  return {\n    actionEffectInUsd,\n    actionLeadsToShortfall,\n    collateralValueOfActionEffect,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  };\n}\n\n/**\n *\n * @param currentBorrowLimitUsd\n * @param totalAccountBorrowBalanceUsd sum of all active borrows in USD\n * @param actionInUnits DEV_NOTE : Units should be negative for actions that reduce collateral (borrow/withdraw)\n * @param unitPriceInUsd\n * @param collateralFactorInUnits\n */\nexport function useCalculateChangeInBorrowLimitsForBorrow(\n  currentBorrowLimitUsd: number,\n  totalAccountBorrowBalanceUsd: number,\n  actionInUnits: number,\n  unitPriceInUsd: number\n) {\n  const actionEffectInUsd = actionInUnits * unitPriceInUsd;\n\n  const collateralValueOfActionEffect = actionEffectInUsd;\n\n  const borrowLimitAfterChange =\n    currentBorrowLimitUsd + collateralValueOfActionEffect;\n\n  const usedBorrowLimitPercentageAfterChange =\n    totalAccountBorrowBalanceUsd / borrowLimitAfterChange;\n\n  const actionLeadsToShortfall = borrowLimitAfterChange < 0;\n\n  return {\n    actionEffectInUsd,\n    actionLeadsToShortfall,\n    collateralValueOfActionEffect,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  };\n}\n","import React from \"react\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { TokenIcon } from \"../../../../icons/TokenIcon\";\n\ninterface IProps {\n  tokenSymbol: string;\n  message: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    width: \"100%\",\n    paddingTop: \"1rem\",\n    padding: \"2.5rem\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  largeIcon: {\n    width: \"3rem\",\n    height: \"3rem\",\n  },\n}));\n\nexport const MainModalMessage = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { tokenSymbol, message } = props;\n\n  return (\n    <div className={classes.container}>\n      <TokenIcon symbol={tokenSymbol} extraClasses={[classes.largeIcon]} />\n      <br />\n      {/*<Typography variant={\"h6\"}>Message ${tokenSymbol}</Typography>*/}\n      <Typography>{message}</Typography>\n    </div>\n  );\n});\n","import React, { ReactNode, useCallback, useMemo, useState } from \"react\";\nimport {\n  IMarketModalCommonStatePayload,\n  IMarketModalPerTabStatePayload,\n  IMarketModalStatePayload,\n  MarketInteractionModal,\n  TZeroOrOne,\n} from \"./base/MarketInteractionModal\";\nimport { Button, Input, Typography } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport { ethers } from \"ethers\";\nimport {\n  useCalculateChangeInBorrowLimits,\n  useMarketInteractionActiveTabState,\n  useMarketInteractionModalBase,\n  useMarketInteractionModalTabsState,\n  useOnEnableClicked,\n} from \"./marketInteractionModalHooks\";\nimport { MainModalMessage } from \"./base/mainModalMessage/MainModalMessage\";\nimport {\n  useTxWaitingLogicExplicit,\n  useTxWaitingStateExplicit,\n} from \"../txWaitingModal/txWaitingHooks\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nexport const SupplyModal = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const { open, closeModal } = props;\n\n    const {\n      lendingNetworksStore,\n      cTokenStore,\n      modalsStore,\n      accountStore,\n      assetBaseAddress,\n      activeLNStore,\n      isNativeCoin,\n      cToken,\n      isCollaterable,\n\n      walletBalance,\n      hasWalletBalance,\n      needToApprove,\n\n      distributionTokenSymbol,\n      supplyTokenSymbol,\n      supplyTokenName,\n      pricePerUnitUsd,\n      currentBorrowLimitUsd,\n      collateralFactorInUnits,\n      usedBorrowPercentage,\n      totalAccountBorrowBalanceUsd,\n      distributionAssetApy,\n      borrowApy,\n      supplyApy,\n\n      hasAvailableLiquidity,\n      liquidityInAssetUnits,\n    } = useMarketInteractionModalBase();\n\n    const {\n      activeTabIndex,\n      setActiveTabIndex,\n    } = useMarketInteractionModalTabsState();\n\n    const {\n      waitingForUserApproval,\n      waitingForTxConfirmation,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n    } = useTxWaitingStateExplicit();\n\n    const [isSupply, isWithdraw] = useMarketInteractionActiveTabState(\n      activeTabIndex\n    );\n\n    const onEnableClicked = useOnEnableClicked(\n      cToken,\n      assetBaseAddress,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const [supplyInputValue, setSupplyInputValue] = useState(0);\n    const [withdrawInputValue, setWithdrawInputValue] = useState(0);\n\n    const clearStateBeforeClose = useCallback(() => {\n      setSupplyInputValue(0);\n      setWithdrawInputValue(0);\n      closeModal();\n    }, [closeModal]);\n\n    // Constants\n    const tab0Title = \"Supply\";\n    const tab1Title = \"Withdraw\";\n\n    // TODO : Separate inputs for each usage / make a component\n    const inputComponent = useMemo(() => {\n      return (\n        <div\n          style={{\n            width: \"100%\",\n            padding: \"2.5rem\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Input\n            style={{ textAlign: \"center\" }}\n            inputProps={{ style: { textAlign: \"center\", appearance: \"none\" } }}\n            type={\"number\"}\n            title={\"Input\"}\n            name={\"Input\"}\n            value={isSupply ? supplyInputValue : withdrawInputValue}\n            onChange={(e) =>\n              isSupply\n                ? setSupplyInputValue(sanitizeNumericInput(e.target.value))\n                : setWithdrawInputValue(sanitizeNumericInput(e.target.value))\n            }\n          />\n        </div>\n      );\n    }, [isSupply, supplyInputValue, withdrawInputValue]);\n\n    // TODO : CRITICAL : Add test for 'some' approval (not unlimitted) as well\n    const hasApprovedERC20 = cTokenStore?.hasAnyAllowance;\n    const currentSupplyBalance = cTokenStore?.accountSupplyInUnits || 0;\n    const hasSupplyBalance = currentSupplyBalance > 0;\n\n    const createSupplyTx = () =>\n      accountStore.supplyToMarket(\n        cToken,\n        ethers.utils.parseUnits(\n          supplyInputValue.toString(),\n          cTokenStore?.underlyingDecimals || -1\n        ),\n        isNativeCoin\n      );\n\n    const createWithdrwaTx = () =>\n      accountStore.withdrawFromMarket(\n        cToken,\n        ethers.utils.parseUnits(\n          withdrawInputValue.toString(),\n          cTokenStore?.underlyingDecimals || -1\n        ),\n        isNativeCoin\n      );\n\n    const wrappedSupplyTx = useTxWaitingLogicExplicit(\n      createSupplyTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const wrappedWIthdrawTx = useTxWaitingLogicExplicit(\n      createWithdrwaTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const onSupplyClicked = useCallback(async () => {\n      console.log(`Supply button clicked`);\n\n      await wrappedSupplyTx();\n\n      console.log(`Supply is done !`);\n    }, [wrappedSupplyTx]);\n    const onWithdrawClicked = useCallback(async () => {\n      console.log(`Withdraw button clicked`);\n\n      await wrappedWIthdrawTx();\n\n      console.log(`Withdraw is done !`);\n    }, [wrappedWIthdrawTx]);\n\n    const messageOrInputComponent = useMemo<ReactNode>(() => {\n      if (isSupply) {\n        if (needToApprove && !hasApprovedERC20) {\n          // Message component - needs to approve\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Please approve ${supplyTokenSymbol} usage`}\n            />\n          );\n        } else {\n          // Input component - how much to supply ?\n          return inputComponent;\n        }\n      } else if (isWithdraw) {\n        // Input component - how much to withdraw ?\n        return inputComponent;\n      }\n\n      // Safe error\n      return <></>;\n    }, [\n      hasApprovedERC20,\n      inputComponent,\n      isSupply,\n      isWithdraw,\n      needToApprove,\n      supplyTokenSymbol,\n    ]);\n\n    // Must have wallet balance in this asset + Must approve (if needed)\n    const canSupply =\n      hasWalletBalance && (needToApprove ? hasApprovedERC20 : true);\n    const canWithdraw = hasSupplyBalance;\n\n    const borrowLimitNote = !isCollaterable\n      ? `Enable ${supplyTokenSymbol} as collateral to affect Borrow limit`\n      : undefined;\n\n    // Common payload part\n    const commonPayloadPart = useMemo<IMarketModalCommonStatePayload>(() => {\n      const commonModalState: IMarketModalCommonStatePayload = {\n        // Tabs\n        currentTabIndex: activeTabIndex,\n        onTabIndexChange: setActiveTabIndex,\n        tab0Title,\n        tab1Title,\n\n        // Assets\n        actionAssetSymbol: supplyTokenSymbol,\n        actionAssetName: supplyTokenName,\n        distributionAssetSymbol: distributionTokenSymbol,\n\n        // Borrow Limit (optional)\n        currentBorrowLimit: currentBorrowLimitUsd,\n        usedBorrowLimitPercentage: usedBorrowPercentage,\n\n        // Tx Waiting\n        waitingForTxConfirmation,\n        waitingForUserApproval,\n      };\n\n      return commonModalState;\n    }, [\n      activeTabIndex,\n      currentBorrowLimitUsd,\n      distributionTokenSymbol,\n      setActiveTabIndex,\n      supplyTokenName,\n      supplyTokenSymbol,\n      usedBorrowPercentage,\n      waitingForTxConfirmation,\n      waitingForUserApproval,\n    ]);\n\n    // Payload for supply\n    const marketModalStatePayloadForSupplyTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      const isSupplyInputValueValid = supplyInputValue > 0;\n      const isOfferingMoreThanWalletBalance = supplyInputValue > walletBalance;\n      const actionButtonTextForSupply = canSupply\n        ? \"Supply\"\n        : needToApprove\n        ? \"Approve\"\n        : \"No Balance\";\n\n      const activeButtonActive =\n        (isSupplyInputValueValid &&\n          canSupply &&\n          !isOfferingMoreThanWalletBalance) ||\n        (needToApprove && !hasApprovedERC20);\n      const actionButtonCbForSupply = canSupply\n        ? onSupplyClicked\n        : onEnableClicked;\n\n      let reasonForNotBeingAbleToWithdraw = undefined;\n      if (!hasWalletBalance) {\n        reasonForNotBeingAbleToWithdraw = \"No balance to supply\";\n      } else if (isOfferingMoreThanWalletBalance) {\n        reasonForNotBeingAbleToWithdraw = \"Exceeding wallet balance\";\n      } else if (!isSupplyInputValueValid) {\n        // No message\n        // reasonForNotBeingAbleToWithdraw = \"Invalid sum\";\n      }\n\n      const actionButtonDisabledText = reasonForNotBeingAbleToWithdraw;\n\n      // Calculate the changes to borrow limit (USD and % used)\n      const {\n        collateralValueOfActionEffect,\n        borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange,\n      } = useCalculateChangeInBorrowLimits(\n        currentBorrowLimitUsd,\n        totalAccountBorrowBalanceUsd,\n        supplyInputValue,\n        pricePerUnitUsd,\n        collateralFactorInUnits\n      );\n\n      const showPredictedBorrowLimits =\n        isCollaterable && collateralValueOfActionEffect !== 0;\n\n      // Input action button\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText: \"\",\n        showInputActionButton: false,\n        inputActionButtonActive: false,\n        onInputActionButtonPressed: undefined,\n\n        // Action Rates\n        actionName: \"Supply\",\n        actionApy: supplyApy,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        // DEV_NOTE : We want to show the effect of both supply and withdraw on the borrow limits\n        showBorrowLimit: isWithdraw || canSupply,\n        borrowLimitAfterChange: borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange: usedBorrowLimitPercentageAfterChange,\n        showPredictedBorrowLimits,\n        borrowLimitNote,\n\n        // Action button\n        actionButtonActive: activeButtonActive,\n        actionButtonText: actionButtonTextForSupply,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForSupply,\n\n        // Footer\n        footerTitle: \"Wallet Balance\",\n        footerTokenAmount: walletBalance,\n      };\n\n      return payload;\n    }, [\n      borrowLimitNote,\n      canSupply,\n      collateralFactorInUnits,\n      currentBorrowLimitUsd,\n      distributionAssetApy,\n      hasApprovedERC20,\n      hasWalletBalance,\n      isCollaterable,\n      isWithdraw,\n      messageOrInputComponent,\n      needToApprove,\n      onEnableClicked,\n      onSupplyClicked,\n      pricePerUnitUsd,\n      supplyApy,\n      supplyInputValue,\n      totalAccountBorrowBalanceUsd,\n      walletBalance,\n    ]);\n\n    // Payload for withdraw\n    const marketModalStatePayloadForWithdrawTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      // Calculate borrow limit (USD and % used) after requested withdraw\n      const {\n        actionLeadsToShortfall,\n        collateralValueOfActionEffect,\n        borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange,\n      } = useCalculateChangeInBorrowLimits(\n        currentBorrowLimitUsd,\n        totalAccountBorrowBalanceUsd,\n        withdrawInputValue * -1,\n        pricePerUnitUsd,\n        collateralFactorInUnits\n      );\n\n      const withdrawInputValid = withdrawInputValue > 0;\n      const isRequestingMoreThanSuppliedBalance =\n        withdrawInputValue > currentSupplyBalance;\n\n      const activeButtonActive =\n        canWithdraw &&\n        withdrawInputValid &&\n        !isRequestingMoreThanSuppliedBalance &&\n        !actionLeadsToShortfall;\n      const actionButtonCbForWithdraw = onWithdrawClicked;\n\n      let reasonForNotBeingAbleToWithdraw = undefined;\n      if (!hasSupplyBalance) {\n        reasonForNotBeingAbleToWithdraw = \"No balance to withdraw\";\n      } else if (isRequestingMoreThanSuppliedBalance) {\n        reasonForNotBeingAbleToWithdraw = \"Exceeding supplied balance\";\n      } else if (!withdrawInputValid) {\n        // No message\n        // reasonForNotBeingAbleToWithdraw = \"Invalid sum\";\n      }\n\n      // const actionButtonTextForWithdraw = canWithdraw ? \"Withdraw\" : \"\";\n      const actionButtonTextForWithdraw = \"Withdraw\";\n      const actionButtonDisabledText = reasonForNotBeingAbleToWithdraw;\n\n      const showPredictedBorrowLimits = collateralValueOfActionEffect !== 0;\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText: \"\",\n        showInputActionButton: false,\n        inputActionButtonActive: false,\n        onInputActionButtonPressed: undefined,\n\n        // Action Rates\n        actionName: \"Supply\",\n        actionApy: supplyApy,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        showBorrowLimit: isWithdraw,\n        borrowLimitAfterChange,\n        showPredictedBorrowLimits,\n        usedBorrowLimitPercentageAfterChange,\n        borrowLimitNote,\n\n        // Action button\n        actionButtonActive: activeButtonActive,\n        actionButtonText: actionButtonTextForWithdraw,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForWithdraw,\n\n        // Footer\n        footerTitle: \"Currently Supplying\",\n        footerTokenAmount: currentSupplyBalance,\n      };\n\n      return payload;\n    }, [\n      borrowLimitNote,\n      canWithdraw,\n      collateralFactorInUnits,\n      currentBorrowLimitUsd,\n      currentSupplyBalance,\n      distributionAssetApy,\n      hasSupplyBalance,\n      isWithdraw,\n      messageOrInputComponent,\n      onWithdrawClicked,\n      pricePerUnitUsd,\n      supplyApy,\n      totalAccountBorrowBalanceUsd,\n      withdrawInputValue,\n    ]);\n\n    const statePerTabPayload = isSupply\n      ? marketModalStatePayloadForSupplyTab\n      : marketModalStatePayloadForWithdrawTab;\n\n    const marketModalStatePayload = useMemo<IMarketModalStatePayload>(() => {\n      const payload: IMarketModalStatePayload = {\n        ...commonPayloadPart,\n        ...statePerTabPayload,\n      };\n\n      return payload;\n    }, [commonPayloadPart, statePerTabPayload]);\n\n    return (\n      <MarketInteractionModal\n        open={open}\n        closeModal={clearStateBeforeClose}\n        {...marketModalStatePayload}\n      />\n    );\n  }\n);\n\nfunction sanitizeNumericInput(stringValueOfNumericInput?: string): number {\n  let safeString = stringValueOfNumericInput || \"0\";\n  // DEV_NOTE : Barbaric way\n  while (safeString.length > 1 && safeString.charAt(0) === \"0\") {\n    console.log(`Starts in 0 : ${safeString}`);\n    safeString = safeString.substring(1, safeString.length);\n    console.log(`After trim : ${safeString}`);\n  }\n\n  const parsedAsFloat = +safeString;\n  if (!stringValueOfNumericInput || isNaN(parsedAsFloat)) {\n    return 0;\n  }\n\n  return parsedAsFloat;\n}\n","import React, {\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  IMarketModalCommonStatePayload,\n  IMarketModalPerTabStatePayload,\n  IMarketModalStatePayload,\n  MarketInteractionModal,\n} from \"./base/MarketInteractionModal\";\nimport { Input } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport { BigNumber, ethers } from \"ethers\";\nimport {\n  useCalculateChangeInBorrowLimitsForBorrow,\n  useMarketInteractionActiveTabState,\n  useMarketInteractionModalBase,\n  useMarketInteractionModalTabsState,\n  useOnEnableClicked,\n} from \"./marketInteractionModalHooks\";\nimport { MainModalMessage } from \"./base/mainModalMessage/MainModalMessage\";\nimport {\n  useTxWaitingLogicExplicit,\n  useTxWaitingStateExplicit,\n} from \"../txWaitingModal/txWaitingHooks\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nexport const BorrowModal = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const { open, closeModal } = props;\n\n    const {\n      lendingNetworksStore,\n      cTokenStore,\n      modalsStore,\n      accountStore,\n      assetBaseAddress,\n      activeLNStore,\n      isNativeCoin,\n      cToken,\n      isCollaterable,\n\n      walletBalance,\n      needToApprove,\n      hasWalletBalance,\n\n      distributionTokenSymbol,\n      supplyTokenSymbol,\n      supplyTokenName,\n      totalAccountBorrowBalanceUsd,\n      usedBorrowPercentage,\n      collateralFactorInUnits,\n      currentBorrowLimitUsd,\n      pricePerUnitUsd,\n      distributionAssetApy,\n      borrowApy,\n      supplyApy,\n\n      liquidityInAssetUnits,\n      hasAvailableLiquidity,\n    } = useMarketInteractionModalBase();\n\n    const {\n      waitingForUserApproval,\n      waitingForTxConfirmation,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n    } = useTxWaitingStateExplicit();\n\n    const {\n      activeTabIndex,\n      setActiveTabIndex,\n    } = useMarketInteractionModalTabsState();\n\n    const [isBorrow, isRepay] = useMarketInteractionActiveTabState(\n      activeTabIndex\n    );\n\n    const onEnableClicked = useOnEnableClicked(\n      cToken,\n      assetBaseAddress,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const [isRepayingMax, setIsRepayingMax] = useState(false);\n    const [borrowInputValue, setBorrowInputValue] = useState(0);\n    const [repayInputValue, setRepayInputValue] = useState(0);\n\n    useEffect(() => {\n      let newToken = cToken;\n      setIsRepayingMax(false);\n    }, [cToken]);\n\n    const clearStateBeforeClose = useCallback(() => {\n      setBorrowInputValue(0);\n      setRepayInputValue(0);\n      closeModal();\n    }, [closeModal]);\n\n    // Constants\n    const tab0Title = \"Borrow\";\n    const tab1Title = \"Repay\";\n\n    // TODO : Separate inputs for each usage / make a component\n    const inputComponent = useMemo(() => {\n      return (\n        <div\n          style={{\n            width: \"100%\",\n            padding: \"2.5rem\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Input\n            style={{ textAlign: \"center\" }}\n            inputProps={{ style: { textAlign: \"center\" } }}\n            type={\"number\"}\n            title={\"Input\"}\n            name={\"Input\"}\n            value={isBorrow ? borrowInputValue : repayInputValue}\n            onChange={(e) =>\n              isBorrow\n                ? setBorrowInputValue(sanitizeNumericInput(e.target.value))\n                : setRepayInputValue(sanitizeNumericInput(e.target.value))\n            }\n          />\n        </div>\n      );\n    }, [borrowInputValue, isBorrow, repayInputValue]);\n\n    // TODO : CRITICAL : Add test for 'some' approval (not unlimitted) as well\n    const hasApprovedERC20 = cTokenStore?.hasAnyAllowance;\n    // Is our user borrowing this asset ?\n    const currentBorrowBalance = cTokenStore?.accountBorrowInUnits || 0;\n    const hasBorrowBalance = currentBorrowBalance > 0;\n    const needsToButNotYetApproved = needToApprove && !hasApprovedERC20;\n\n    const createBorrowTx = () =>\n      accountStore.borrowFromMarket(\n        cToken,\n        ethers.utils.parseUnits(\n          borrowInputValue.toString(),\n          cTokenStore?.underlyingDecimals || -1\n        ),\n        isNativeCoin\n      );\n\n    const repayAmount = useMemo(() => {\n      if (isRepayingMax) {\n        return ethers.constants.MaxUint256;\n      } else {\n        return ethers.utils.parseUnits(\n          repayInputValue.toString(),\n          cTokenStore?.underlyingDecimals || 0\n        );\n      }\n    }, [cTokenStore?.underlyingDecimals, isRepayingMax, repayInputValue]);\n\n    const createRepayTx = () =>\n      accountStore.repayToMarket(cToken, repayAmount, isNativeCoin);\n\n    const wrappedBorrowTx = useTxWaitingLogicExplicit(\n      createBorrowTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const wrappedRepayTx = useTxWaitingLogicExplicit(\n      createRepayTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const onBorrowClicked = useCallback(async () => {\n      if (!cToken) {\n        return console.log(\"No CToken Address\");\n      }\n\n      console.log(`Borrow button clicked`);\n      await wrappedBorrowTx();\n      console.log(`Borrow is done !`);\n    }, [cToken, wrappedBorrowTx]);\n\n    const onRepayClicked = useCallback(async () => {\n      console.log(`Repay button clicked`);\n      await wrappedRepayTx();\n      console.log(`Repay is done !`);\n    }, [wrappedRepayTx]);\n\n    // How many units does the cToken holds ?\n    const cTokenCashInUnits = cTokenStore?.cTokenCashInUnits || 0;\n\n    // Is borrowing from this asset ?\n    const accountBorrowInUnits = cTokenStore?.accountBorrowInUnits || 0;\n\n    // How much underlying (in USD) does the market hold ?\n    const cTokenCashInUsd = cTokenStore?.cTokenCashInUSD || 0;\n\n    const repayIsZero = repayInputValue === 0;\n    const hasEnoughToRepayAll = walletBalance > accountBorrowInUnits;\n    const canRepayMax = hasWalletBalance && hasEnoughToRepayAll && !repayIsZero;\n\n    const onSetRepayToMaxClicked = useCallback(() => {\n      console.log(\"set repay max\");\n      setIsRepayingMax(!isRepayingMax);\n    }, [isRepayingMax]);\n\n    const messageOrInputComponent = useMemo<ReactNode>(() => {\n      if (isRepay) {\n        if (needsToButNotYetApproved) {\n          // Message component - needs to approve\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Please approve ${supplyTokenSymbol} usage`}\n            />\n          );\n        } else if (isRepayingMax) {\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Repaying all (~${(+currentBorrowBalance.toFixed(\n                2\n              )).toLocaleString()})`}\n            />\n          );\n        } else {\n          // Input component - how much to supply ?\n          return inputComponent;\n        }\n      } else if (isBorrow) {\n        // Input component - how much to withdraw ?\n        return inputComponent;\n      }\n\n      // Safe error\n      return <></>;\n    }, [\n      currentBorrowBalance,\n      inputComponent,\n      isBorrow,\n      isRepay,\n      isRepayingMax,\n      needsToButNotYetApproved,\n      supplyTokenSymbol,\n    ]);\n\n    // // Must have active borrow in this asset + Must approve (if needed)\n    // const canRepay =\n    //   hasBorrowBalance && (needToApprove ? hasApprovedERC20 : true);\n\n    // TODO : Make sure this is a right assumption\n    // Either what the user is allowed to borrow, or everything there is.\n    const maxPossibleBorrow = Math.max(\n      liquidityInAssetUnits,\n      cTokenCashInUnits\n    );\n\n    // Common payload part\n    const commonPayloadPart = useMemo<IMarketModalCommonStatePayload>(() => {\n      const commonModalState: IMarketModalCommonStatePayload = {\n        // Tabs\n        currentTabIndex: activeTabIndex,\n        onTabIndexChange: setActiveTabIndex,\n        tab0Title,\n        tab1Title,\n\n        // Assets\n        actionAssetSymbol: supplyTokenSymbol,\n        actionAssetName: supplyTokenName,\n        distributionAssetSymbol: distributionTokenSymbol,\n\n        // Borrow Limit (optional)\n        currentBorrowLimit: currentBorrowLimitUsd,\n        usedBorrowLimitPercentage: usedBorrowPercentage,\n\n        // Tx Waiting\n        waitingForUserApproval,\n        waitingForTxConfirmation,\n      };\n\n      return commonModalState;\n    }, [\n      activeTabIndex,\n      currentBorrowLimitUsd,\n      distributionTokenSymbol,\n      setActiveTabIndex,\n      supplyTokenName,\n      supplyTokenSymbol,\n      usedBorrowPercentage,\n      waitingForTxConfirmation,\n      waitingForUserApproval,\n    ]);\n\n    // Payload for Borrow\n    const marketModalStatePayloadForBorrowTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      // Calculate the changes to borrow limit (USD and % used)\n      const {\n        actionEffectInUsd,\n        actionLeadsToShortfall,\n        collateralValueOfActionEffect,\n        borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange,\n      } = useCalculateChangeInBorrowLimitsForBorrow(\n        currentBorrowLimitUsd,\n        totalAccountBorrowBalanceUsd,\n        borrowInputValue * -1,\n        pricePerUnitUsd\n      );\n\n      const isRequestingMoreThanCanBorrow =\n        borrowInputValue > maxPossibleBorrow;\n\n      const borrowUsdSum = -1 * actionEffectInUsd;\n      const isRequestingMoreThanMarketLiquidity =\n        borrowUsdSum > cTokenCashInUsd;\n\n      const canBorrow =\n        hasAvailableLiquidity &&\n        !isRequestingMoreThanCanBorrow &&\n        !isRequestingMoreThanMarketLiquidity &&\n        !actionLeadsToShortfall;\n\n      let reasonForNotBeingAbleToBorrow = undefined;\n      if (!hasAvailableLiquidity) {\n        reasonForNotBeingAbleToBorrow = \"Borrowing limit reached\";\n      } else if (isRequestingMoreThanCanBorrow) {\n        reasonForNotBeingAbleToBorrow = \"Requesting more than can borrow\";\n      } else if (isRequestingMoreThanMarketLiquidity) {\n        reasonForNotBeingAbleToBorrow = \"Exceeding market liquidity\";\n      } else if (actionLeadsToShortfall) {\n        reasonForNotBeingAbleToBorrow = \"Leads to shortfall\";\n      }\n\n      const actionButtonTextForBorrow = \"Borrow\";\n      const actionButtonDisabledText = reasonForNotBeingAbleToBorrow;\n\n      const activeButtonActive = canBorrow && borrowInputValue > 0;\n\n      const actionButtonCbForSupply = onBorrowClicked;\n\n      const showPredictedBorrowLimits = collateralValueOfActionEffect !== 0;\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText: \"\",\n        showInputActionButton: false,\n        inputActionButtonActive: false,\n        onInputActionButtonPressed: undefined,\n\n        // Action Rates\n        actionName: \"Borrow\",\n        actionApy: borrowApy,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        showBorrowLimit: true,\n        borrowLimitAfterChange: borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange: usedBorrowLimitPercentageAfterChange,\n        showPredictedBorrowLimits,\n\n        // Action button\n        actionButtonActive: activeButtonActive,\n        actionButtonText: actionButtonTextForBorrow,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForSupply,\n\n        // Footer\n        footerTitle: \"Currently Borrowing\",\n        footerTokenAmount: accountBorrowInUnits,\n      };\n\n      return payload;\n    }, [\n      accountBorrowInUnits,\n      borrowApy,\n      borrowInputValue,\n      cTokenCashInUsd,\n      currentBorrowLimitUsd,\n      distributionAssetApy,\n      hasAvailableLiquidity,\n      maxPossibleBorrow,\n      messageOrInputComponent,\n      onBorrowClicked,\n      pricePerUnitUsd,\n      totalAccountBorrowBalanceUsd,\n    ]);\n\n    // Payload for repay\n    const marketModalStatePayloadForRepayTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      const isApproveDoneWith = needToApprove ? hasApprovedERC20 : true;\n\n      const isOfferingMoreThanWalletBalance = repayInputValue > walletBalance;\n      const isOfferingMoreThanHasBorrowed =\n        repayInputValue > accountBorrowInUnits;\n\n      // Must have enough wallet balance in this asset + Must approve (if needed)\n      const canRepay =\n        (hasWalletBalance &&\n          !isOfferingMoreThanWalletBalance &&\n          !isOfferingMoreThanHasBorrowed &&\n          !repayIsZero &&\n          isApproveDoneWith) ||\n        isRepayingMax;\n\n      const actionButtonActive = canRepay || needsToButNotYetApproved;\n      const actionButtonCbForRepay = needsToButNotYetApproved\n        ? onEnableClicked\n        : onRepayClicked;\n\n      let reasonForNotBeingAbleToRepay = undefined;\n      if (isOfferingMoreThanWalletBalance) {\n        reasonForNotBeingAbleToRepay = \"Exceeding wallet balance\";\n      } else if (isOfferingMoreThanHasBorrowed) {\n        reasonForNotBeingAbleToRepay = \"Exceeding borrowed amount\";\n      } else if (repayIsZero) {\n        // DEV_NOTE : Will be disabled with the call to action\n        reasonForNotBeingAbleToRepay = \"Repay\";\n      }\n\n      const actionButtonTextForRepay = canRepay\n        ? \"Repay\"\n        : needToApprove\n        ? \"Approve\"\n        : \"\";\n\n      const actionButtonDisabledText = reasonForNotBeingAbleToRepay;\n\n      // Calculate borrow limit (USD and % used) after requested withdraw\n      const {\n        collateralValueOfActionEffect,\n        borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange,\n      } = useCalculateChangeInBorrowLimitsForBorrow(\n        currentBorrowLimitUsd,\n        totalAccountBorrowBalanceUsd,\n        repayInputValue,\n        pricePerUnitUsd\n      );\n\n      const showPredictedBorrowLimits = collateralValueOfActionEffect !== 0;\n\n      console.log({ canRepayMax });\n      const inputActionButtonText = isRepayingMax ? \"Cancel\" : \"Max\";\n      const showInputActionButton =\n        (isRepay || false) && !needsToButNotYetApproved && hasBorrowBalance;\n      const inputActionButtonActive = hasEnoughToRepayAll;\n      const onInputActionButtonPressed = onSetRepayToMaxClicked;\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText,\n        showInputActionButton,\n        onInputActionButtonPressed,\n        inputActionButtonActive,\n\n        // Action Rates\n        actionName: \"Supply\",\n        actionApy: 4.56,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        showBorrowLimit: showPredictedBorrowLimits,\n        borrowLimitAfterChange,\n        showPredictedBorrowLimits,\n        usedBorrowLimitPercentageAfterChange,\n\n        // Action button\n        actionButtonActive: !!actionButtonActive,\n        actionButtonText: actionButtonTextForRepay,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForRepay,\n\n        // Footer\n        footerTitle: \"Wallet Balance\",\n        footerTokenAmount: walletBalance,\n      };\n\n      return payload;\n    }, [\n      accountBorrowInUnits,\n      canRepayMax,\n      currentBorrowLimitUsd,\n      distributionAssetApy,\n      hasApprovedERC20,\n      hasBorrowBalance,\n      hasEnoughToRepayAll,\n      hasWalletBalance,\n      isRepay,\n      isRepayingMax,\n      messageOrInputComponent,\n      needToApprove,\n      needsToButNotYetApproved,\n      onEnableClicked,\n      onRepayClicked,\n      onSetRepayToMaxClicked,\n      pricePerUnitUsd,\n      repayInputValue,\n      repayIsZero,\n      totalAccountBorrowBalanceUsd,\n      walletBalance,\n    ]);\n\n    const statePerTabPayload = isBorrow\n      ? marketModalStatePayloadForBorrowTab\n      : marketModalStatePayloadForRepayTab;\n\n    const marketModalStatePayload = useMemo<IMarketModalStatePayload>(() => {\n      const payload: IMarketModalStatePayload = {\n        ...commonPayloadPart,\n        ...statePerTabPayload,\n      };\n\n      return payload;\n    }, [commonPayloadPart, statePerTabPayload]);\n\n    console.log(\n      `BorrowLimitAfterChange : ${marketModalStatePayload.borrowLimitAfterChange}`\n    );\n    return (\n      <MarketInteractionModal\n        open={open}\n        closeModal={clearStateBeforeClose}\n        {...marketModalStatePayload}\n      />\n    );\n  }\n);\n\nfunction sanitizeNumericInput(stringValueOfNumericInput?: string): number {\n  let safeString = stringValueOfNumericInput || \"0\";\n  // DEV_NOTE : Barbaric way\n  while (safeString.length > 1 && safeString.charAt(0) === \"0\") {\n    console.log(`Starts in 0 : ${safeString}`);\n    safeString = safeString.substring(1, safeString.length);\n    console.log(`After trim : ${safeString}`);\n  }\n\n  const parsedAsFloat = +safeString;\n  if (!stringValueOfNumericInput || isNaN(parsedAsFloat)) {\n    return 0;\n  }\n\n  return parsedAsFloat;\n}\n","import React from \"react\";\nimport {\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { TokenIcon } from \"../../icons/TokenIcon\";\nimport { BRAND_MAIN_COLOR, GRAYISH_TEXT } from \"../../../theme/themeConstants\";\nimport { ActionRates } from \"../MarketInteractionModal/base/rates/ActionRates\";\nimport { BorrowLimitRates } from \"../MarketInteractionModal/base/rates/BorrowLimitRates\";\nimport { ModalActionButton } from \"../MarketInteractionModal/base/ModalActionButton\";\nimport { ModalFooter } from \"../MarketInteractionModal/base/ModalFooter\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../txWaitingModal/TxWaitingModal\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n\n  actionAssetName: string;\n  actionAssetSymbol: string;\n\n  currentBorrowLimit: number;\n  usedBorrowLimitPercentage: number;\n  usedBorrowLimitPercentageAfterChange: number;\n  borrowLimitAfterChange: number;\n  showPredictedBorrowLimits: boolean;\n\n  actionName: string;\n  actionButtonActive: boolean;\n  actionButtonText: string;\n  actionButtonOnClick: () => void;\n\n  // TX waiting\n  waitingForUserApproval: boolean;\n  waitingForTxConfirmation: boolean;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  collateralInteractionPanel: {\n    position: \"relative\",\n    width: \"30rem\",\n    maxWidth: \"100%\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {\n    fontWeight: \"bold\",\n  },\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  messageContainer: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    textAlign: \"center\",\n\n    color: GRAYISH_TEXT,\n  },\n\n  tabBody: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    backgroundColor: \"#ffffff\",\n  },\n}));\n\nexport const CollateralModal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    open,\n    closeModal,\n    actionAssetSymbol,\n    actionAssetName,\n\n    showPredictedBorrowLimits,\n    currentBorrowLimit,\n    usedBorrowLimitPercentage,\n    usedBorrowLimitPercentageAfterChange,\n    borrowLimitAfterChange,\n    actionName,\n    actionButtonActive,\n    actionButtonText,\n    actionButtonOnClick,\n\n    waitingForTxConfirmation,\n    waitingForUserApproval,\n  } = props;\n\n  if (waitingForTxConfirmation || waitingForUserApproval) {\n    const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n      ? \"CONFIRMATION\"\n      : \"USER_APPROVAL\";\n\n    return (\n      <TxWaitingModal\n        open={open}\n        closeModal={closeModal}\n        txWaitingStage={txWaitingStage}\n      />\n    );\n  }\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.collateralInteractionPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Quick-n-Dirty Market icon */}\n          <TokenIcon\n            symbol={actionAssetSymbol}\n            extraClasses={[classes.tokenIcon, classes.upperLeftCorner]}\n          />\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h6\"} className={classes.title}>\n              {actionName} as collateral\n            </Typography>\n          </div>\n\n          <div className={classes.messageContainer}>\n            <Typography>\n              Each asset used as collateral increases your borrowing limit.{\" \"}\n              <br />\n              Be careful, this can subject the asset to being seized in\n              liquidation.\n              {/*Learn more.*/}\n            </Typography>\n          </div>\n\n          {/* Tab Body */}\n          <div className={classes.tabBody}>\n            {/* Borrow limit rates */}\n            <BorrowLimitRates\n              borrowLimitUsd={currentBorrowLimit || 0}\n              borrowLimitUsedPercentage={usedBorrowLimitPercentage || 0}\n              predictedBorrowLimitPercentage={\n                usedBorrowLimitPercentageAfterChange || 0\n              }\n              predictedBorrowLimitUsd={borrowLimitAfterChange || 0}\n              displayPredictedValues={showPredictedBorrowLimits}\n            />\n\n            <br />\n            <br />\n\n            {/* Action button */}\n            <ModalActionButton\n              onClick={actionButtonOnClick}\n              text={actionButtonText}\n              disabled={!actionButtonActive}\n            />\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","import React, { ReactNode, useCallback, useMemo, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { CollateralModal } from \"./CollateralModal\";\nimport {\n  useCalculateChangeInBorrowLimits,\n  useMarketInteractionModalBase,\n} from \"../MarketInteractionModal/marketInteractionModalHooks\";\nimport { useCollateralModalState } from \"./collateralModalHooks\";\nimport { ContractTransaction } from \"ethers\";\nimport { JSON_RPC_ERROR_CODES } from \"../../../constants/ethereumErrorCodes\";\nimport { useTxWaitingLogic } from \"../txWaitingModal/txWaitingHooks\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nexport const ConnectedCollateralModal = observer<\n  React.FunctionComponent<IProps>\n>((props) => {\n  const { open, closeModal } = props;\n\n  const {\n    activeLNStore,\n    cToken,\n    accountSupplyInUnits,\n    underlyingName,\n    underlyingSymbol,\n    isCollaterable,\n\n    usedBorrowPercentage,\n    totalAccountBorrowBalanceUsd,\n    currentBorrowLimitUsd,\n    collateralFactorInUnits,\n    pricePerUnitUsd,\n  } = useCollateralModalState();\n\n  const newCollaterableValue = !isCollaterable;\n  // Will the new state add or reduce potential collateral\n  const signMultiplier = newCollaterableValue ? 1 : -1;\n  const effectiveUnits = signMultiplier * accountSupplyInUnits;\n\n  const actionButtonText = newCollaterableValue\n    ? `Use ${underlyingSymbol} as collateral`\n    : `Remove ${underlyingSymbol} as collateral`;\n\n  const actionName = newCollaterableValue ? \"Enable\" : \"Remove\";\n\n  // Calculate the changes to borrow limit (USD and % used)\n  const {\n    collateralValueOfActionEffect,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  } = useCalculateChangeInBorrowLimits(\n    currentBorrowLimitUsd,\n    totalAccountBorrowBalanceUsd,\n    effectiveUnits,\n    pricePerUnitUsd,\n    collateralFactorInUnits\n  );\n\n  // We always want to emphasis the change (even if it is 0)\n  const showPredictedBorrowLimits = true;\n\n  const actionButtonActive = true;\n\n  const txCreatingFunction = useMemo(() => {\n    if (newCollaterableValue) {\n      return () => activeLNStore?.enterMarketByCTokenAddress(cToken);\n    } else {\n      return () => activeLNStore?.exitMarketByCTokenAddress(cToken);\n    }\n  }, [activeLNStore, cToken, newCollaterableValue]);\n\n  const {\n    wrappedTxBuildingFunction,\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n  } = useTxWaitingLogic(txCreatingFunction, closeModal);\n\n  const onActionButtonClicked = useCallback(async () => {\n    await wrappedTxBuildingFunction();\n  }, [wrappedTxBuildingFunction]);\n\n  return (\n    <CollateralModal\n      open={open}\n      closeModal={closeModal}\n      actionName={actionName}\n      actionButtonText={actionButtonText}\n      actionAssetName={underlyingName}\n      actionAssetSymbol={underlyingSymbol}\n      actionButtonActive={actionButtonActive}\n      actionButtonOnClick={onActionButtonClicked}\n      showPredictedBorrowLimits={showPredictedBorrowLimits}\n      borrowLimitAfterChange={borrowLimitAfterChange}\n      currentBorrowLimit={currentBorrowLimitUsd}\n      usedBorrowLimitPercentage={usedBorrowPercentage}\n      usedBorrowLimitPercentageAfterChange={\n        usedBorrowLimitPercentageAfterChange\n      }\n      waitingForUserApproval={waitingForUserApproval}\n      waitingForTxConfirmation={waitingForTxConfirmation}\n    />\n  );\n});\n","import {\n  useAccountStore,\n  useLendingNetworksStore,\n  useModalsStore,\n} from \"../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../services/lendingNetworksService/ILendingNetworksService\";\n\nexport function useCollateralModalState() {\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const activeLNStore = lendingNetworksStore.activeLNStore;\n\n  const assetAddressToParamsMap =\n    activeLNStore?.assetBaseAddressToParams ||\n    new Map<string, TAssetInMarketParameters>();\n  const assetBaseAddress = modalsStore.assetBaseAddress;\n\n  const assetParams = assetAddressToParamsMap.get(assetBaseAddress);\n  const isNativeCoin = assetParams?.symbol === accountStore.nativeCoinSymbol;\n\n  const cTokenStore = activeLNStore?.baseAssetsToCTokenStore.get(\n    assetBaseAddress\n  );\n\n  const cToken = cTokenStore?.cTokenAddress || \"\";\n  const underlyingName = cTokenStore?.underlyingName || \"\";\n  const underlyingSymbol = cTokenStore?.underlyingSymbol || \"\";\n  const accountSupplyInUnits = cTokenStore?.accountSupplyInUnits || 0;\n  const isCollaterable = cTokenStore?.isCollaterable || false;\n\n  const pricePerUnitUsd = cTokenStore?.underlyingUsdPrice || 0;\n  const collateralFactorInUnits = cTokenStore?.collateralFactorInUnits || 0;\n  const currentBorrowLimitUsd = activeLNStore?.liquidityUsd || 0;\n  const usedBorrowPercentage = activeLNStore?.usedBorrowPercentage || 0;\n  const totalAccountBorrowBalanceUsd =\n    activeLNStore?.totalAccountBorrowBalanceUsd || 0;\n\n  return {\n    activeLNStore,\n    cToken,\n    underlyingName,\n    underlyingSymbol,\n    accountSupplyInUnits,\n    isCollaterable,\n\n    pricePerUnitUsd,\n    collateralFactorInUnits,\n    currentBorrowLimitUsd,\n    usedBorrowPercentage,\n    totalAccountBorrowBalanceUsd,\n  };\n}\n","import { makeStyles, Tab, Tabs, Typography } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport {\n  useLendingNetworksStore,\n  useModalsStore,\n} from \"../../store/storeHooks\";\nimport { MainLendingNetworkTab } from \"./MarketsTab/MainLendingNetworkTab\";\nimport { SupplyModal } from \"../../components/modals/MarketInteractionModal/SupplyModal\";\nimport { BorrowModal } from \"../../components/modals/MarketInteractionModal/BorrowModal\";\nimport { ConnectedCollateralModal } from \"../../components/modals/collateralModal/ConnectedCollateralModal\";\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n}));\n\ninterface IProps {\n  networkId: string;\n}\n\nexport const LendingNetworkPage = observer<React.FC<IProps>>(\n  ({ networkId }) => {\n    const classes = useStyles();\n    const { path, url } = useRouteMatch();\n    const history = useHistory();\n    const lendingNetworksStore = useLendingNetworksStore();\n    const [error, setError] = React.useState<string | null>(null);\n\n    const lnStore = lendingNetworksStore.activeLNStore;\n    const modalsStore = useModalsStore();\n\n    console.log(`Should modal open : ${modalsStore.isSupplyModalActive}`);\n\n    // Update active LN\n    useEffect(() => {\n      lendingNetworksStore.setActiveLn(networkId);\n    }, [lendingNetworksStore, networkId]);\n\n    // const [\n    //   lendingNetworkStore,\n    //   setLendingNetworkStore,\n    // ] = React.useState<SingleLNStore | null>(null);\n\n    // React.useEffect(() => {\n    //   if (lendingNetworksStore.isLoading) {\n    //     return;\n    //   }\n    //\n    //   const lendingNetworkStore = lendingNetworksStore.getLendingNetworkStore(\n    //     networkId\n    //   );\n    //   if (lendingNetworkStore === null) {\n    //     setError(`A network with id \"${networkId}\" was not found`);\n    //   } else {\n    //     setLendingNetworkStore(lendingNetworkStore);\n    //   }\n    // }, [lendingNetworksStore, lendingNetworksStore.isLoading, networkId]);\n\n    if (lendingNetworksStore.isLoading) {\n      return <Typography>Loading...</Typography>;\n    }\n\n    if (error) {\n      return <Typography>Error: {error}</Typography>;\n    }\n\n    return (\n      // TODO : Change this to use proper page structure\n      <div className={classes.root}>\n        {/* DEV_NOTE : Temp solution for tabs */}\n        {/*<div*/}\n        {/*  style={{*/}\n        {/*    display: \"flex\",*/}\n        {/*    justifyContent: \"center\",*/}\n        {/*  }}*/}\n        {/*>*/}\n        {/*  <Tabs*/}\n        {/*    value={history.location.pathname}*/}\n        {/*    onChange={(e, value) => history.push(value)}*/}\n        {/*  >*/}\n        {/*    <Tab label=\"Markets\" value={`${url}/markets`} />*/}\n        {/*    <Tab label=\"Price Feed\" value={`${url}/price-feed`} />*/}\n        {/*  </Tabs>*/}\n        {/*</div>*/}\n        <Switch>\n          <Route\n            path={`${path}/markets`}\n            exact\n            render={() => <MainLendingNetworkTab />}\n          />\n          <Route\n            path={`${path}/price-feed`}\n            render={() => <div>Price Feed</div>}\n          />\n          <Redirect to={`${path}/markets`} />\n        </Switch>\n\n        {/*  Modals used by this page  */}\n        <SupplyModal\n          open={modalsStore.isSupplyModalActive}\n          closeModal={() => modalsStore.hideSupplyModal()}\n        />\n        <BorrowModal\n          open={modalsStore.isBorrowModalActive}\n          closeModal={() => modalsStore.hideBorrowModal()}\n        />\n        <ConnectedCollateralModal\n          open={modalsStore.isCollateralModalActive}\n          closeModal={() => modalsStore.hideCollateralModal()}\n        />\n      </div>\n    );\n  }\n);\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n} from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { ILendingNetworkGist } from \"../../services/lendingNetworksService/ILendingNetworksService\";\n\ninterface IProps {\n  networkGist: ILendingNetworkGist;\n  onViewNetwork: (networkId: string) => void;\n}\n\nexport const NetworkListItem: React.FC<IProps> = observer((props) => {\n  const { onViewNetwork, networkGist } = props;\n  const { id, name, assets } = networkGist;\n  return (\n    <Card>\n      <CardHeader title={name} />\n      <CardContent>\n        {assets.map((a) => (\n          <div key={a.symbol}>{a.name}</div>\n        ))}\n      </CardContent>\n      <CardActions>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => onViewNetwork(id)}\n        >\n          View Network\n        </Button>\n      </CardActions>\n    </Card>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { ILendingNetworkGist } from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport { NetworkListItem } from \"./NetworkListItem\";\nimport { SingleLNStore } from \"../../store/multiInstanceStores/SingleLNStore\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    display: \"flex\",\n    margin: spacing(4, 8),\n  },\n}));\n\ninterface IProps {\n  lendingNetworksGists: ILendingNetworkGist[];\n  onViewNetwork: (networkId: string) => void;\n}\n\nexport const NetworksList: React.FC<IProps> = observer((props) => {\n  const classes = useStyles();\n  const { lendingNetworksGists, onViewNetwork } = props;\n\n  return (\n    <div className={classes.root}>\n      {lendingNetworksGists.map((network) => (\n        <NetworkListItem\n          onViewNetwork={onViewNetwork}\n          networkGist={network}\n          key={network.id}\n        />\n      ))}\n    </div>\n  );\n});\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router\";\nimport { useLendingNetworksStore } from \"../../store/storeHooks\";\nimport { NetworksList } from \"./NetworksList\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    paddingTop: spacing(10),\n  },\n  title: {\n    paddingBottom: spacing(2),\n  },\n}));\n\nexport const AllNetworksPage: React.FC = observer(() => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { url } = useRouteMatch();\n  const lendingNetworksStore = useLendingNetworksStore();\n  // const { isLoading, lendingNetworks } = useLendingNetworksStore();\n\n  const onViewNetwork = React.useCallback(\n    (networkId: string) => {\n      const targetUrl = `${url}/${networkId}`;\n      history.push(targetUrl);\n    },\n    [history, url]\n  );\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h3\" align=\"center\" className={classes.title}>\n        Ultima Lending Networks\n      </Typography>\n      <Typography variant=\"h5\" align=\"center\">\n        A Leap Forward in Decentralized Peer-to-Pool Lending\n      </Typography>\n      {lendingNetworksStore.isLoading ? (\n        <Typography>Loading...</Typography>\n      ) : (\n        <NetworksList\n          lendingNetworksGists={lendingNetworksStore.allLNGists}\n          onViewNetwork={onViewNetwork}\n        />\n      )}\n    </div>\n  );\n});\n","import { makeStyles, Paper } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { LendingNetworkPage } from \"./LendingNetworkPage/LendingNetworkPage\";\nimport { AllNetworksPage } from \"./AllNetworksPage/AllNetworksPage\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    borderRadius: 16,\n    width: \"80%\",\n    minHeight: 400,\n    maxWidth: 1200,\n    padding: spacing(2),\n    marginTop: spacing(4),\n    marginBottom: spacing(4),\n    margin: \"0 auto\",\n  },\n}));\n\nexport const Main: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    // <Paper elevation={22} className={classes.root}>\n    <Switch>\n      <Route path=\"/networks\" exact component={AllNetworksPage} />\n      <Route\n        path=\"/networks/:network_id\"\n        render={({ match }) => (\n          <LendingNetworkPage networkId={match.params.network_id} />\n        )}\n      />\n      <Redirect to=\"/networks\" />\n    </Switch>\n    // </Paper>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Header } from \"./components/header/Header\";\nimport { Main } from \"./pages/Main\";\nimport { observer } from \"mobx-react\";\nimport { useLendingNetworksStore } from \"./store/storeHooks\";\nimport { TLNContractsAddresses } from \"./services/Services\";\n\n// TODO : Handle tx failing gracefully.\n\nexport const App = observer(() => {\n  // This part is responsible for keeping the LN services aimed at the right LN contracts\n  const lendingNetworksStore = useLendingNetworksStore();\n  const firstLNParamsUnitrollerAddress =\n    lendingNetworksStore.lendingNetworkParameters[0]?.unitrollerAddress || \"\";\n  // const lnContractsAddresses = useMemo(() => {\n  //   console.log(\"Calculatin ln addresses\");\n  //   // console.log(firstLNParamsUnitrollerAddress);\n  //   const addresses: TLNContractsAddresses = {\n  //     unitrollerAddress:\n  //       lendingNetworksStore.lendingNetworkParameters[0]?.unitrollerAddress ||\n  //       \"\",\n  //   };\n  //\n  //   return addresses;\n  // }, [lendingNetworksStore.lendingNetworkParameters]);\n\n  // const addresses: TLNContractsAddresses = {\n  //   unitrollerAddress:\n  //     lendingNetworksStore.lendingNetworkParameters[0]?.unitrollerAddress || \"\",\n  // };\n\n  // useSyncLNServices();\n\n  return (\n    <BrowserRouter>\n      <Header />\n      <Main />\n    </BrowserRouter>\n  );\n});\n","import createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport responsiveFontSizes from \"@material-ui/core/styles/responsiveFontSizes\";\nimport { BRAND_MAIN_COLOR } from \"./themeConstants\";\n\nexport const baseTheme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      primary: {\n        // main: \"#1a237e\",\n        main: BRAND_MAIN_COLOR,\n      },\n      secondary: {\n        main: \"#0091ea\",\n      },\n      text: {\n        primary: \"#141E27\",\n      },\n    },\n  })\n);\n","import Web3 from \"web3\";\nimport { ICryptoWalletConnectionService } from \"./ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"./IEthereumProvider\";\nimport { fromWei } from \"web3-utils\";\n\n// TODO : FUTURE : O.L : Change all ethereum.<call> to the new standard events format.\n//                        Consider using AbstractProvider\nexport class CryptoWalletConnectionService\n  implements ICryptoWalletConnectionService {\n  private readonly web3?: Web3;\n  public readonly hasEthereumProvider: boolean;\n  public readonly hasEventsSupport: boolean;\n  public readonly isMetamaskInstalled: boolean;\n  public readonly isSemiCompliantEthereumProviderInstalled: boolean;\n\n  constructor(private ethereum: IEthereumProvider) {\n    this.hasEthereumProvider = this.ethereum !== undefined;\n\n    // Distinguishes between installed ethereum providers\n    this.isMetamaskInstalled =\n      this.hasEthereumProvider && !!this.ethereum.isMetaMask;\n    this.isSemiCompliantEthereumProviderInstalled =\n      this.hasEthereumProvider && !this.ethereum.isMetaMask;\n\n    if (this.hasEthereumProvider) {\n      this.web3 = new Web3(this.ethereum as any);\n    }\n\n    const onFunction = this.hasEthereumProvider ? this.ethereum.on : undefined;\n    this.hasEventsSupport = onFunction !== undefined && onFunction !== null;\n  }\n\n  public async requestConnectionPermission(): Promise<boolean> {\n    try {\n      await this.ethereum.enable();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Getters\n  public getEthereumProvider() {\n    return this.ethereum;\n  }\n\n  public get didUserApproveDappInThePast(): boolean {\n    // DEV_NOTE : O.L : IMPORTANT ! : This currently works with the soon to be deprecated apis of metamask injected 'ethereum'\n    //                                and is not part of the properties in the official types of web3.\n    //                                We need to check and find a better way to detect if the user has already approved wallet access.\n    // @ts-ignore\n    return this.isMetamaskInstalled && !!this.ethereum.selectedAddress;\n  }\n\n  async getIsMainNetwork(): Promise<boolean> {\n    return this.isMetamaskInstalled && this.ethereum.networkVersion === \"1\";\n  }\n\n  // Data \"reading\"\n  async readChainId(): Promise<number> {\n    const chainId = (await this.web3?.eth.getChainId()) || -1;\n    return chainId;\n  }\n\n  async readEthereumBalance(address: string): Promise<number> {\n    const balance = await this.web3?.eth.getBalance(address);\n    const balanceInDecimal = parseInt(fromWei(balance || \"0\"));\n    return balanceInDecimal;\n  }\n\n  async readMainAddress(): Promise<string> {\n    const accounts = (await this.web3?.eth.getAccounts()) || [];\n    return accounts[0];\n  }\n\n  async readCurrentBlockNumber(): Promise<number> {\n    return this.web3?.eth.getBlockNumber() || 0;\n  }\n\n  // Event listeners\n  onMainAddressChange(onChange: (mainAddress: string) => void): () => void {\n    if (!this.hasEventsSupport) {\n      throw new Error(\n        `Cannot subscribe to events with given Ethereum provider`\n      );\n    }\n\n    const listener = (accounts: string[]) => onChange(accounts[0]);\n\n    this.ethereum.on(\"accountsChanged\", listener);\n\n    return () => {\n      this.ethereum.off(\"accountsChanged\", listener);\n    };\n  }\n\n  onChainIdChange(onChange: (chainId: number) => void): () => void {\n    if (!this.hasEventsSupport) {\n      throw new Error(\n        `Cannot subscribe to events with given Ethereum provider`\n      );\n    }\n\n    const listener = (chainId: string) => {\n      console.log(`Typof chainId : ${typeof chainId}`);\n      onChange(parseInt(chainId));\n    };\n\n    this.ethereum.on(\"chainChanged\", listener);\n\n    return () => {\n      this.ethereum.off(\"chainChanged\", listener);\n    };\n  }\n}\n","export const READ_ONLY_ETHEREUM_ENDPOINT =\n  process.env.REACT_APP_READ_ONLY_ETHEREUM_ENDPOINT;\n\nexport const IS_DEV = process.env.NODE_ENV !== \"production\";\n","export async function fetchLocalJson<T = any>(localPath: string): Promise<T> {\n  const fetchRes = await fetch(`${process.env.PUBLIC_URL}/${localPath}`);\n  const json = (await fetchRes.json()) as T;\n\n  return json;\n}\n","export const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nexport const NATIVE_COIN_ASSET_ADDRESS =\n  \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\";\n","import {\n  ILendingNetworkGist,\n  ILendingNetworkLiveState,\n  ILendingNetworkParameters,\n  ILendingNetworksService,\n  ITokenData,\n  ITokenUnderlyingPrice,\n  IUnderlyingMetadata,\n} from \"./ILendingNetworksService\";\nimport { IS_DEV } from \"../../configs\";\nimport { fetchLocalJson } from \"../networkActions\";\nimport LocalNetworkDevLNAddresses from \"../../solidityInterfaces/localLNaddresses.json\";\n// TODO : CRITICAL almost : Add 'decimals on chain' to make sure that decimals are right for each chain.\nimport LocalNetworkDevTokensAddresses from \"../../solidityInterfaces/localTokensAddresses.json\";\nimport { NATIVE_COIN_ASSET_ADDRESS } from \"../../constants/constantAddresses\";\n\nexport class LendingNetworksService implements ILendingNetworksService {\n  async fetchALlLendingNetworksParameters(): Promise<\n    ILendingNetworkParameters[]\n  > {\n    const lnParams: ILendingNetworkParameters[] = [];\n\n    if (IS_DEV) {\n      const devNetworksgist = await this.fetchDevNetworkGist();\n\n      lnParams.push(...devNetworksgist);\n    } else {\n    }\n\n    return lnParams;\n  }\n\n  async fetchAllLendingNetworksGists(): Promise<ILendingNetworkGist[]> {\n    return [];\n    const allLNsGists: ILendingNetworkGist[] = [];\n  }\n\n  async fetchLendingNetworkLiveState(\n    networkId: string\n  ): Promise<ILendingNetworkLiveState> {\n    return {\n      participatingSuppliers: 0,\n      tvl: 0,\n    };\n  }\n\n  private async fetchDevNetworkGist() {\n    const devNetworksgist = await fetchLocalJson<ILendingNetworkGist[]>(\n      \"lnParameters/devLnParams.json\"\n    );\n\n    // DEV_NOTE : We have one, and we want to at least semi-dynamically get the addresses\n    devNetworksgist[0].id = LocalNetworkDevLNAddresses.unitroller;\n    devNetworksgist[0].unitrollerAddress =\n      LocalNetworkDevLNAddresses.unitroller;\n\n    for (let assetInMarket of devNetworksgist[0].assets) {\n      const { symbol } = assetInMarket;\n      // @ts-ignore\n      const assetAddress = LocalNetworkDevTokensAddresses[symbol];\n      const assetAddressToUse =\n        symbol === \"FUSE\" ? NATIVE_COIN_ASSET_ADDRESS : assetAddress;\n\n      if (!assetAddressToUse) {\n        // This quick-fail will save some time debugging\n        throw new Error(`No addres for asset ${symbol}`);\n      } else {\n        assetInMarket.address = assetAddressToUse;\n      }\n    }\n\n    return devNetworksgist;\n  }\n}\n","/**\n * This functions takes a tuple returned from an 'ethers' contract object and returns it in a pure object form.\n */\nexport function etheresStructResponseToObject<T extends object>(\n  ethersStructResponse: any\n): T {\n  const obj = {};\n\n  for (let key in ethersStructResponse) {\n    // DEV_NOTE : We assume that all numeric keys belongs to the array and ignore them\n    if (Number.isNaN(parseInt(key))) {\n      // @ts-ignore\n      obj[key] = ethersStructResponse[key];\n    }\n  }\n\n  return obj as T;\n}\n","import { Contract } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport UniswapAnchoredViewJson from \"../../../solidityInterfaces/UniswapAnchoredView.json\";\nimport {\n  IUniswapAnchoredViewService,\n  TTokenConfig,\n} from \"./IUniswapAnchoredViewService\";\nimport { UniswapAnchoredView } from \"../../../solidityInterfaces/UniswapAnchoredView\";\nimport { etheresStructResponseToObject } from \"../contractsIntegrationUtils\";\n\nexport class UniswapAnchoredViewService implements IUniswapAnchoredViewService {\n  private uniswapAnchoredViewContract: UniswapAnchoredView;\n\n  constructor(\n    uniswapAnchoredViewAddress: string,\n    signerOrProvider?: Signer | Provider\n  ) {\n    this.uniswapAnchoredViewContract = new Contract(\n      uniswapAnchoredViewAddress,\n      UniswapAnchoredViewJson.abi,\n      signerOrProvider\n    ) as UniswapAnchoredView;\n  }\n\n  /**\n   * @ DEV_NOTE : Basic example for contract reading function.\n   */\n  async getTokenConfigBySymbol(tokenSymbol: string): Promise<TTokenConfig> {\n    return etheresStructResponseToObject(\n      await this.uniswapAnchoredViewContract.getTokenConfigBySymbol(tokenSymbol)\n    );\n  }\n}\n","import { IEthereumProvider } from \"../services/cryptoWalletConnectionService/IEthereumProvider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { ethers } from \"ethers\";\nimport { READ_ONLY_ETHEREUM_ENDPOINT } from \"../configs\";\n\nexport function getSignerOrProvider(\n  ethereumProvider?: IEthereumProvider\n): Signer | Provider {\n  let signerOrProvider;\n\n  // DEV_NOTE: This should allow us to continue reading\n  if (ethereumProvider) {\n    // @ts-ignore\n    signerOrProvider = new ethers.providers.Web3Provider(ethereumProvider);\n  } else {\n    signerOrProvider = new ethers.providers.JsonRpcProvider(\n      // TODO: Change this to network specific values (mainnet, kovan etc...)\n      READ_ONLY_ETHEREUM_ENDPOINT\n    );\n  }\n\n  const signer = signerOrProvider.getSigner();\n  if (signer) {\n    signer\n      .getAddress()\n      .then((address) => console.log(`Signer is ${address}`))\n      .catch((e) => console.log(`Signer exists but we cannot get address`));\n    signerOrProvider = signer;\n  } else {\n    console.log(`Provider only`);\n  }\n\n  return signerOrProvider;\n}\n","import { BigNumber, Contract } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport TokensLensJson from \"../../../solidityInterfaces/TokensLens.json\";\nimport { ITokensLensService, TErc20Meta } from \"./ITokensLensService\";\nimport { UniswapAnchoredView } from \"../../../solidityInterfaces/UniswapAnchoredView\";\nimport { etheresStructResponseToObject } from \"../contractsIntegrationUtils\";\nimport { TokensLens } from \"../../../solidityInterfaces/TokensLens\";\n\nexport class TokensLensService implements ITokensLensService {\n  private tokensLensContract: TokensLens;\n\n  constructor(tokensLensAddress: string, signerOrProvider?: Signer | Provider) {\n    this.tokensLensContract = new Contract(\n      tokensLensAddress,\n      TokensLensJson.abi,\n      signerOrProvider\n    ) as TokensLens;\n  }\n\n  async erc20MetadataAll(tokenAddresses: string[]): Promise<TErc20Meta[]> {\n    const rawRes = await this.tokensLensContract.erc20MetadataAll(\n      tokenAddresses\n    );\n    // const metaArray = rawRes.map()\n    return rawRes;\n  }\n\n  async erc20MetadataAndBalanceAll(\n    tokenAddresses: string[],\n    ownerAddress: string\n  ): Promise<[TErc20Meta[], BigNumber[]]> {\n    const rawRes = await this.tokensLensContract.erc20MetadataAndBalanceAll(\n      tokenAddresses,\n      ownerAddress\n    );\n\n    const rawMetas = rawRes[0];\n    const rawBalances = rawRes[1];\n\n    return [rawMetas, rawBalances];\n  }\n\n  public async erc20AllowanceWithDecimals(\n    owner: string,\n    spender: string,\n    tokenAddress: string\n  ): Promise<[BigNumber, number]> {\n    const [\n      allowance,\n      decimalsBN,\n    ] = await this.tokensLensContract.erc20TokenAllowanceWithDecimals(\n      tokenAddress,\n      owner,\n      spender\n    );\n\n    // Decimals are uint8;\n    return [allowance, decimalsBN.toNumber()];\n  }\n\n  erc20Allowance(\n    owner: string,\n    spender: string,\n    tokenAddress: string\n  ): Promise<BigNumber> {\n    return this.tokensLensContract.erc20TokenAllowance(\n      tokenAddress,\n      owner,\n      spender\n    );\n  }\n\n  erc20AllowanceAll(\n    owner: string,\n    spender: string,\n    tokenAddresses: string[]\n  ): Promise<BigNumber[]> {\n    return this.tokensLensContract.erc20AllowancesAll(\n      tokenAddresses,\n      owner,\n      spender\n    );\n  }\n\n  erc20AllowancesMultiple(\n    owner: string,\n    spenders: string[],\n    tokenAddresses: string[]\n  ): Promise<BigNumber[]> {\n    return this.tokensLensContract.erc20AllowancesMultiple(\n      tokenAddresses,\n      owner,\n      spenders\n    );\n  }\n}\n","import { BigNumber, Contract } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport CompoundLensJson from \"../../../solidityInterfaces/CompoundLens.json\";\nimport { CompoundLens } from \"../../../solidityInterfaces/CompoundLens\";\nimport {\n  ICompoundLensService,\n  TAccountLimits,\n  TCTokenBalances,\n  TCTokenMetadata,\n  TCTokenUnderlyingPrice,\n} from \"./ICompoundLensService\";\nimport { parseEther } from \"ethers/lib/utils\";\nimport { etheresStructResponseToObject } from \"../contractsIntegrationUtils\";\n\nexport class CompoundLensService implements ICompoundLensService {\n  private compoundLensContract: CompoundLens;\n\n  constructor(\n    compoundLensAddress: string,\n    signerOrProvider: Signer | Provider\n  ) {\n    this.compoundLensContract = new Contract(\n      compoundLensAddress,\n      CompoundLensJson.abi,\n      signerOrProvider\n    ) as CompoundLens;\n  }\n\n  async cTokenMetadata(cTokenAddress: string): Promise<TCTokenMetadata> {\n    return etheresStructResponseToObject(\n      await this.compoundLensContract.callStatic.cTokenMetadata(cTokenAddress)\n    );\n  }\n\n  async cTokenMetadataAll(\n    cTokenAddresses: string[]\n  ): Promise<TCTokenMetadata[]> {\n    const rawMetas = await this.compoundLensContract.callStatic.cTokenMetadataAll(\n      cTokenAddresses\n    );\n\n    return rawMetas.map((rawMeta) => etheresStructResponseToObject(rawMeta));\n  }\n\n  async cTokenBalancesAll(\n    cTokenAddresses: string[],\n    account: string\n  ): Promise<TCTokenBalances[]> {\n    const rawMetas = await this.compoundLensContract.callStatic.cTokenBalancesAll(\n      cTokenAddresses,\n      account\n    );\n\n    return rawMetas.map((rawMeta) => etheresStructResponseToObject(rawMeta));\n  }\n\n  async cTokenUnderlyingPriceAll(\n    cTokenAddresses: string[]\n  ): Promise<TCTokenUnderlyingPrice[]> {\n    const rawMetas = await this.compoundLensContract.callStatic.cTokenUnderlyingPriceAll(\n      cTokenAddresses\n    );\n\n    return rawMetas.map((rawMeta) => etheresStructResponseToObject(rawMeta));\n  }\n\n  async getAccountLimits(\n    comptrollerAddress: string,\n    account: string\n  ): Promise<TAccountLimits> {\n    const rawAccountLimits = await this.compoundLensContract.getAccountLimits(\n      comptrollerAddress,\n      account\n    );\n    const [marketsIn, liquidity, shortfall] = rawAccountLimits;\n\n    return {\n      marketsIn,\n      liquidity,\n      shortfall,\n    };\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport ComptrollerJson from \"../../../solidityInterfaces/Comptroller.json\";\nimport { IComptrollerService } from \"./IComptrollerService\";\nimport { Comptroller } from \"../../../solidityInterfaces/Comptroller\";\nimport { toJS } from \"mobx\";\n\nexport class ComptrollerService implements IComptrollerService {\n  // We will use the unitroller address but with the 'comptroller' interface (As it is only a proxy)\n  private unitrollerProxyContract: Comptroller;\n\n  constructor(unitrollerAddress: string, signerOrProvider: Signer | Provider) {\n    console.log(\"Before init uni\");\n\n    this.unitrollerProxyContract = new Contract(\n      unitrollerAddress,\n      ComptrollerJson.abi,\n      signerOrProvider\n    ) as Comptroller;\n\n    console.log(\"Initialized unitroller\");\n  }\n\n  public getComptrollerProxyAddress(): string {\n    return this.unitrollerProxyContract.address;\n  }\n\n  // TODO : This is not called for now, check if it is needed and then check if it works\n  public updateUnitrollerAddress(unitrollerAddress: string): void {\n    const after = this.unitrollerProxyContract.attach(unitrollerAddress);\n    console.log(`Param is ${unitrollerAddress}`);\n    console.log(`Result address is ${toJS(after.address)}`);\n    console.log(\n      `Property address is ${toJS(this.unitrollerProxyContract.address)}`\n    );\n  }\n\n  /**\n   * @ DEV_NOTE : All of the CTokens of this comptroller\n   */\n  async getAllMarkets(): Promise<string[]> {\n    const markets = await this.unitrollerProxyContract.getAllMarkets();\n    return markets;\n  }\n\n  async enterMarkets(cTokens: string[]): Promise<ContractTransaction> {\n    return this.unitrollerProxyContract.enterMarkets(cTokens);\n    // const res = await this.unitrollerProxyContract.callStatic.enterMarkets(\n    //   cTokens\n    // );\n    //\n    // console.log(`enter markets : ${res}`);\n    //\n    // return (null as any) as ContractTransaction;\n  }\n  async exitMarket(cToken: string): Promise<ContractTransaction> {\n    return this.unitrollerProxyContract.exitMarket(cToken);\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport ERC20Json from \"../../../solidityInterfaces/ERC20.json\";\nimport { ERC20 } from \"../../../solidityInterfaces/ERC20\";\nimport { IErc20Service } from \"./IErc20Service\";\n\nexport class Erc20Service implements IErc20Service {\n  private erc20Contract: ERC20;\n\n  constructor(erc20Address: string, signerOrProvider: Signer | Provider) {\n    this.erc20Contract = new Contract(\n      erc20Address,\n      ERC20Json.abi,\n      signerOrProvider\n    ) as ERC20;\n  }\n\n  public async readBalance(address: string): Promise<BigNumber> {\n    return this.erc20Contract.balanceOf(address);\n  }\n\n  public async readAllowance(\n    ownerAddress: string,\n    spenderAddress: string\n  ): Promise<BigNumber> {\n    return this.erc20Contract.allowance(ownerAddress, spenderAddress);\n  }\n\n  public async approve(\n    spenderAddress: string,\n    amount: BigNumber\n  ): Promise<ContractTransaction> {\n    return this.erc20Contract.approve(spenderAddress, amount);\n  }\n}\n","import { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { IErc20BuilderService } from \"./IErc20BuilderService\";\nimport { IErc20Service } from \"./IErc20Service\";\nimport { Erc20Service } from \"./Erc20Service\";\n\nexport class Erc20BuilderService implements IErc20BuilderService {\n  constructor(private signerOrProvider: Signer | Provider) {}\n\n  buildErc20Service(erc20Address: string): IErc20Service {\n    return new Erc20Service(erc20Address, this.signerOrProvider);\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport CErc20Json from \"../../../solidityInterfaces/CErc20.json\";\nimport { ICErc20Service } from \"./ICErc20Service\";\nimport { CErc20 } from \"../../../solidityInterfaces/CErc20\";\n\nexport class CErc20Service implements ICErc20Service {\n  private cErc20Contract: CErc20;\n\n  constructor(erc20Address: string, signerOrProvider: Signer | Provider) {\n    this.cErc20Contract = new Contract(\n      erc20Address,\n      CErc20Json.abi,\n      signerOrProvider\n    ) as CErc20;\n  }\n\n  public async mint(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.mint(amount);\n  }\n\n  public async withdraw(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.redeem(amount);\n  }\n\n  public async borrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.borrow(amount);\n  }\n\n  public async repayBorrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.repayBorrow(amount);\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport CEtherJson from \"../../../solidityInterfaces/CEther.json\";\nimport { ICEtherService } from \"./ICEtherService\";\nimport { CEther } from \"../../../solidityInterfaces/CEther\";\n\nexport class CEtherService implements ICEtherService {\n  private cEther: CEther;\n\n  constructor(erc20Address: string, signerOrProvider: Signer | Provider) {\n    this.cEther = new Contract(\n      erc20Address,\n      CEtherJson.abi,\n      signerOrProvider\n    ) as CEther;\n  }\n\n  public async mint(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.mint({ value: amount });\n  }\n\n  public async withdraw(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.redeem(amount);\n  }\n\n  public async borrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.borrow(amount);\n  }\n\n  public async repayBorrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.repayBorrow({ value: amount });\n  }\n}\n","import { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { ICTokensBuilderService } from \"./ICTokensBuilderService\";\nimport { ICErc20Service } from \"./ICErc20Service\";\nimport { CErc20Service } from \"./CErc20Service\";\nimport { CEtherService } from \"./CEtherService\";\n\nexport class CTokensBuilderService implements ICTokensBuilderService {\n  constructor(private signerOrProvider: Signer | Provider) {}\n\n  buildCErc20Service(cErc20Address: string): ICErc20Service {\n    return new CErc20Service(cErc20Address, this.signerOrProvider);\n  }\n\n  buildCEtherService(cEther: string): CEtherService {\n    return new CEtherService(cEther, this.signerOrProvider);\n  }\n}\n","import localTokensAddressesJson from \"../solidityInterfaces/localTokensAddresses.json\";\n\nexport const SUPPORTED_TOKENS_PER_CHAIN = {\n  // Local Hardhat\n  1337: { ...localTokensAddressesJson },\n  31337: { ...localTokensAddressesJson },\n  // Ethereum mainnet\n  1: {},\n\n  // Fuse mainnet\n  122: null,\n};\n\n// Quick-n-Dirty to get Token names\nexport const SYMBOLS_TO_NAMES = {\n  DAI: \"DAI\",\n  USDC: \"USD Coin\",\n  FUSE: \"Fuse\",\n  BTC: \"Bitcoin\",\n  ETH: \"Ether\",\n  WETH: \"Wrapped Ether\",\n  WBTC: \"Wrapped Bitcoin\",\n  USDT: \"Tether\",\n};\n\nexport const NATIVE_COIN_SYMBOL_PER_CHAIN = {\n  1337: \"FUSE\",\n  31337: \"FUSE\",\n  1: \"ETH\",\n};\n\n// TODO : SEMI-CRITICAL : Have the right value for each chain.\nconst DAYS_IN_YEAR = 365;\nconst MAINNET_ETHERUM_BLOCKS_PER_YEAR = 2102400;\n\nconst ROPSTEN_BLOCKS_PER_MINUTE = 5;\nconst ROPSTEN_BLOCK_PER_DAY = ROPSTEN_BLOCKS_PER_MINUTE * 60 * 24;\nconst ROPSTEN_BLOCK_PER_YEAR = ROPSTEN_BLOCK_PER_DAY * DAYS_IN_YEAR;\n\nconst FUSE_BLOCKS_PER_MINUTE = 5;\nconst FUSE_BLOCK_PER_DAY = FUSE_BLOCKS_PER_MINUTE * 60 * 24;\nconst FUSE_BLOCK_PER_YEAR = FUSE_BLOCK_PER_DAY * DAYS_IN_YEAR;\n\nexport const DAILY_BLOCK_PER_CHAIN = {\n  // None\n  \"-1\": 0,\n\n  // Local Hardhat\n  1337: FUSE_BLOCK_PER_YEAR,\n  31337: FUSE_BLOCK_PER_YEAR,\n  // Ethereum mainnet\n  1: MAINNET_ETHERUM_BLOCKS_PER_YEAR,\n\n  // Ropsten\n  3: ROPSTEN_BLOCK_PER_YEAR,\n\n  // Rinkby\n  // 4: null,\n\n  // Fuse Mainnet\n  122: FUSE_BLOCK_PER_YEAR,\n\n  // BSC\n  // 97: null,\n};\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  makeObservable,\n  observable,\n  reaction,\n} from \"mobx\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"../services/cryptoWalletConnectionService/IEthereumProvider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getSignerOrProvider } from \"../ethereumConnection/ethereumConnection\";\nimport { DAILY_BLOCK_PER_CHAIN } from \"../constants/supportedTokensPerChain\";\n\nexport class CryptoWalletConnectionStore {\n  @observable private walletConnectionRequestApproved: boolean = false;\n\n  @observable public ethereumProvider: IEthereumProvider;\n  @observable public signerOrProvider: Signer | Provider;\n  @observable public hasEthereumProvider: boolean;\n  @observable public hasEventsSupport: boolean;\n\n  @observable public mainAddress: string = \"\";\n  @observable public chainId: number = -1;\n\n  @computed public get blocksPerYear(): number {\n    // @ts-ignore\n    const blocksPerYear = DAILY_BLOCK_PER_CHAIN[this.chainId];\n\n    if (blocksPerYear === undefined) {\n      return 0;\n    }\n\n    return blocksPerYear;\n  }\n\n  private addressCheckingInterval?: NodeJS.Timeout = undefined;\n  reactionToWalletConnection: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletConnectionService: ICryptoWalletConnectionService\n  ) {\n    makeObservable(this);\n\n    this.ethereumProvider = this.cryptoWalletConnectionService.getEthereumProvider();\n    this.signerOrProvider = getSignerOrProvider(this.ethereumProvider);\n    this.hasEthereumProvider =\n      cryptoWalletConnectionService.hasEthereumProvider;\n    this.hasEventsSupport = cryptoWalletConnectionService.hasEventsSupport;\n\n    this.reactionToWalletConnection = reaction(\n      () => this.isConnectedToWallet,\n      async (isConnected) => {\n        if (isConnected) {\n          this.readInformationFromConnectedWallet();\n        }\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n\n    if (this.hasEthereumProvider) {\n      // We will only detect address change if the Ethereum provider can support it\n      if (this.cryptoWalletConnectionService.hasEventsSupport) {\n        console.log(\"Provider has events support\");\n        this.cryptoWalletConnectionService.onMainAddressChange((address) => {\n          console.log(`DETECTED ADDDRESS CHANGE ${address}`);\n          this.setMainAddress(address);\n        });\n\n        this.cryptoWalletConnectionService.onChainIdChange((chainId) => {\n          console.log(`CHAIN-ID CHANGE ${chainId}`);\n          this.setChainId(chainId);\n        });\n      } else {\n        console.log(\"Provider does not have events support\");\n\n        // Else, we will read it one time + set an interval\n        this.addressCheckingInterval = setInterval(\n          () => this.refreshState(),\n          1000\n        );\n      }\n    }\n  }\n\n  @computed\n  public get isConnectedToWallet(): boolean {\n    return (\n      this.hasEthereumProvider &&\n      (this.cryptoWalletConnectionService.didUserApproveDappInThePast ||\n        this.walletConnectionRequestApproved)\n    );\n  }\n\n  public async refreshState() {\n    console.log(\"REFRESH-STATE\");\n    await this.readInformationFromConnectedWallet();\n  }\n\n  public async askToConnect(): Promise<boolean> {\n    if (this.isConnectedToWallet) {\n      return true;\n    } else {\n      const permissionGranted = await this.cryptoWalletConnectionService.requestConnectionPermission();\n      this.setWalletConnectionRequestApproved(permissionGranted);\n\n      return this.walletConnectionRequestApproved;\n    }\n  }\n\n  private async readInformationFromConnectedWallet() {\n    // Chain Id\n    const chainId = await this.cryptoWalletConnectionService.readChainId();\n    this.setChainId(chainId);\n\n    // Wallet address\n    const walletAddress = await this.cryptoWalletConnectionService.readMainAddress();\n    this.setMainAddress(walletAddress);\n  }\n\n  @action(\"setWalletConnectionRequestApproved\")\n  private setWalletConnectionRequestApproved(requestApproved: boolean) {\n    this.walletConnectionRequestApproved = requestApproved;\n  }\n\n  @action(\"setMainAddress\")\n  private setMainAddress(mainAddress: string) {\n    this.mainAddress = mainAddress;\n  }\n\n  @action(\"setChainId\")\n  private setChainId(chainId: number) {\n    this.chainId = chainId;\n  }\n}\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  observable,\n  ObservableMap,\n  reaction,\n} from \"mobx\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { PromiEvent, TransactionReceipt } from \"web3-core\";\nimport { JSON_RPC_ERROR_CODES } from \"../constants/ethereumErrorCodes\";\nimport {\n  NATIVE_COIN_SYMBOL_PER_CHAIN,\n  SUPPORTED_TOKENS_PER_CHAIN,\n  SYMBOLS_TO_NAMES,\n} from \"../constants/supportedTokensPerChain\";\nimport {\n  ITokensLensService,\n  TErc20Meta,\n} from \"../services/contractsIntegration/TokensLensService/ITokensLensService\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { ICompoundLensService } from \"../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { IErc20BuilderService } from \"../services/contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { ICTokensBuilderService } from \"../services/contractsIntegration/cTokensService/ICTokensBuilderService\";\n\nexport type TTokenMetaWithBalance = TErc20Meta & {\n  balance: BigNumber;\n  name: string;\n  balanceInUnits: number;\n};\n\nexport type TAssetAmount = {\n  rawAmount: BigNumber;\n  amountInUnits: number;\n};\n\nexport class AccountStore {\n  @observable public contractParametersDoneLoading = false;\n  @observable public contractParametersErrorLoading = false;\n  @observable public doneLoading = false;\n  @observable public errorLoading = false;\n\n  @observable public nativeCoinSymbol = \"ETH\";\n\n  // Symbol -> TokenMetaWithBalance\n  @observable public tokensWithBalances: ObservableMap<\n    string,\n    TTokenMetaWithBalance\n  > = observable(new Map<string, TTokenMetaWithBalance>());\n\n  // Spender -> token-address -> TAssetAmount\n  @observable public allowances: ObservableMap<\n    string,\n    Map<string, TAssetAmount>\n  > = observable(new Map<string, Map<string, TAssetAmount>>());\n\n  // TODO : Move tx's state to a different store\n  @observable\n  public txPending = false;\n  @observable public txHadError = false;\n  @observable public txCanceled = false;\n\n  /**\n   * For better DX\n   */\n  @computed get symbolsToUnits(): Record<string, number> {\n    console.log(\"Computing s2u\");\n    const s2u = Array.from(this.tokensWithBalances.entries()).reduce(\n      (obj, cur) => {\n        const [symbol, metaWithBalances] = cur;\n        obj[symbol] = metaWithBalances.balanceInUnits;\n\n        return obj;\n      },\n      {} as Record<string, number>\n    );\n\n    return s2u;\n  }\n\n  private addressChangeReaction: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private lendingNetworksStore: LendingNetworksStore,\n    private erc20BuilderService: IErc20BuilderService,\n    private cTokensBuilderService: ICTokensBuilderService,\n    private tokensLensService: ITokensLensService,\n    private compoundLensService: ICompoundLensService\n  ) {\n    this.addressChangeReaction = reaction(\n      () => [\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress,\n        this.lendingNetworksStore.activeLNStore as SingleLNStore,\n      ],\n      async ([chainId, address, activeLNStoreId]) => {\n        console.log({ activeLNStoreId });\n        this.setDoneLoading(false);\n        await this.reactToConnectedChainOrAddressChanged(\n          // DEV_NOTE : We add 'as' because TS thinks mixes the string and number in the array\n          chainId as number,\n          address as string,\n          (activeLNStoreId as SingleLNStore) || undefined\n        );\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Computed values ****\n\n  // **** Contract interactions ****\n  private async handlePromievent(\n    promievent: PromiEvent<TransactionReceipt>,\n    name = \"A promievent\"\n  ): Promise<TransactionReceipt | undefined> {\n    this.resetTxIndicators();\n\n    // Indicate tx is pending\n    this.setTxPending(true);\n    console.log(`Waiting for promievent of ${name}`);\n\n    try {\n      const res = await promievent;\n      console.log(`Got Results for promievent of ${name}`);\n      return res;\n    } catch (e) {\n      if (\n        (e as any).code === JSON_RPC_ERROR_CODES.provider.userRejectedRequest\n      ) {\n        this.setTxCanceled(true);\n      } else {\n        throw e;\n      }\n    } finally {\n      this.setTxPending(false);\n    }\n  }\n\n  public async approveErc20Usage(\n    erc20Address: string,\n    spender: string,\n    amount: BigNumber\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(\n      `Approving ${amount.toString()} for ${spender} on ${erc20Address}`\n    );\n    const contractInteraction = await this.erc20BuilderService\n      .buildErc20Service(erc20Address)\n      .approve(spender, amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async supplyToMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Supplying ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(cTokenAddress)\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.mint(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async withdrawFromMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Withdrawing ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(cTokenAddress)\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.withdraw(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async borrowFromMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Borrowing ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(cTokenAddress)\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.borrow(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async repayToMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Repaying ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(cTokenAddress)\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.repayBorrow(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  // **** Current address changed ****\n\n  private async reactToConnectedChainOrAddressChanged(\n    chainId: number,\n    currentAddress: string,\n    activeLnStore?: SingleLNStore\n  ) {\n    console.log(`Chain ID ${chainId}`);\n    // @ts-ignore\n    console.log(`Native coin ${NATIVE_COIN_SYMBOL_PER_CHAIN[chainId]}`);\n\n    // @ts-ignore\n    this.setNativeCoinSymbol(NATIVE_COIN_SYMBOL_PER_CHAIN[chainId] || \"ETH\");\n\n    if (currentAddress) {\n      if (this.cryptoWalletIntegrationStore.hasEventsSupport) {\n        this.refreshAccountListeners(currentAddress);\n      }\n\n      try {\n        await this.refreshDataForAccount(\n          chainId,\n          currentAddress,\n          this.nativeCoinSymbol,\n          activeLnStore\n        );\n\n        // if\n      } catch (e) {\n        this.failLoadingProcess(e);\n        console.error(\n          \"Error in reacting to address change in Orbs Account Store\",\n          e\n        );\n      }\n    }\n  }\n\n  // **** Data reading and setting ****\n\n  /**\n   * DEV_NOTE : Move this to a dedicated 'tx's store that will handle tx and state refreshment.\n   */\n  public async manuallyUpdateAllStores() {\n    if (this.lendingNetworksStore.activeLNStore) {\n      this.lendingNetworksStore.activeLNStore.refreshFromOutside();\n    }\n    await this.manuallyReadAccountData();\n  }\n\n  public async manuallyReadAccountData() {\n    try {\n      await this.refreshDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress,\n        this.nativeCoinSymbol,\n        this.lendingNetworksStore.activeLNStore\n      );\n    } catch (e) {\n      this.failLoadingProcess(e);\n      console.error(\n        \"Error in manually reading address data in Account Store\",\n        e\n      );\n    }\n  }\n\n  private async refreshDataForAccount(\n    chainId: number,\n    accountAddress: string,\n    nativeCoinSymbol: string,\n    activeLnStore?: SingleLNStore\n  ) {\n    console.log(\n      `reading data for ${accountAddress} on ${chainId} for ln ${activeLnStore?.id}`\n    );\n    // Clear old data\n    this.clearAllAccountData();\n  }\n\n  private clearAllAccountData() {\n    this.clearTokenBalancesMap();\n  }\n\n  // **** Read and Set ****\n\n  // ****  Subscriptions ****\n\n  private async refreshAccountListeners(accountAddress: string) {\n    this.cancelAllCurrentSubscriptions();\n  }\n\n  private cancelAllCurrentSubscriptions() {}\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private resetTxIndicators() {\n    this.setTxPending(false);\n    this.setTxHadError(false);\n    this.setTxCanceled(false);\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setTxPending\")\n  private setTxPending(txPending: boolean) {\n    this.txPending = txPending;\n  }\n\n  @action(\"setTxCanceled\")\n  private setTxCanceled(txCanceled: boolean) {\n    this.txCanceled = txCanceled;\n  }\n\n  @action(\"setTxHadError\")\n  private setTxHadError(txHadError: boolean) {\n    this.txHadError = txHadError;\n  }\n\n  @action(\"setNativeCoinSymbol\")\n  private setNativeCoinSymbol(nativeCoinSymbol: string) {\n    console.log(`Native coin symbol ${nativeCoinSymbol}`);\n    this.nativeCoinSymbol = nativeCoinSymbol;\n  }\n\n  @action(\"clearTokenBalancesMap\")\n  private clearTokenBalancesMap() {\n    this.tokensWithBalances.clear();\n  }\n\n  @action(\"replaceTokenBalancesMap\")\n  private replaceTokenBalancesMap(\n    tokensWithBalancesMap: Map<string, TTokenMetaWithBalance>\n  ) {\n    this.tokensWithBalances.replace(tokensWithBalancesMap);\n  }\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\n\nexport type TAssetInMarketParameters = {\n  name: string;\n  symbol: string;\n  address: string;\n  decimals: number;\n  isNativeCoin: boolean;\n};\n\nexport const EMPTY_ASSET_IN_MARKET_PARAMETERS: TAssetInMarketParameters = {\n  address: \"\",\n  symbol: \"\",\n  name: \"\",\n  decimals: 0,\n  isNativeCoin: false,\n};\n\n// \"Parameters\" refers to the unChangeable elements (name, id, tokens, etc..)\n// TODO : Think of a better name\nexport interface ILendingNetworkParameters {\n  id: string;\n  chainId: string;\n  name: string;\n  unitrollerAddress: string;\n  assets: TAssetInMarketParameters[];\n  distributionAssetParameters: TAssetInMarketParameters;\n}\n\nexport interface ILendingNetworkLiveState {\n  tvl: number;\n  participatingSuppliers: number;\n}\n\nexport interface ILendingNetworkGist\n  extends ILendingNetworkParameters,\n    ILendingNetworkLiveState {}\n\nexport interface ITokenData {\n  cToken: string;\n  cTokenName: string;\n  cTokenSymbol: string;\n  cTokenDecimals: string;\n  exchangeRateCurrent: string;\n  supplyRatePerBlock: string;\n  borrowRatePerBlock: string;\n  reserveFactorMantissa: string;\n  totalBorrows: string;\n  totalReserves: string;\n  totalSupply: string;\n  totalCash: string;\n  isListed: boolean;\n  collateralFactorMantissa: string;\n}\n\nexport interface IUnderlyingMetadata {\n  underlyingAssetAddress: string;\n  underlyingDecimals: string;\n  underlyingName: string;\n  underlyingSymbol: string;\n}\n\nexport interface ITokenUnderlyingPrice {\n  cToken: string;\n  underlyingPrice: string;\n}\n\nexport interface ILendingNetworksService {\n  fetchALlLendingNetworksParameters(): Promise<ILendingNetworkParameters[]>;\n  fetchAllLendingNetworksGists(): Promise<ILendingNetworkGist[]>;\n\n  fetchLendingNetworkLiveState(\n    networkId: string\n  ): Promise<ILendingNetworkLiveState>;\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { action, computed, makeObservable, observable } from \"mobx\";\nimport {\n  ITokenData,\n  ITokenUnderlyingPrice,\n  IUnderlyingMetadata,\n  TAssetInMarketParameters,\n} from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport {\n  TCTokenBalances,\n  TCTokenMetadata,\n  TCTokenUnderlyingPrice,\n} from \"../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { ethers } from \"ethers\";\nimport { DAILY_BLOCK_PER_CHAIN } from \"../../constants/supportedTokensPerChain\";\nimport { CryptoWalletConnectionStore } from \"../CryptoWalletConnectionStore\";\n\nexport class SingleCTokenStore {\n  // CToken meta\n  @observable cTokenAddress: string;\n  @observable cTokenName: string;\n  @observable cTokenSymbol: string;\n  @observable cTokenDecimals: BigNumber;\n  @observable exchangeRateCurrent: BigNumber;\n  @observable supplyRatePerBlock: BigNumber;\n  @observable borrowRatePerBlock: BigNumber;\n  @observable private totalBorrows: BigNumber;\n  @observable private totalReserves: BigNumber;\n  @observable private totalSupply: BigNumber;\n  @observable private totalCash: BigNumber;\n  @observable private reserveFactorMantissa: BigNumber;\n  @observable private collateralFactorMantissa: BigNumber;\n  @observable isListed: boolean;\n\n  @observable underlyingAssetAddress: string;\n  @observable underlyingDecimals: number;\n  @observable underlyingName: string;\n  @observable underlyingSymbol: string;\n  // @observable underlyingPrice: BigNumber;\n\n  // CToken balances\n  @observable private balanceOf: BigNumber; // CToken balance for the user\n  @observable private borrowBalanceCurrent: BigNumber; // Underlying borrowed by the user\n  @observable private balanceOfUnderlying: BigNumber; // Balance of underlying for the user in the cToken ( owed to the user, derived from the user's wallet  cToken balance ).\n  @observable private tokenBalance: BigNumber; // Underlying balance for the user in their wallet\n  @observable private tokenAllowance: BigNumber; // Allowance in underlying with cToken as spender\n\n  // CToken underlying price\n  @observable underlyingPrice: BigNumber;\n\n  // Account specific data\n  @observable isCollaterable: boolean;\n\n  @computed get cTokenMeta(): TCTokenMetadata {\n    const cTokenMeta: TCTokenMetadata = {\n      cToken: this.cTokenAddress,\n      cTokenDecimals: this.cTokenDecimals,\n      collateralFactorMantissa: this.collateralFactorMantissa,\n      exchangeRateCurrent: this.exchangeRateCurrent,\n      isListed: this.isListed,\n      reserveFactorMantissa: this.reserveFactorMantissa,\n      totalBorrows: this.totalBorrows,\n      totalReserves: this.totalReserves,\n      totalSupply: this.totalSupply,\n      underlyingAssetAddress: this.underlyingAssetAddress,\n      underlyingDecimals: BigNumber.from(this.underlyingDecimals),\n      borrowRatePerBlock: this.borrowRatePerBlock,\n      supplyRatePerBlock: this.supplyRatePerBlock,\n      totalCash: this.totalCash,\n    };\n\n    return cTokenMeta;\n  }\n\n  constructor(\n    private cryptoWalletConnectionStore: CryptoWalletConnectionStore,\n    assetInMarketParams: TAssetInMarketParameters\n  ) {\n    makeObservable(this);\n    // this.cTokenAddress = tokenData.cToken;\n    // this.cTokenName = tokenData.cTokenName;\n    // this.cTokenSymbol = tokenData.cTokenSymbol;\n    // this.cTokenDecimals = BigNumber.from(tokenData.cTokenDecimals);\n    // this.totalCash = BigNumber.from(tokenData.totalCash);\n    // this.supplyRatePerBlock = BigNumber.from(tokenData.supplyRatePerBlock);\n    // this.borrowRatePerBlock = BigNumber.from(tokenData.borrowRatePerBlock);\n    // this.underlyingAssetAddress = assetInMarketParams.address;\n    // this.underlyingDecimals = assetInMarketParams.underlyingDecimals;\n    // this.underlyingName = underlyingMetadata.underlyingName;\n    // this.underlyingSymbol = underlyingMetadata.underlyingSymbol;\n    // this.underlyingPrice = BigNumber.from(0); // TODO : Figure where to get this from ?\n\n    this.cTokenAddress = \"\";\n    this.cTokenName = \"\";\n    this.cTokenSymbol = \"\";\n    this.cTokenDecimals = BigNumber.from(0);\n    this.exchangeRateCurrent = BigNumber.from(0);\n    this.supplyRatePerBlock = BigNumber.from(0);\n    this.borrowRatePerBlock = BigNumber.from(0);\n    this.totalBorrows = BigNumber.from(0);\n    this.totalReserves = BigNumber.from(0);\n    this.totalSupply = BigNumber.from(0);\n    this.totalCash = BigNumber.from(0);\n    this.reserveFactorMantissa = BigNumber.from(0);\n    this.collateralFactorMantissa = BigNumber.from(0);\n    this.isListed = false;\n\n    this.underlyingAssetAddress = assetInMarketParams.address;\n    this.underlyingDecimals = assetInMarketParams.decimals;\n    this.underlyingName = assetInMarketParams.name;\n    this.underlyingSymbol = assetInMarketParams.symbol;\n\n    // CToken balances\n    this.balanceOf = BigNumber.from(0);\n    this.borrowBalanceCurrent = BigNumber.from(0);\n    this.balanceOfUnderlying = BigNumber.from(0);\n    this.tokenBalance = BigNumber.from(0);\n    this.tokenAllowance = BigNumber.from(0);\n\n    // CToken underlying price\n    this.underlyingPrice = BigNumber.from(0);\n\n    // Account specific data\n    this.isCollaterable = false;\n  }\n\n  // **** State refresh from outside ****\n  public updateWithFreshState(\n    cTokenMeta: TCTokenMetadata,\n    cTokenBalances: TCTokenBalances,\n    cTokenUnderlyingPrice: TCTokenUnderlyingPrice\n  ) {\n    this.batchUpdateFromCTokenMeta(\n      cTokenMeta,\n      cTokenBalances,\n      cTokenUnderlyingPrice\n    );\n  }\n\n  public updateIsInCollaterable(isCollaterable: boolean) {\n    this.setIsCollaterable(isCollaterable);\n  }\n\n  /**\n   * Calculates how much collateral is being generated from this market\n   */\n  @computed public get collateralPotentialInUSD(): number {\n    if (this.isCollaterable && this.accountSupplyInUnits > 0) {\n      console.log(`${this.underlyingSymbol} is collaterable`);\n\n      const fullDepositedValueUsd =\n        this.accountSupplyInUnits * this.underlyingUsdPrice;\n      const collateralPotentialUsd =\n        fullDepositedValueUsd * this.collateralFactorInUnits;\n\n      return collateralPotentialUsd;\n    } else {\n      return 0;\n    }\n  }\n\n  /***\n   * Indicates how many underlying units the CToken currently holds\n   */\n  @computed\n  public get cTokenCashInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.totalCash, this.underlyingDecimals)\n    );\n  }\n\n  /***\n   * Indicates how many USD worth of underlying units the CToken currently holds\n   */\n  @computed\n  public get cTokenCashInUSD(): number {\n    return this.cTokenCashInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get accountUnderlyingBalanceInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.tokenBalance, this.underlyingDecimals)\n    );\n  }\n\n  @computed\n  public get totalSupplyInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.totalSupply, this.underlyingDecimals)\n    );\n  }\n\n  @computed\n  public get accountSupplyInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.balanceOfUnderlying,\n        this.underlyingDecimals\n      )\n    );\n  }\n\n  @computed\n  public get totalBorrowInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.totalBorrows, this.underlyingDecimals)\n    );\n  }\n\n  @computed\n  public get accountBorrowInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.borrowBalanceCurrent,\n        this.underlyingDecimals\n      )\n    );\n  }\n\n  @computed\n  public get underlyingUsdPrice(): number {\n    // DEV_NOTE : This calculation is based on the 'Lens' which returns the price is `36 - asset.decimals'\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.underlyingPrice,\n        36 - this.underlyingDecimals\n      )\n    );\n  }\n\n  @computed\n  public get totalSupplyBalanceUsd(): number {\n    return this.totalSupplyInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get accountSupplyBalanceUsd(): number {\n    return this.accountSupplyInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get totalBorrowBalanceUsd(): number {\n    return this.totalBorrowInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get accountBorrowBalanceUsd(): number {\n    return this.accountBorrowInUnits * this.underlyingUsdPrice;\n  }\n\n  /**\n   * We assume that if no cToken address has been set, it means that the 'batch update' has not finished.\n   */\n  @computed\n  public get hasBeenInitialized(): boolean {\n    return this.cTokenAddress !== \"\";\n  }\n\n  @computed\n  public get collateralFactorInUnits(): number {\n    const mantissaDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.collateralFactorMantissa, mantissaDecimals)\n    );\n  }\n\n  @computed\n  public get supplyRatePerBlockInUnits(): number {\n    const ratePerBlockDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.supplyRatePerBlock, ratePerBlockDecimals)\n    );\n  }\n\n  @computed\n  public get borrowRatePerBlockInUnits(): number {\n    const ratePerBlockDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.borrowRatePerBlock, ratePerBlockDecimals)\n    );\n  }\n\n  /***\n   * Supply APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get supplyApyInUnits(): number {\n    const blockPerYear = this.cryptoWalletConnectionStore.blocksPerYear;\n\n    return this.supplyRatePerBlockInUnits * blockPerYear;\n  }\n\n  /***\n   * Borrow APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get borrowApyInUnits(): number {\n    const blockPerYear = this.cryptoWalletConnectionStore.blocksPerYear;\n\n    return this.borrowRatePerBlockInUnits * blockPerYear;\n  }\n\n  /***\n   * Supply APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get supplyApyInPercentages(): number {\n    return this.supplyApyInUnits * 100;\n  }\n\n  /***\n   * Borrow APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get borrowApyInPercentages(): number {\n    return this.borrowApyInUnits * 100;\n  }\n\n  /**\n   * Expected yearly revenue for supply interest.\n   */\n  @computed\n  public get totalYearlyGainsUsd(): number {\n    console.log(`Supply APY in units ${this.supplyApyInUnits}`);\n    console.log(`Supply APY in units ${this.totalSupplyBalanceUsd}`);\n    return this.accountSupplyInUnits * this.supplyApyInUnits;\n  }\n\n  /**\n   * Expected yearly payment for borrow interest.\n   */\n  @computed\n  public get totalYearlyLossesUsd(): number {\n    return this.accountBorrowBalanceUsd * this.borrowApyInUnits;\n  }\n\n  /**\n   * The expected change in value in a year.\n   */\n  @computed\n  public get totalYearlyChangeUsd(): number {\n    return this.totalYearlyGainsUsd - this.totalYearlyLossesUsd;\n  }\n\n  @computed public get hasAnyAllowance(): boolean {\n    return this.tokenAllowance.gt(0);\n  }\n\n  // **** Complex setters ****\n\n  @action(\"batchUpdateFromCTokenMeta\")\n  private batchUpdateFromCTokenMeta(\n    cTokenMeta: TCTokenMetadata,\n    cTokenBalances: TCTokenBalances,\n    cTokenUnderlyingPrice: TCTokenUnderlyingPrice\n  ) {\n    this.cTokenAddress = cTokenMeta.cToken;\n    this.cTokenDecimals = cTokenMeta.cTokenDecimals;\n    // this.cTokenName = cTokenMeta.;\n    // this.cTokenSymbol = \"\";\n\n    this.exchangeRateCurrent = cTokenMeta.exchangeRateCurrent;\n    this.supplyRatePerBlock = cTokenMeta.supplyRatePerBlock;\n    this.borrowRatePerBlock = cTokenMeta.borrowRatePerBlock;\n    this.totalBorrows = cTokenMeta.totalBorrows;\n    this.totalReserves = cTokenMeta.totalReserves;\n    this.totalSupply = cTokenMeta.totalSupply;\n    this.totalCash = cTokenMeta.totalCash;\n    this.collateralFactorMantissa = cTokenMeta.collateralFactorMantissa;\n    this.isListed = cTokenMeta.isListed;\n\n    // CToken Balances\n    this.balanceOf = cTokenBalances.balanceOf;\n    this.borrowBalanceCurrent = cTokenBalances.borrowBalanceCurrent;\n    this.balanceOfUnderlying = cTokenBalances.balanceOfUnderlying;\n    this.tokenBalance = cTokenBalances.tokenBalance;\n    this.tokenAllowance = cTokenBalances.tokenAllowance;\n\n    // CToken underlying price\n    this.underlyingPrice = cTokenUnderlyingPrice.underlyingPrice;\n\n    console.log(\n      `${this.underlyingSymbol} collateral factor ${this.collateralFactorMantissa}`\n    );\n  }\n\n  // **** Action setters ****\n  @action(\"setIsCollaterable\")\n  private setIsCollaterable(isCollaterable: boolean) {\n    this.isCollaterable = isCollaterable;\n\n    if (this.isCollaterable)\n      console.log(\n        `${this.underlyingSymbol} is collaterable with balance of ${this.totalSupplyBalanceUsd}`\n      );\n  }\n}\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  makeObservable,\n  observable,\n  reaction,\n  toJS,\n} from \"mobx\";\nimport {\n  EMPTY_ASSET_IN_MARKET_PARAMETERS,\n  ILendingNetworkGist,\n  ILendingNetworkLiveState,\n  ILendingNetworksService,\n  TAssetInMarketParameters,\n} from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TokenStore } from \"./TokenStore\";\nimport { TAssetInMarketGist } from \"../../pages/LendingNetworkPage/MarketsTab/markets/types\";\nimport { IObservableArray } from \"mobx/dist/internal\";\nimport {\n  ICompoundLensService,\n  TAccountLimits,\n  TCTokenMetadata,\n} from \"../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { BigNumber, ContractTransaction, ethers } from \"ethers\";\nimport {\n  NATIVE_COIN_ASSET_ADDRESS,\n  ZERO_ADDRESS,\n} from \"../../constants/constantAddresses\";\nimport { CryptoWalletConnectionStore } from \"../CryptoWalletConnectionStore\";\nimport { IComptrollerService } from \"../../services/contractsIntegration/ComptrollerService/IComptrollerService\";\nimport { ComptrollerService } from \"../../services/contractsIntegration/ComptrollerService/ComptrollerService\";\nimport { SingleCTokenStore } from \"./SingleCTokenStore\";\nimport { DAILY_BLOCK_PER_CHAIN } from \"../../constants/supportedTokensPerChain\";\n\nexport class SingleLNStore {\n  @observable doneLoading: boolean = false;\n  @observable errorLoading: boolean = false;\n\n  @observable id: string;\n  @observable name: string;\n  @observable unitrollerAddress: string;\n\n  @observable tvl: number;\n  @observable participatingSuppliers: number;\n\n  // Holds the parameters, used for initialization\n  @observable\n  assetsParams: IObservableArray<TAssetInMarketParameters> = observable([]);\n  @observable\n  assetBaseAddressToParams = observable(\n    new Map<string, TAssetInMarketParameters>()\n  );\n\n  // Holds the parameters with the live data\n  // @observable\n  // assetsGists: IObservableArray<TAssetInMarketGist> = observable([]);\n\n  // All cTokens addresses in comptroller\n  @observable allMarkets: IObservableArray<string> = observable([]);\n\n  @observable cTokensStores: IObservableArray<SingleCTokenStore> = observable(\n    []\n  );\n\n  // **** Reward token distribution *****\n  @observable\n  distributionAssetParams: TAssetInMarketParameters = EMPTY_ASSET_IN_MARKET_PARAMETERS;\n\n  @observable distributionAssetRatePerBlock = 0;\n\n  // **** Account specific data *****\n  @observable public liquidity = observable(BigNumber.from(0));\n  @observable public shortfall = observable(BigNumber.from(0));\n  // TODO : Fix native token wrap base address\n  @observable public marketsUserIsIn: IObservableArray<string> = observable([]);\n\n  @computed get lnGist(): ILendingNetworkGist {\n    const gist: ILendingNetworkGist = {\n      chainId: \"\", // TODO : Fill this chain id\n      distributionAssetParameters: EMPTY_ASSET_IN_MARKET_PARAMETERS,\n      unitrollerAddress: this.unitrollerAddress,\n      participatingSuppliers: this.participatingSuppliers,\n      tvl: this.tvl,\n      name: this.name,\n      assets: this.assetsParams,\n      id: this.id,\n    };\n\n    return gist;\n  }\n\n  // BaseAssetAddress -> CTokenStore\n  @computed get baseAssetsToCTokenStore(): Map<string, SingleCTokenStore> {\n    const map = new Map<string, SingleCTokenStore>();\n    for (let cTokenStore of this.cTokensStores) {\n      map.set(cTokenStore.underlyingAssetAddress, cTokenStore);\n    }\n    return map;\n  }\n\n  @computed\n  public get liquidityUsd(): number {\n    const liquidityDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.liquidity, liquidityDecimals)\n    );\n  }\n\n  @computed\n  public get totalLNSupplyBalanceUsd(): number {\n    let totalSupplyUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalSupplyUsd += cTokenStore.totalSupplyBalanceUsd;\n    }\n\n    return totalSupplyUsd;\n  }\n\n  @computed\n  public get totalAccountSupplyBalanceUsd(): number {\n    let totalAccountSupplyUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalAccountSupplyUsd += cTokenStore.accountSupplyBalanceUsd;\n    }\n\n    return totalAccountSupplyUsd;\n  }\n\n  @computed\n  public get totalLNBorrowBalanceUsd(): number {\n    let totalBorrowUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalBorrowUsd += cTokenStore.totalBorrowBalanceUsd;\n    }\n\n    return totalBorrowUsd;\n  }\n\n  @computed\n  public get totalAccountBorrowBalanceUsd(): number {\n    let totalAccountBorrowUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalAccountBorrowUsd += cTokenStore.accountBorrowBalanceUsd;\n    }\n\n    return totalAccountBorrowUsd;\n  }\n\n  /**\n   * Expected yearly revenue for supply interest from all markets.\n   */\n  @computed\n  public get totalYearlyGains(): number {\n    let totalYearlyGains = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalYearlyGains += cTokenStore.totalYearlyGainsUsd;\n    }\n\n    return totalYearlyGains;\n  }\n\n  /**\n   * Expected yearly payment for borrow interest from all markets.\n   */\n  @computed\n  public get totalYearlyLosses(): number {\n    let totalLossesGains = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalLossesGains += cTokenStore.totalYearlyLossesUsd;\n    }\n\n    return totalLossesGains;\n  }\n\n  /**\n   * The expected USD change in value in a year.\n   */\n  @computed\n  public get totalYearlyChangeUsd(): number {\n    let totalYearlyChanges = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      console.log(\n        `${cTokenStore.underlyingSymbol} change : ${cTokenStore.totalYearlyChangeUsd}`\n      );\n      totalYearlyChanges += cTokenStore.totalYearlyChangeUsd;\n    }\n\n    return totalYearlyChanges;\n  }\n\n  @computed\n  public get netApy(): number {\n    // TODO : CRITICAL : Calculate this.\n    // const netSupplyUsd = this.totalAccountSupplyBalanceUsd;\n    // const netBorrowUsd = this.totalAccountBorrowBalanceUsd;\n\n    // Sum up Yearly profit or loss in each market.\n    // Calculate difference\n    const totalYearlyChange = this.totalYearlyChangeUsd;\n\n    // If positive, divide by total-supply-usd\n    // If negative, divide by total-borrow-usd\n    const divider =\n      totalYearlyChange > 0\n        ? this.totalAccountSupplyBalanceUsd\n        : this.totalAccountBorrowBalanceUsd;\n\n    return totalYearlyChange / divider;\n  }\n\n  @computed\n  public get collateralPotentialInUSD(): number {\n    let potentialCollateral = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      potentialCollateral += cTokenStore.collateralPotentialInUSD;\n    }\n\n    return potentialCollateral;\n  }\n\n  @computed\n  public get usedBorrowPercentage(): number {\n    return this.totalAccountBorrowBalanceUsd / this.collateralPotentialInUSD;\n  }\n\n  @computed\n  public get distributionAssetApy(): number {\n    // TODO : CRITICAL : Get the right value\n    const blockPerYear = DAILY_BLOCK_PER_CHAIN[\"1\"];\n    return this.distributionAssetRatePerBlock * blockPerYear;\n  }\n\n  private addressChangeReaction: IReactionDisposer;\n\n  private comptrollerService: IComptrollerService;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private lendingNetworksService: ILendingNetworksService,\n    private compoundLensService: ICompoundLensService,\n    lendingNetworkGist: ILendingNetworkGist\n  ) {\n    makeObservable(this);\n    this.id = lendingNetworkGist.id;\n    this.name = lendingNetworkGist.name;\n    this.unitrollerAddress = lendingNetworkGist.unitrollerAddress;\n    // Quick-n-Dirty asset params\n    this.assetsParams.replace(lendingNetworkGist.assets);\n    this.assetBaseAddressToParams.replace(\n      new Map(\n        this.assetsParams.map((assetParam) => [assetParam.address, assetParam])\n      )\n    );\n    this.distributionAssetParams =\n      lendingNetworkGist.distributionAssetParameters;\n    this.tvl = lendingNetworkGist.tvl;\n    this.participatingSuppliers = lendingNetworkGist.participatingSuppliers;\n\n    // Move this to an action\n    // this.assetsGists.replace(\n    //   this.assetsParams.map((asset) => this.buildEmptyAssetInMarketGist(asset))\n    // );\n\n    this.comptrollerService = new ComptrollerService(\n      this.unitrollerAddress,\n      this.cryptoWalletIntegrationStore.signerOrProvider\n    );\n\n    // Create cTokens stores\n    this.cTokensStores.replace(\n      this.assetsParams.map(\n        (assetParam) =>\n          new SingleCTokenStore(cryptoWalletIntegrationStore, assetParam)\n      )\n    );\n\n    this.addressChangeReaction = reaction(\n      () => [\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress,\n      ],\n      async ([chainId, address]) => {\n        this.setDoneLoading(false);\n        await this.reactToConnectedChainOrAddressChanged(\n          // DEV_NOTE : We add 'as' because TS thinks mixes the string and number in the array\n          chainId as number,\n          address as string\n        );\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Current address changed ****\n  private async reactToConnectedChainOrAddressChanged(\n    chainId: number,\n    currentAddress: string\n  ) {\n    if (currentAddress) {\n      try {\n        await this.readDataForAccount(chainId, currentAddress);\n      } catch (e) {\n        this.failLoadingProcess(e);\n        console.error(\n          \"Error in reacting to address change in Orbs Account Store\",\n          e\n        );\n      }\n    }\n  }\n\n  // **** Data reading and setting ****\n\n  /**\n   * Quick-n-Dirty\n   */\n  public async refreshFromOutside() {\n    return this.readDataForAccount(\n      this.cryptoWalletIntegrationStore.chainId,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n  }\n\n  private async readDataForAccount(chainId: number, accountAddress: string) {\n    // console.log(\n    //   `SingleLnStore : readDataForAccount : ${chainId} ${accountAddress}`\n    // );\n\n    // console.log(`reading SINGLE LN data for ${accountAddress} on ${chainId}`);\n    // Clear old data\n    // this.clearAllAccountData();\n\n    // Refresh LN state\n    this.refreshLNNetworkState().catch((e) =>\n      console.error(`Failed refreshing LN Network state ${e.toString()}`)\n    );\n\n    // Refresh cTokens - OLD\n    // this.readMarketsAndCTokensData().catch((e) =>\n    //   console.error(`Failed readNSet markets and ctoken ${e.toString()}`)\n    // );\n\n    this.readNSetMarkets().catch((e) =>\n      console.error(`Failed readNSet markets ${e.toString()}`)\n    );\n\n    // Refresh cTokens\n    this.batchReadAndUpdateCTokensStores().catch((e) =>\n      console.error(`Failed readNSet batch CTokens state ${e.toString()}`)\n    );\n\n    // Refresh Account details\n    this.readNSetAccountLimits(\n      accountAddress,\n      this.unitrollerAddress\n    ).catch((e) =>\n      console.error(`Failed readNSet accountLimits ${JSON.stringify(e)}`)\n    );\n  }\n\n  /**\n   * Should be called after constructor\n   */\n  public async initialize() {\n    await this.refreshFromOutside();\n  }\n\n  public async refreshLNNetworkState() {\n    const liveState = await this.lendingNetworksService.fetchLendingNetworkLiveState(\n      this.id\n    );\n\n    this.setLiveState(liveState);\n  }\n\n  // **** Contract interactions ****\n  async enterMarketByBaseAsset(baseAssetAddress: string) {\n    const assetToCTokenStore = this.baseAssetsToCTokenStore;\n\n    if (!assetToCTokenStore.has(baseAssetAddress)) {\n      throw new Error(`No CToken Store for ${baseAssetAddress}`);\n    }\n\n    const cTokenStore = assetToCTokenStore.get(\n      baseAssetAddress\n    ) as SingleCTokenStore;\n    const tx = await this.comptrollerService.enterMarkets([\n      cTokenStore.cTokenAddress,\n    ]);\n    await tx.wait(1);\n\n    await this.readDataForAccount(\n      this.cryptoWalletIntegrationStore.chainId,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n  }\n\n  async exitMarketByBaseAsset(baseAssetAddress: string) {\n    const assetToCTokenStore = this.baseAssetsToCTokenStore;\n\n    if (!assetToCTokenStore.has(baseAssetAddress)) {\n      throw new Error(`No CToken Store for ${baseAssetAddress}`);\n    }\n\n    const cTokenStore = assetToCTokenStore.get(\n      baseAssetAddress\n    ) as SingleCTokenStore;\n    const tx = await this.comptrollerService.exitMarket(\n      cTokenStore.cTokenAddress\n    );\n    await tx.wait(1);\n\n    await this.readDataForAccount(\n      this.cryptoWalletIntegrationStore.chainId,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n  }\n\n  async enterMarketByCTokenAddress(\n    cTokenAddress: string\n  ): Promise<ContractTransaction> {\n    const tx = await this.comptrollerService.enterMarkets([cTokenAddress]);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    tx.wait().then(async () => {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    });\n\n    return tx;\n  }\n\n  async exitMarketByCTokenAddress(\n    cTokenAddress: string\n  ): Promise<ContractTransaction> {\n    const tx = await this.comptrollerService.exitMarket(cTokenAddress);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    tx.wait().then(async () => {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    });\n\n    return tx;\n  }\n\n  // **** Read&Set ****\n\n  private async readNSetAccountLimits(\n    accountAddress: string,\n    comptrollerProxy: string\n  ) {\n    if (\n      accountAddress &&\n      comptrollerProxy &&\n      comptrollerProxy !== ZERO_ADDRESS\n    ) {\n      const accountLimits = await this.compoundLensService.getAccountLimits(\n        comptrollerProxy,\n        accountAddress\n      );\n\n      this.setAccountLimits(accountLimits);\n    } else {\n      console.warn(\"Comptroller proxy address is empty\");\n    }\n  }\n\n  /**\n   * Simply calls 'getAllMarkets'\n   */\n  private async readNSetMarkets() {\n    const markets = await this.comptrollerService.getAllMarkets();\n    this.replaceMarkets(markets);\n  }\n\n  // public async loadCTokenMetadata(): Promise<void> {\n  //   // this.setTokens(null);\n  //   const [\n  //     allCTokenData,\n  //     allUnderlyingMetadata,\n  //     allCTokenUnderlyingPrice,\n  //   ] = await Promise.all([\n  //     this.lendingNetworksService.fetchCTokenMetadataAll(\n  //       this.unitrollerAddress\n  //     ),\n  //     this.lendingNetworksService.fetchUnderlyingMetadataAll(\n  //       this.unitrollerAddress\n  //     ),\n  //     this.lendingNetworksService.cTokenUnderlyingPriceAll(\n  //       this.unitrollerAddress\n  //     ),\n  //   ]);\n  //\n  //   this.setTokens(\n  //     allCTokenData.map(\n  //       (cTokenData, idx) =>\n  //         new TokenStore(\n  //           cTokenData,\n  //           allUnderlyingMetadata[idx],\n  //           allCTokenUnderlyingPrice[idx]\n  //         )\n  //     )\n  //   );\n  // }\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private async batchReadAndUpdateCTokensStores() {\n    // const [first, ...cTokenMarkets] = this.allMarkets;\n    const cTokenMarkets = this.allMarkets;\n    if (!cTokenMarkets) {\n      console.log(`No markets for cToken batch read and update`);\n    }\n\n    // console.log(`All cToken-markets ${this.allMarkets}`);\n    const cTokenMetas = await this.compoundLensService.cTokenMetadataAll(\n      cTokenMarkets\n    );\n    // console.log(`Got metas : ${JSON.stringify(cTokenMetas.length)}`);\n    // console.log(\n    //   `cTokenBalances for ${this.cryptoWalletIntegrationStore.mainAddress}`\n    // );\n    const cTokenBalancesAll = await this.compoundLensService.cTokenBalancesAll(\n      cTokenMarkets,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n\n    // console.log(`Got balances : ${JSON.stringify(cTokenBalancesAll, null, 2)}`);\n    const cTokenUnderlyingPricesAll = await this.compoundLensService.cTokenUnderlyingPriceAll(\n      cTokenMarkets\n    );\n    // console.log(`Got prices: ${JSON.stringify(cTokenUnderlyingPricesAll)} `);\n\n    for (let i = 0; i < cTokenMetas.length; i++) {\n      const cTokenMeta = cTokenMetas[i];\n      const cTokenBalances = cTokenBalancesAll[i];\n      const cTokenUnderlyingPrices = cTokenUnderlyingPricesAll[i];\n      let matchingSTokenStore = this.cTokensStores.find(\n        (cTokenStore) =>\n          cTokenStore.underlyingAssetAddress ===\n          cTokenMeta.underlyingAssetAddress\n      );\n\n      // DEV_NOTE : This is a temp solution to handle the fact that the 'Lens' returns 0x000 address for the native coin.\n      if (\n        !matchingSTokenStore &&\n        cTokenMeta.underlyingAssetAddress === ZERO_ADDRESS\n      ) {\n        console.log(\"Looking for native coin cTokenStore\");\n        matchingSTokenStore = this.cTokensStores.find(\n          (cTokenStore) =>\n            cTokenStore.underlyingAssetAddress === NATIVE_COIN_ASSET_ADDRESS\n        );\n      }\n\n      if (matchingSTokenStore) {\n        matchingSTokenStore.updateWithFreshState(\n          cTokenMeta,\n          cTokenBalances,\n          cTokenUnderlyingPrices\n        );\n\n        const marketIsColleterable = this.marketsUserIsIn.includes(\n          matchingSTokenStore.cTokenAddress\n        );\n        matchingSTokenStore.updateIsInCollaterable(marketIsColleterable);\n      } else {\n        console.log(\n          `No cTokenStore found for meta of ${cTokenMeta.underlyingAssetAddress}`\n        );\n      }\n    }\n  }\n\n  // @action\n  // private setTokens(tokens: TokenStore[] | null): void {\n  //   this.tokens = tokens;\n  // }\n\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setLiveState\")\n  private setLiveState(lnLiveState: ILendingNetworkLiveState) {\n    this.tvl = lnLiveState.tvl;\n    this.participatingSuppliers = lnLiveState.participatingSuppliers;\n  }\n\n  @action(\"setDistributionAssetRatePerBlock\")\n  private setDistributionAssetRatePerBlock(\n    distributionAssetRatePerBlock: number\n  ) {\n    this.distributionAssetRatePerBlock = distributionAssetRatePerBlock;\n  }\n\n  @action(\"setAccountLimits\")\n  private setAccountLimits(accountLimits: TAccountLimits) {\n    console.log(`New liquidity ${accountLimits.liquidity}`);\n    console.log(`New shortfal ${accountLimits.shortfall}`);\n    this.liquidity = accountLimits.liquidity;\n    this.shortfall = accountLimits.shortfall;\n    this.marketsUserIsIn.replace(accountLimits.marketsIn);\n    console.log(`New markets in ${accountLimits.marketsIn}`);\n  }\n\n  @action(\"replaceMarkets\")\n  private replaceMarkets(newMarkets: string[]) {\n    this.allMarkets.replace(newMarkets);\n  }\n\n  private buildEmptyAssetInMarketGist(\n    assetInMarketParams: TAssetInMarketParameters\n  ): TAssetInMarketGist {\n    const gist: TAssetInMarketGist = {\n      name: assetInMarketParams.name,\n      symbol: assetInMarketParams.symbol,\n      address: assetInMarketParams.address,\n      decimals: assetInMarketParams.decimals,\n      isNativeCoin: assetInMarketParams.isNativeCoin,\n      // amountInWallet: 0,\n      borrowApy: 0,\n      supplyApy: 0,\n      usdLiquidity: 0,\n    };\n\n    return gist;\n  }\n}\n","import {\n  ILendingNetworkGist,\n  ILendingNetworkParameters,\n  ILendingNetworksService,\n} from \"../services/lendingNetworksService/ILendingNetworksService\";\nimport { action, computed, makeObservable, observable } from \"mobx\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { IObservableArray } from \"mobx/dist/internal\";\nimport { ICompoundLensService } from \"../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\n\nexport class LendingNetworksStore {\n  @observable isLoading: boolean = false;\n  @observable\n  lendingNetworkParameters: IObservableArray<ILendingNetworkParameters> = observable(\n    []\n  );\n  @observable\n  lendingNetworkGists: IObservableArray<ILendingNetworkGist> = observable([]);\n  // @observable lendingNetworkLiveState: ILendingNetworkLiveState[] = [];\n  @observable\n  lendingNetworksStores: IObservableArray<SingleLNStore> = observable([]);\n\n  @observable\n  activeLendingNetworkId: string = \"\";\n\n  @computed get allLNGists(): ILendingNetworkGist[] {\n    const gists = this.lendingNetworksStores.map((lnStore) => lnStore.lnGist);\n    return gists;\n  }\n\n  @computed get activeLNStore(): SingleLNStore | undefined {\n    const activeLnStore = this.lendingNetworksStores.find(\n      (lnStore) => lnStore.id === this.activeLendingNetworkId\n    );\n\n    return activeLnStore;\n  }\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private lendingNetworksService: ILendingNetworksService,\n    private compoundLensService: ICompoundLensService\n  ) {\n    makeObservable(this);\n\n    this.initializeStore();\n  }\n\n  public getLendingNetworkStore(networkId: string): SingleLNStore | null {\n    return this.lendingNetworksStores.find((l) => l.id === networkId) ?? null;\n  }\n\n  async initializeStore() {\n    this.setLoadingState(true);\n\n    // Get params for all registered LNs\n    await this.fetchAllLnParameters();\n\n    // Create a store for each LN\n    this.buildStoresForEachLn();\n\n    // Set the current LN as the first (just to initialize it with something)\n    // Initialize each store\n    this.initializeLNStores();\n\n    // this.setLendingNetworksGists(lnParameters);\n    this.setLoadingState(false);\n  }\n\n  private async fetchAllLnParameters() {\n    const lnParameters = await this.lendingNetworksService.fetchALlLendingNetworksParameters();\n    this.setLendingNetworkParameters(lnParameters);\n  }\n\n  private buildStoresForEachLn() {\n    const lnStores = this.lendingNetworkParameters.map((params) =>\n      this.buildLNStore(params)\n    );\n\n    this.setLendingNetworksStores(lnStores);\n  }\n\n  /**\n   * Calls 'initiailize' on each store\n   */\n  private initializeLNStores() {\n    this.lendingNetworksStores.forEach((lnStore) => lnStore.initialize());\n  }\n\n  private buildEmptyLnGist(\n    lnParams: ILendingNetworkParameters\n  ): ILendingNetworkGist {\n    const gist: ILendingNetworkGist = {\n      ...lnParams,\n      tvl: 0,\n      participatingSuppliers: 0,\n    };\n\n    return gist;\n  }\n\n  private buildLNStore(lnParams: ILendingNetworkParameters): SingleLNStore {\n    // Start with an empty gist\n    const gist: ILendingNetworkGist = {\n      ...lnParams,\n      tvl: 0,\n      participatingSuppliers: 0,\n    };\n\n    // Build the store\n    const lnStore = new SingleLNStore(\n      this.cryptoWalletIntegrationStore,\n      this.lendingNetworksService,\n      this.compoundLensService,\n      gist\n    );\n\n    return lnStore;\n  }\n\n  // **** Active LN ****\n  public setActiveLn(lnIdAddress: string) {\n    this.setActiveLendingNetworkId(lnIdAddress);\n  }\n\n  // **** Computed values ****\n\n  // **** Contract interactions ****\n\n  // **** Current address changed ****\n\n  // **** Data reading and setting ****\n\n  // **** Read and Set ****\n\n  // ****  Subscriptions ****\n\n  // ****  Complex setters ****\n\n  // ****  Observables setter actions ****\n  // @action(\"setLendingNetworksGists\")\n  // private setLendingNetworksGists(lendingNetworkGists: ILendingNetworkGist[]) {\n  //   this.lendingNetworks = lendingNetworkGists.map(\n  //     (gits) => new SingleLNStore(this.lendingNetworksService, gits)\n  //   );\n  // }\n\n  @action(\"setLendingNetworksGists\")\n  private setLendingNetworksStores(lendingNetworkStores: SingleLNStore[]) {\n    this.lendingNetworksStores.replace(lendingNetworkStores);\n  }\n\n  @action(\"setLendingNetworksGists\")\n  private setLendingNetworksGists(lendingNetworkGists: ILendingNetworkGist[]) {\n    this.lendingNetworkGists.replace(lendingNetworkGists);\n  }\n\n  @action(\"setLendingNetworkParameters\")\n  private setLendingNetworkParameters(\n    lendingNetworkParameters: ILendingNetworkParameters[]\n  ) {\n    this.lendingNetworkParameters.replace(lendingNetworkParameters);\n  }\n\n  @action(\"setActiveLendingNetworkId\")\n  private setActiveLendingNetworkId(activeLendingNetworkId: string) {\n    this.activeLendingNetworkId = activeLendingNetworkId;\n  }\n\n  @action(\"setLoadingState\")\n  private setLoadingState(isLoading: boolean) {\n    this.isLoading = isLoading;\n  }\n}\n","import { action, IReactionDisposer, observable, reaction } from \"mobx\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { PromiEvent, TransactionReceipt } from \"web3-core\";\nimport { JSON_RPC_ERROR_CODES } from \"../constants/ethereumErrorCodes\";\nimport { IComptrollerService } from \"../services/contractsIntegration/ComptrollerService/IComptrollerService\";\nimport { ComptrollerService } from \"../services/contractsIntegration/ComptrollerService/ComptrollerService\";\nimport { IEthereumProvider } from \"../services/cryptoWalletConnectionService/IEthereumProvider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getSignerOrProvider } from \"../ethereumConnection/ethereumConnection\";\n\ntype TRequiredContractsAddresses = {\n  unitrollerAddress: string;\n};\ntype TAddressesPerChain = Record<number, TRequiredContractsAddresses>;\n\nexport class ServiceStore {\n  @observable public isChainSupported = false;\n\n  private chainIdReaction: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    addressesPerChain: TAddressesPerChain\n  ) {\n    // DEV_NOTE : This initialization is only for TS sake (initialize in constructor).\n    //            The real initialization happens in the 'reactToChainIdChanged'\n    // this.comptrollerService = new ComptrollerService(\"\");\n\n    this.chainIdReaction = reaction(\n      () => this.cryptoWalletIntegrationStore.chainId,\n      async (chainId) => {\n        // console.log(`Creating services for chain id ${chainId}`);\n        await this.reactToChainIdChanged(addressesPerChain, chainId);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Computed values ****\n\n  // **** Chain Id changed ****\n\n  private async reactToChainIdChanged(\n    addressesPerChain: TAddressesPerChain,\n    chainId: number\n  ) {\n    if (addressesPerChain[chainId]) {\n      this.setIsChainSupported(true);\n      const chainAddresses = addressesPerChain[chainId];\n      this.createServicesForChain(chainAddresses);\n    } else {\n      this.setIsChainSupported(false);\n    }\n  }\n\n  private createServicesForChain(addresses: TRequiredContractsAddresses) {\n    // This is on-hold for now.\n    // const signerOrProvider = this.cryptoWalletIntegrationStore.signerOrProvider;\n    // this.comptrollerService = new ComptrollerService(\n    //   addresses.unitrollerAddress,\n    //   signerOrProvider\n    // );\n  }\n\n  // TODO : Add 'create for LN' functionality\n\n  // **** Data reading and setting ****\n\n  // **** Read and Set ****\n\n  // ****  Subscriptions ****\n\n  private async refreshAccountListeners(accountAddress: string) {\n    this.cancelAllCurrentSubscriptions();\n  }\n\n  private cancelAllCurrentSubscriptions() {}\n\n  // ****  Complex setters ****\n\n  // ****  Observables setter actions ****\n  @action(\"setIsChainSupported\")\n  private setIsChainSupported(isChainSupported: boolean) {\n    this.isChainSupported = isChainSupported;\n  }\n}\n","import { action, computed, makeObservable, observable } from \"mobx\";\n\ntype TModalIds = \"SUPPLY_MODAL\" | \"BORROW_MODAL\" | \"COLLATERAL_MODAL\";\ntype TCurrentModalIds = TModalIds | \"NONE\";\n\nexport class ModalsStore {\n  @observable SUPPLY_MODAL_ID = \"SUPPLY_MODAL\";\n\n  @observable currentModalId: TCurrentModalIds = \"NONE\";\n  @observable assetBaseAddress: string = \"\";\n\n  @computed get isSupplyModalActive(): boolean {\n    return this.currentModalId === \"SUPPLY_MODAL\";\n  }\n\n  @computed get isBorrowModalActive(): boolean {\n    return this.currentModalId === \"BORROW_MODAL\";\n  }\n\n  @computed get isCollateralModalActive(): boolean {\n    return this.currentModalId === \"COLLATERAL_MODAL\";\n  }\n\n  constructor() {\n    makeObservable(this);\n  }\n\n  // **** Modal management ****\n\n  public showSupplyModal(supplyAssetBaseAddress: string) {\n    this.showAssetActionModal(\"SUPPLY_MODAL\", supplyAssetBaseAddress);\n  }\n\n  public showBorrowModal(borrowAssetBaseAddress: string) {\n    this.showAssetActionModal(\"BORROW_MODAL\", borrowAssetBaseAddress);\n  }\n\n  public showCollateralModal(borrowAssetBaseAddress: string) {\n    this.showAssetActionModal(\"COLLATERAL_MODAL\", borrowAssetBaseAddress);\n  }\n\n  // **** Complex setters ****\n  private showAssetActionModal(\n    supplyModalId: TModalIds,\n    assetBaseAddress: string\n  ) {\n    // DEV_NOTE : Setting the asset before showing the modal to ensure that asset data will be found (no showing \"mid-way\" UI state)\n    this.setAssetBaseAddress(assetBaseAddress);\n    this.setCurrentModalId(supplyModalId);\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'supply'\n   */\n  public hideSupplyModal() {\n    if (this.isSupplyModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'borrow'\n   */\n  public hideBorrowModal() {\n    if (this.isBorrowModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'borrow'\n   */\n  public hideCollateralModal() {\n    if (this.isCollateralModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setCurrentModalId\")\n  private setCurrentModalId(currentModalId: TCurrentModalIds) {\n    console.log(`New current modal id ${currentModalId}`);\n    this.currentModalId = currentModalId;\n  }\n\n  @action(\"setAssetBaseAddress\")\n  private setAssetBaseAddress(assetBaseAddress: string) {\n    this.assetBaseAddress = assetBaseAddress;\n  }\n}\n","import { configure } from \"mobx\";\nimport { IStores } from \"./stores\";\n\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\n\n// This import ensures mobx batching\n// TODO : Check if still relevant to mobx6\nimport \"mobx-react-lite/batchingForReactDom\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { ILendingNetworksService } from \"../services/lendingNetworksService/ILendingNetworksService\";\nimport { AccountStore } from \"./AccountStore\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { ServiceStore } from \"./ServicesStore\";\nimport { ITokensLensService } from \"../services/contractsIntegration/TokensLensService/ITokensLensService\";\nimport { ICompoundLensService } from \"../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { IComptrollerService } from \"../services/contractsIntegration/ComptrollerService/IComptrollerService\";\nimport { ModalsStore } from \"./ModalsStore\";\nimport { IErc20BuilderService } from \"../services/contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { ICTokensBuilderService } from \"../services/contractsIntegration/cTokensService/ICTokensBuilderService\";\n\n/**\n * Builds and initializes all of the stores\n */\nexport function getStores(\n  cryptoWalletConnectionService: ICryptoWalletConnectionService,\n  lendingNetworksService: ILendingNetworksService,\n  erc20BuilderService: IErc20BuilderService,\n  cTokensBuilderService: ICTokensBuilderService,\n  tokensLensService: ITokensLensService,\n  compoundLensService: ICompoundLensService\n): IStores {\n  // Create stores instances + Hydrate the stores\n  const cryptoWalletIntegrationStore = new CryptoWalletConnectionStore(\n    cryptoWalletConnectionService\n  );\n\n  const lendingNetworksStore = new LendingNetworksStore(\n    cryptoWalletIntegrationStore,\n    lendingNetworksService,\n    compoundLensService\n  );\n\n  const servicesStore = new ServiceStore(cryptoWalletIntegrationStore, {});\n\n  const accountStore = new AccountStore(\n    cryptoWalletIntegrationStore,\n    lendingNetworksStore,\n    erc20BuilderService,\n    cTokensBuilderService,\n    tokensLensService,\n    compoundLensService\n  );\n\n  const stores: IStores = {\n    cryptoWalletIntegrationStore,\n    accountStore,\n    lendingNetworksStore,\n    servicesStore,\n    modalsStore: new ModalsStore(),\n  };\n\n  return stores;\n}\n\n// TODO : Check if this is still relevant to mobx6\n/**\n * Configures the mobx library. Should get called at App's initialization.\n */\nexport function configureMobx() {\n  configure({\n    enforceActions: \"observed\",\n  });\n}\n","import { StylesProvider, ThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport { App } from \"./App\";\nimport { baseTheme } from \"./theme/Theme\";\nimport { buildLNServices, buildServices } from \"./services/Services\";\nimport { configureMobx, getStores } from \"./store/storesInitialization\";\nimport { Provider } from \"mobx-react\";\nimport { ZERO_ADDRESS } from \"./constants/constantAddresses\";\n\ninterface IProps {}\n\nconfigureMobx();\n\n// TODO : Move this to a better place\nconst ethereumProvider = (window as any).ethereum;\nconst services = buildServices(ethereumProvider);\nconst lnServices = buildLNServices(ethereumProvider, {\n  unitrollerAddress: ZERO_ADDRESS,\n});\n// process.env.NODE_ENV === \"production\"\n//   ? buildServices(ethereumProvider)\n//   : buildMockServices(ethereumProvider);\nconst stores = getStores(\n  services.cryptoWalletIntegrationService,\n  services.lendingNetworksService,\n  services.erc20ServiceBuilder,\n  services.cTokenServiceBuilder,\n  services.tokensLensService,\n  services.compoundLensService\n);\n\nexport const AppWrapper = React.memo<IProps>((props) => {\n  return (\n    <Provider {...stores} {...services} {...lnServices}>\n      <StylesProvider injectFirst>\n        <ThemeProvider theme={baseTheme}>\n          <App />\n        </ThemeProvider>\n      </StylesProvider>\n    </Provider>\n  );\n});\n","import { ICryptoWalletConnectionService } from \"./cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"./cryptoWalletConnectionService/IEthereumProvider\";\nimport { CryptoWalletConnectionService } from \"./cryptoWalletConnectionService/CryptoWalletConnectionService\";\nimport { ILendingNetworksService } from \"./lendingNetworksService/ILendingNetworksService\";\nimport { LendingNetworksService } from \"./lendingNetworksService/LendingNetworksService\";\nimport { UniswapAnchoredViewService } from \"./contractsIntegration/UniswapAnchoredView/UniswapAnchoredViewService\";\n\nimport contractsAddresses from \"../solidityInterfaces/addresses.json\";\nimport { getSignerOrProvider } from \"../ethereumConnection/ethereumConnection\";\nimport { ITokensLensService } from \"./contractsIntegration/TokensLensService/ITokensLensService\";\nimport { TokensLensService } from \"./contractsIntegration/TokensLensService/TokensLensService\";\nimport { ICompoundLensService } from \"./contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { CompoundLensService } from \"./contractsIntegration/CompoundLensService/CompoundLensService\";\nimport { IComptrollerService } from \"./contractsIntegration/ComptrollerService/IComptrollerService\";\nimport { ComptrollerService } from \"./contractsIntegration/ComptrollerService/ComptrollerService\";\nimport { IErc20BuilderService } from \"./contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { Erc20BuilderService } from \"./contractsIntegration/erc20Service/Erc20BuilderService\";\nimport { ICTokensBuilderService } from \"./contractsIntegration/cTokensService/ICTokensBuilderService\";\nimport { CTokensBuilderService } from \"./contractsIntegration/cTokensService/CTokensBuilderService\";\n\nexport interface IServices {\n  cryptoWalletIntegrationService: ICryptoWalletConnectionService;\n  lendingNetworksService: ILendingNetworksService;\n  uniswapAnchoredViewService: UniswapAnchoredViewService;\n  tokensLensService: ITokensLensService;\n  compoundLensService: ICompoundLensService;\n\n  // Service builders\n  erc20ServiceBuilder: IErc20BuilderService;\n  cTokenServiceBuilder: ICTokensBuilderService;\n}\n\nexport type TLNContractsAddresses = {\n  unitrollerAddress: string;\n};\n\n/**\n * Services that are LN specific and should be refreshed/replaced when switching a LN.\n */\nexport interface ILNServices {\n  comptrollerLiveService: IComptrollerService;\n}\n\n// DEV_NOTE : For simplicity of early stage dev, we assume that we have ethereum provider, if not, we will not initialize the services.\nexport function buildServices(ethereumProvider: IEthereumProvider): IServices {\n  const signerOrProvider = getSignerOrProvider(ethereumProvider);\n  const addresses = getContractsAddresses();\n\n  return {\n    cryptoWalletIntegrationService: new CryptoWalletConnectionService(\n      ethereumProvider\n    ),\n    lendingNetworksService: new LendingNetworksService(),\n    uniswapAnchoredViewService: new UniswapAnchoredViewService(\n      addresses.UniswapAnchoredView,\n      signerOrProvider\n    ),\n    tokensLensService: new TokensLensService(\n      addresses.TokensLens,\n      signerOrProvider\n    ),\n    compoundLensService: new CompoundLensService(\n      addresses.CompoundLens,\n      signerOrProvider\n    ),\n\n    // Service builders\n    erc20ServiceBuilder: new Erc20BuilderService(signerOrProvider),\n    cTokenServiceBuilder: new CTokensBuilderService(signerOrProvider),\n  };\n}\n\n// DEV_NOTE : For simplicity of early stage dev, we assume that we have ethereum provider, if not, we will not initialize the services.\nexport function buildLNServices(\n  ethereumProvider: IEthereumProvider,\n  contractsAddresses: TLNContractsAddresses\n): ILNServices {\n  const signerOrProvider = getSignerOrProvider(ethereumProvider);\n\n  return {\n    comptrollerLiveService: new ComptrollerService(\n      contractsAddresses.unitrollerAddress,\n      signerOrProvider\n    ),\n  };\n}\n\n// export function buildMockServices(\n//   ethereumProvider: IEthereumProvider\n// ): IServices {\n//   const signerOrProvider = getSignerOrProvider(ethereumProvider);\n//   const addresses = getContractsAddresses();\n//\n//   return {\n//     cryptoWalletIntegrationService: new CryptoWalletConnectionService(\n//       ethereumProvider\n//     ),\n//     lendingNetworksService: new LendingNetworksServiceMock(),\n//     uniswapAnchoredViewService: new UniswapAnchoredViewService(\n//       addresses.UniswapAnchoredView,\n//       signerOrProvider\n//     ),\n//     tokensLensService: new\n//   };\n// }\n\n// TODO : Add addresses by network\nexport function getContractsAddresses() {\n  return contractsAddresses;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { AppWrapper } from \"./AppWrapper\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}