{"version":3,"sources":["reportWebVitals.ts","store/storeHooks.ts","components/structure/ContentContainer.tsx","theme/themeConstants.ts","components/header/Header.tsx","theme/commonClasses.ts","components/panel/Panel.tsx","components/icons/TokenIcon.tsx","pages/LendingNetworkPage/MarketsTab/markets/AssetPanelRow.tsx","pages/LendingNetworkPage/MarketsTab/markets/MarketsPanel.tsx","pages/LendingNetworkPage/MarketsTab/markets/MarketsSection.tsx","components/AnimatedNumberText/AnimatedNumberText.tsx","pages/LendingNetworkPage/MarketsTab/overview/BalanceHeadline.tsx","pages/LendingNetworkPage/MarketsTab/overview/NetApy.tsx","pages/LendingNetworkPage/MarketsTab/overview/BalancesAndApy.tsx","pages/LendingNetworkPage/MarketsTab/overview/BorrowLimitBar.tsx","pages/LendingNetworkPage/MarketsTab/overview/BalancesTotal.tsx","pages/LendingNetworkPage/MarketsTab/overview/BorrowOverview.tsx","pages/LendingNetworkPage/MarketsTab/MainLendingNetworkTab.tsx","components/modals/MarketInteractionModal/base/ModalFooter.tsx","components/modals/MarketInteractionModal/base/ModalActionButton.tsx","components/modals/MarketInteractionModal/base/rates/BaseRates.tsx","components/modals/MarketInteractionModal/base/rates/ActionRates.tsx","components/modals/MarketInteractionModal/base/rates/BorrowLimitRates.tsx","components/modals/txWaitingModal/TxWaitingModal.tsx","components/modals/MarketInteractionModal/base/MarketInteractionModal.tsx","constants/ethereumErrorCodes.ts","components/modals/txWaitingModal/txWaitingHooks.ts","components/modals/MarketInteractionModal/marketInteractionModalHooks.ts","components/modals/MarketInteractionModal/base/mainModalMessage/MainModalMessage.tsx","components/modals/MarketInteractionModal/SupplyModal.tsx","components/modals/MarketInteractionModal/BorrowModal.tsx","components/modals/collateralModal/CollateralModal.tsx","components/modals/collateralModal/ConnectedCollateralModal.tsx","components/modals/collateralModal/collateralModalHooks.ts","components/modals/incentiveModal/IncentiveModal.tsx","components/modals/incentiveModal/ConnectedIncentiveModal.tsx","components/modals/incentiveModal/incentiveModalHooks.ts","pages/LendingNetworkPage/LendingNetworkPage.tsx","pages/AllNetworksPage/NetworkListItem.tsx","pages/AllNetworksPage/NetworksList.tsx","pages/AllNetworksPage/AllNetworksPage.tsx","pages/Main.tsx","App.tsx","theme/Theme.tsx","services/cryptoWalletConnectionService/CryptoWalletConnectionService.ts","configs.ts","services/networkActions.ts","constants/constantAddresses.ts","services/lendingNetworksService/lendingNetworksParams.ts","services/lendingNetworksService/LendingNetworksService.ts","services/contractsIntegration/contractsIntegrationUtils.ts","services/contractsIntegration/UniswapAnchoredView/UniswapAnchoredViewService.ts","ethereumConnection/ethereumConnection.ts","services/contractsIntegration/ComptrollerService/ComptrollerService.ts","services/contractsIntegration/erc20Service/Erc20Service.ts","services/contractsIntegration/erc20Service/Erc20BuilderService.ts","services/contractsIntegration/cTokensService/CErc20Service.ts","services/contractsIntegration/cTokensService/CEtherService.ts","services/contractsIntegration/cTokensService/CTokensBuilderService.ts","constants/supportedTokensPerChain.ts","store/CryptoWalletConnectionStore.ts","store/AccountStore.ts","services/lendingNetworksService/ILendingNetworksService.ts","store/multiInstanceStores/SingleCTokenStore.ts","store/multiInstanceStores/SingleLNStore.ts","store/LendingNetworksStore.ts","store/ModalsStore.ts","services/contractsIntegration/CompoundLensService/CompoundLensService.ts","constants/chainConstants.ts","store/SystemStore.ts","store/storesInitialization.ts","AppWrapper.tsx","services/Services.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStores","React","useContext","MobXProviderContext","useAccountStore","accountStore","useLendingNetworksStore","lendingNetworksStore","useSystemStore","systemStore","useModalsStore","modalsStore","useActiveLendingNetworkStore","activeLNStore","useStyles","makeStyles","theme","contentContainer","margin","paddingRight","paddingLeft","maxWidth","ContentContainer","memo","props","children","rest","classes","className","BRAND_MAIN_COLOR","AFFIRMATIVE_GREEN_COLOR","TEXT_ON_LIGHT","GRAYISH_TEXT","header","padding","backgroundColor","palette","background","default","minHeight","alignedRow","display","flexDirection","alignItems","logoLink","minWidth","height","backgroundImage","process","backgroundRepeat","backgroundSize","logoLinkText","fontWeight","color","primary","dark","textDecoration","fontSize","light","lnLinkText","actions","justifyContent","headerButtonLike","Color","rgb","lighten","hex","border","borderRadius","borderColor","tokenBalance","cursor","letterSpacing","textTransform","account","marginLeft","tokenIcon","width","iconComp","icon","flexShrink","backgroundPosition","Header","observer","address","cryptoWalletConnectionStore","cryptoWalletIntegrationStore","activeLn","walletText","isConnectedToWallet","mainAddress","substring","length","hasActiveLn","activeLnName","name","linkToLnPage","lnHomePage","incentiveTokenBalance","compBalanceUnits","Grid","container","direction","style","alignContent","item","xs","to","target","href","Hidden","xsDown","clsx","sm","onClick","showIncentiveModal","toFixed","toLocaleString","askToConnect","useCommonClasses","mobileHide","breakpoints","down","mobileOnly","up","label","fontStyle","textRight","textAlign","textCenter","panel","boxShadow","Panel","token","transform","TokenIcon","symbol","extraClasses","commonClasses","classesForSpan","useMemo","safeExtraClasses","a","textRransform","asset","flexWrap","borderBottom","borderLeft","transition","list_icon","identity","identity_icon","marginRight","identity_balance","flex","overflow","balance","whiteSpace","textOverflow","balanceSubtitle","marginTop","AssetPanelRow","marketType","assetSummary","onCollateralableChange","onAssetSelected","cTokenStore","baseAssetAddress","activeLN","cTokensStores","find","underlyingAssetAddress","useCTokenStoreByBaseAsset","isCollaterable","borrowApy","borrowApyInPercentages","supplyApy","supplyApyInPercentages","usdCashLiquidity","cTokenCashInUSD","walletBalanceInUnits","accountUnderlyingBalanceInUnits","liquidityUSDInScale","amount","scaleUnit","scaleDivider","units","amountToSumInScale","supplyInUnits","accountSupplyInUnits","borrowInUnits","accountBorrowInUnits","isSupply","ApyToDisplay","unitsToDisplay","unitsText","showActionUnits","onCollateralSwitch","useCallback","event","checked","onAssetInteractionRequested","hasBeenInitialized","console","log","collateralLiquidityOrLoading","collateralOrLiquidity","Switch","onChange","e","stopPropagation","parseFloat","Skeleton","animation","panelHeader","flexFlow","zeroMargin","assetsList","panelLabels","assets","MarketsPanel","assetsInMarket","userBalancesInUnits","marketsUserIsIn","map","unitsInWallet","interfaceContainer","row","marketsColumn","flexBasis","MarketsSection","useState","error","lnStore","newCollaterableValue","showCollateralModal","onSupplyAssetSelected","cTokenMeta","undefined","assetParameters","baseAssetsToCTokenStore","get","assetsParams","assetParam","showSupplyModal","onBorrowAssetSelected","showBorrowModal","Typography","symbolsToUnits","standardSumFormat","n","AnimatedNumberText","value","formatValue","headline","textLeft","supply","borrow","BalanceHeadline","titleText","sum","alignLeft","netApyWrapper","position","left","netApy","netApyDescription","top","right","bottom","netApyDescription_Active","label_active","headline_inactive","headline_active","NetApy","totalYearlyChangeUsd","hoverTargetRef","useRef","isHovering","useHover","isEarning","apyDirectionMessage","earnedOrPaid","netApyStringified","totalYearlyChangeUsdStringified","labelText","headlineText","ref","viewBox","d","stroke","fill","content","alignMiddle","column","BalancesAndApy","borrowBalanceUsd","supplyBalanceUsd","smUp","limitBar","limitBarLabel","progressBarWrapper","progress_bar_green","progress","dark_clear","thin","progress_bar_percent_label","p","float","small","progress_bar_hover_space","BorrowLimitBar","usedBorrowPercentage","collateralPotentialInUSD","role","aria-valuemin","aria-valuemax","balancesTotal","BalancesTotal","hero","marginBottom","BorrowOverview","totalAccountSupplyBalanceUsd","totalAccountBorrowBalanceUsd","MainLendingNetworkTab","footer","title","ModalFooter","tokenSymbol","tokenAmount","ModalActionButton","text","disabled","Button","variant","fullWidth","rateRow","bottomBorder","heavyBottomBorder","symbolIcon","valueText","BaseRates","subTitle","rateRows","index","isLast","predictedValue","displayPredictedValues","valueSuffix","ActionRates","actionName","assetSymbol","assetSupplyApy","distributionAssetSymbol","distributionAssetApy","BorrowLimitRates","borrowLimitUsd","borrowLimitUsedPercentage","predictedBorrowLimitUsd","predictedBorrowLimitPercentage","note","TOP_DISTANCE_REM","modal","txWaitingPanel","upperRightCorner","upperLeftCorner","messageContainer","paddingTop","paddingBottom","tabBody","TxWaitingModal","open","closeModal","txWaitingStage","isWaitingForUserApproval","message","Modal","onBackdropClick","Fade","in","IconButton","marketInteractionPanel","MarketInteractionModal","messageOrInput","inputActionButtonText","onInputActionButtonPressed","showInputActionButton","inputActionButtonActive","actionAssetSymbol","actionAssetName","currentTabIndex","onTabIndexChange","tab0Title","tab1Title","actionApy","distributionApy","showBorrowLimit","showPredictedBorrowLimits","currentBorrowLimit","borrowLimitAfterChange","usedBorrowLimitPercentage","usedBorrowLimitPercentageAfterChange","borrowLimitNote","actionButtonActive","actionButtonText","actionButtonDisabledText","actionButtonOnClick","footerMessagesPayloads","waitingForUserApproval","waitingForTxConfirmation","maxHeight","footerMessagesPayload","JSON_RPC_ERROR_CODES","userRejectedRequest","unauthorized","unsupportedMethod","useTxWaitingStateExplicit","setWaitingForUserApproval","setWaitingForTxConfirmation","useTxWaitingLogicExplicit","txCreatingFunction","contractTx","wait","receipt","code","useMarketInteractionModalBase","assetAddressToParamsMap","assetBaseAddressToParams","Map","assetBaseAddress","assetParams","isNativeCoin","nativeCoinSymbol","cToken","cTokenAddress","supplyTokenSymbol","supplyTokenName","distributionTokenSymbol","distributionAssetParams","walletBalance","hasWalletBalance","needToApprove","pricePerUnitUsd","underlyingUsdPrice","collateralFactorInUnits","maximillionAddress","currentBorrowLimitUsd","liquidityUsd","priceCalculationDecimals","currentLiquidityUsd","hasAvailableLiquidity","liquidityInAssetUnits","useMarketInteractionModalTabsState","activeTabIndex","setActiveTabIndex","useMarketInteractionActiveTabState","useOnEnableClicked","wrappedEnableTx","approveErc20Usage","ethers","constants","MaxUint256","useCalculateChangeInBorrowLimits","actionInUnits","unitPriceInUsd","pricePrecision","priceSensitivizer","buildSensitivizer","actionEffectInUsd","collateralValueOfActionEffect","actionLeadsToShortfall","useCalculateChangeInBorrowLimitsForBorrow","Math","abs","sensitivity","price","sensitivizePrice","largeIcon","fadeIn","main","MainModalMessage","SupplyModal","isWithdraw","onEnableClicked","supplyInputValue","setSupplyInputValue","withdrawInputValue","setWithdrawInputValue","clearStateBeforeClose","inputComponent","Input","inputProps","appearance","type","sanitizeNumericInput","hasApprovedERC20","hasAnyAllowance","currentSupplyBalance","hasSupplyBalance","hasBorrowBalance","underlyingDecimals","toString","wrappedSupplyTx","supplyToMarket","utils","parseUnits","wrappedWIthdrawTx","withdrawFromMarket","onSupplyClicked","onWithdrawClicked","messageOrInputComponent","footerMessagePayloads","canSupply","canWithdraw","commonPayloadPart","marketModalStatePayloadForSupplyTab","isSupplyInputValueValid","isOfferingMoreThanWalletBalance","actionButtonTextForSupply","activeButtonActive","actionButtonCbForSupply","reasonForNotBeingAbleToWithdraw","marketModalStatePayloadForWithdrawTab","withdrawInputValid","isRequestingMoreThanSuppliedBalance","statePerTabPayload","marketModalStatePayload","stringValueOfNumericInput","safeString","charAt","parsedAsFloat","isNaN","BorrowModal","isBorrow","isRepay","isRepayingMax","setIsRepayingMax","borrowInputValue","setBorrowInputValue","repayInputValue","setRepayInputValue","useEffect","currentBorrowBalance","needsToButNotYetApproved","repayAmount","wrappedBorrowTx","borrowFromMarket","wrappedRepayTx","repayToMarket","onBorrowClicked","onBorrowMaxSafeClicked","amountLeftToSafe","safeAmountInUsd","safeBorrowInUnits","getUnitsForUsdValue","onRepayClicked","cTokenCashInUnits","cTokenCashInUsd","repayIsZero","hasEnoughToRepayAll","canRepayMax","onSetRepayToMaxClicked","maxPossibleBorrow","max","marketModalStatePayloadForBorrowTab","isRequestingMoreThanCanBorrow","isRequestingMoreThanMarketLiquidity","reasonForNotBeingAbleToBorrow","SAFE_BORROW_FACTOR","marketModalStatePayloadForRepayTab","isOfferingMoreThanHasBorrowed","canRepay","actionButtonCbForRepay","reasonForNotBeingAbleToRepay","actionButtonTextForRepay","collateralInteractionPanel","CollateralModal","ConnectedCollateralModal","underlyingName","underlyingSymbol","useCollateralModalState","effectiveUnits","wrappedTxBuildingFunction","useTxWaitingLogic","enterMarketByCTokenAddress","exitMarketByCTokenAddress","onActionButtonClicked","heroToken","IncentiveModal","incentiveTokenName","incentiveTokenSymbol","incentiveTokenAddress","balanceInUnits","unclaimedInUnits","canClaim","onClaim","ConnectedIncentiveModal","compAllocatedUnits","useIncentiveModalState","onClaimClicked","wrappedClaimTx","claimLnIncentiveToken","useOnClaimLnIncentive","root","LendingNetworkPage","networkId","useRouteMatch","path","url","useHistory","isSupplyModalActive","setActiveLn","isLoading","exact","render","hideSupplyModal","isBorrowModalActive","hideBorrowModal","isCollateralModalActive","hideCollateralModal","hideIncentiveModal","isInventiveModalActive","lnAsset","NetworkListItem","onViewNetwork","networkGist","id","Card","CardHeader","CardContent","CardActions","spacing","NetworksList","lendingNetworksGists","network","AllNetworksPage","history","activeLendingNetworkId","targetUrl","push","align","allLNGists","Main","component","match","params","network_id","App","lendingNetworkParameters","unitrollerAddress","basename","baseTheme","responsiveFontSizes","createMuiTheme","secondary","CryptoWalletConnectionService","ethereum","web3","hasEthereumProvider","hasEventsSupport","isMetamaskInstalled","isSemiCompliantEthereumProviderInstalled","this","isMetaMask","Web3","onFunction","on","enable","selectedAddress","networkVersion","eth","getChainId","chainId","getBalance","balanceInDecimal","parseInt","fromWei","getAccounts","accounts","getBlockNumber","Error","listener","off","READ_ONLY_ETHEREUM_ENDPOINT","REACT_APP_READ_ONLY_ETHEREUM_ENDPOINT","IS_DEV","REACT_APP_USE_PROD","fetchLocalJson","localPath","fetch","fetchRes","json","ZERO_ADDRESS","NATIVE_COIN_ASSET_ADDRESS","wrappedFuseAddress","LendingNetworksParam","decimals","distributionAssetParameters","LendingNetworksService","lnParams","fetchDevNetworkGist","devNetworksgist","participatingSuppliers","tvl","LocalNetworkDevLNAddresses","unitroller","maxmimilion","LocalNetworkDevTokensAddresses","assetInMarket","assetAddress","assetAddressToUse","etheresStructResponseToObject","ethersStructResponse","obj","key","Number","UniswapAnchoredViewService","uniswapAnchoredViewAddress","signerOrProvider","uniswapAnchoredViewContract","Contract","UniswapAnchoredViewJson","abi","getTokenConfigBySymbol","getSignerOrProvider","ethereumProvider","signer","providers","Web3Provider","JsonRpcProvider","getSigner","getAddress","catch","ComptrollerService","unitrollerProxyContract","ComptrollerJson","after","attach","toJS","getAllMarkets","markets","cTokens","enterMarkets","exitMarket","Erc20Service","erc20Address","erc20Contract","ERC20Json","balanceOf","ownerAddress","spenderAddress","allowance","approve","Erc20BuilderService","CErc20Service","cErc20Contract","CErc20Json","mint","redeem","repayBorrow","CEtherService","cEtherAddress","cEther","maximillion","CEtherJson","MaximillionJson","redeemUnderlying","borrowerAddress","formatEther","repayBehalf","CTokensBuilderService","cErc20Address","NATIVE_COIN_SYMBOL_PER_CHAIN","localTokensAddressesJson","1337","31337","1","FUSE_BLOCK_PER_YEAR","FUSE_BLOCK_PER_DAY","DAILY_BLOCK_PER_CHAIN","3","ROPSTEN_BLOCK_PER_DAY","122","CryptoWalletConnectionStore","action","cryptoWalletConnectionService","addressCheckingInterval","reactionToWalletConnection","makeObservable","getEthereumProvider","reaction","isConnected","readInformationFromConnectedWallet","fireImmediately","onMainAddressChange","setMainAddress","onChainIdChange","setChainId","setInterval","refreshState","blocksPerYear","didUserApproveDappInThePast","walletConnectionRequestApproved","requestConnectionPermission","permissionGranted","setWalletConnectionRequestApproved","readChainId","readMainAddress","walletAddress","requestApproved","observable","computed","AccountStore","erc20BuilderService","cTokensBuilderService","addressChangeReaction","activeLNStoreId","setDoneLoading","reactToConnectedChainOrAddressChanged","Array","from","tokensWithBalances","entries","reduce","cur","metaWithBalances","promievent","resetTxIndicators","setTxPending","res","setTxCanceled","spender","buildErc20Service","contractInteraction","manuallyUpdateAllStores","cTokenService","buildCEtherService","buildCErc20Service","withdraw","cNativeService","repayBorrowWithMaximillion","contractTransaction","currentAddress","activeLnStore","refreshAccountListeners","refreshDataForAccount","failLoadingProcess","refreshFromOutside","manuallyReadAccountData","accountAddress","clearAllAccountData","clearTokenBalancesMap","cancelAllCurrentSubscriptions","setErrorLoading","setTxHadError","doneLoading","errorLoading","txPending","txCanceled","txHadError","clear","tokensWithBalancesMap","replace","EMPTY_ASSET_IN_MARKET_PARAMETERS","SingleCTokenStore","assetInMarketParams","cTokenName","cTokenSymbol","cTokenDecimals","BigNumber","exchangeRateCurrent","supplyRatePerBlock","borrowRatePerBlock","totalBorrows","totalReserves","totalSupply","totalCash","reserveFactorMantissa","collateralFactorMantissa","isListed","borrowBalanceCurrent","balanceOfUnderlying","tokenAllowance","underlyingPrice","cTokenBalances","cTokenUnderlyingPrice","batchUpdateFromCTokenMeta","setIsCollaterable","formatUnits","totalSupplyInUnits","totalBorrowInUnits","blockPerYear","supplyRatePerBlockInUnits","borrowRatePerBlockInUnits","supplyApyInUnits","borrowApyInUnits","totalSupplyBalanceUsd","accountBorrowBalanceUsd","totalYearlyGainsUsd","totalYearlyLossesUsd","gt","usdValue","SingleLNStore","lendingNetworksService","lendingNetworkGist","comptrollerService","forEach","set","liquidity","totalSupplyUsd","totalAccountSupplyUsd","accountSupplyBalanceUsd","totalBorrowUsd","totalBorrowBalanceUsd","totalAccountBorrowUsd","totalYearlyGains","totalLossesGains","totalYearlyChanges","totalYearlyChange","potentialCollateral","usedBorrowFraction","distributionAssetRatePerBlock","incentiveBalance","incentiveAllocated","_priceCalculationDecimals","readDataForAccount","refreshLNNetworkState","readAndSetCompBalanceMeta","readNSetMarkets","batchReadAndUpdateCTokensStores","readNSetAccountLimits","JSON","stringify","fetchLendingNetworkLiveState","liveState","setLiveState","assetToCTokenStore","has","tx","claimIncentiveFromAllMarkets","comptrollerProxy","compoundLensServiceInitialized","compoundLensService","getAccountLimits","accountLimits","setAccountLimits","warn","replaceMarkets","fetchCompBalanceMetadataExt","compBalanceMetadataExt","setCompBalanceMeta","cTokenMarkets","allMarkets","cTokenMetadataAll","cTokenMetas","cTokenBalancesAll","cTokenUnderlyingPriceAll","cTokenUnderlyingPricesAll","i","cTokenUnderlyingPrices","matchingSTokenStore","includes","updateWithFreshState","marketIsColleterable","updateIsInCollaterable","lnLiveState","compBalance","allocated","shortfall","marketsIn","newMarkets","usdLiquidity","LendingNetworksStore","initializeStore","lendingNetworksStores","lnGist","l","setLoadingState","fetchAllLnParameters","buildStoresForEachLn","initializeLNStores","fetchALlLendingNetworksParameters","lnParameters","setLendingNetworkParameters","lnStores","buildLNStore","setLendingNetworksStores","initialize","gist","lnIdAddress","setActiveLendingNetworkId","lendingNetworkStores","lendingNetworkGists","ModalsStore","currentModalId","supplyAssetBaseAddress","showAssetActionModal","borrowAssetBaseAddress","setCurrentModalId","supplyModalId","setAssetBaseAddress","CompoundLensService","compoundLensAddress","compoundLensContract","CompoundLensJson","newCompoundLensAddress","isInitialized","callStatic","cTokenMetadata","cTokenAddresses","rawMetas","rawMeta","comptrollerAddress","rawAccountLimits","compToken","votes","getCompBalanceMetadataExt","rawCompBalanceMetaExt","LOCAL_CHAINS","LIVE_CHAINS","LIVE_CHAIN_CONSTANTS","SystemStore","chainIdChangeReaction","reactToConnectedChainChanged","chainCompoundLensAddress","getChainCompoundLensAddress","setCompoundLensAddress","setNativeCoinSymbol","ChainAddresses","CompoundLens","configure","enforceActions","window","services","addresses","contractsAddresses","cryptoWalletIntegrationService","uniswapAnchoredViewService","UniswapAnchoredView","erc20ServiceBuilder","cTokenServiceBuilder","buildServices","lnServices","comptrollerLiveService","buildLNServices","stores","getStores","AppWrapper","StylesProvider","injectFirst","ThemeProvider","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ba18e48.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from \"react\";\nimport { MobXProviderContext } from \"mobx-react\";\nimport { IStores } from \"./stores\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { AccountStore } from \"./AccountStore\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { TLNContractsAddresses } from \"../services/Services\";\nimport { ModalsStore } from \"./ModalsStore\";\nimport { SingleCTokenStore } from \"./multiInstanceStores/SingleCTokenStore\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { SystemStore } from \"./SystemStore\";\n\nexport function useStores(): IStores {\n  // @ts-ignore\n  return React.useContext(MobXProviderContext);\n}\n\nexport function useCryptoWalletIntegrationStore(): CryptoWalletConnectionStore {\n  return useStores().cryptoWalletIntegrationStore;\n}\n\nexport function useAccountStore(): AccountStore {\n  return useStores().accountStore;\n}\n\nexport function useLendingNetworksStore(): LendingNetworksStore {\n  return useStores().lendingNetworksStore;\n}\n\nexport function useSystemStore(): SystemStore {\n  return useStores().systemStore;\n}\n\nexport function useModalsStore(): ModalsStore {\n  return useStores().modalsStore;\n}\n\nexport function useActiveLendingNetworkStore(): SingleLNStore | undefined {\n  return useStores().lendingNetworksStore.activeLNStore;\n}\n\nexport function useCTokenStoreByBaseAsset(\n  baseAssetAddress: string\n): SingleCTokenStore | undefined {\n  const lendingNetworksStore = useLendingNetworksStore();\n  const activeLN = lendingNetworksStore.activeLNStore;\n  const cTokenStore = activeLN?.cTokensStores.find(\n    (cTokenStore) => cTokenStore.underlyingAssetAddress === baseAssetAddress\n  );\n  return cTokenStore;\n}\n","import { makeStyles } from \"@material-ui/core\";\nimport React, { DetailedHTMLProps } from \"react\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    margin: \"0 auto\",\n    paddingRight: \"1.33rem\",\n    paddingLeft: \"1.33rem\",\n    maxWidth: \"82rem\",\n  },\n}));\n\nexport const ContentContainer = React.memo<\n  IProps &\n    DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\n>((props) => {\n  const { children, ...rest } = props;\n  const classes = useStyles();\n\n  return (\n    <div className={classes.contentContainer} {...rest}>\n      {children}\n    </div>\n  );\n});\n","// export const BRAND_MAIN_COLOR = \"#00D395\";\nexport const BRAND_MAIN_COLOR = \"#00D395\";\n// export const BRAND_MAIN_COLOR = \"#ff8906\";\n\nexport const AFFIRMATIVE_GREEN_COLOR = \"#00D395\";\nexport const DEAFFIRMATIVE_RED_COLOR = \"#f96d6d\";\n\nexport const BACKGROUND_DARK_COLOR = \"#0f0e17\";\nexport const BACKGROUND_LIGHT_COLOR = \"#fffffe\";\n\nexport const TEXT_ON_DARK = \"#fffffe\";\nexport const TEXT_ON_LIGHT = \"#2e2f3e\";\n\nexport const GRAYISH_TEXT = \"#AAB8C1\";\n","import { makeStyles, Typography, Grid, Hidden } from \"@material-ui/core\";\nimport React from \"react\";\nimport clsx from \"clsx\";\nimport { observer } from \"mobx-react\";\nimport {\n  useCryptoWalletIntegrationStore,\n  useLendingNetworksStore,\n  useModalsStore,\n} from \"../../store/storeHooks\";\nimport { ContentContainer } from \"../structure/ContentContainer\";\nimport { Link } from \"react-router-dom\";\nimport Color from \"color\";\nimport { TEXT_ON_DARK } from \"../../theme/themeConstants\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    padding: \"1rem 0\",\n    // background: \"#070A0E\",\n    backgroundColor: theme.palette.background.default,\n    minHeight: \"80px\",\n  },\n  alignedRow: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  logoLink: {\n    minWidth: 127,\n    height: 27,\n    backgroundImage: `url(${process.env.PUBLIC_URL}/images/compound-logo.svg)`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"contain\",\n    backgroundColor: \"transparent\",\n  },\n\n  // Placeholder until we will have our logo ready\n  logoLinkText: {\n    minWidth: 127,\n    height: 27,\n    fontWeight: \"bold\",\n    // color: \"white\",\n    color: theme.palette.primary.dark,\n    textDecoration: \"none\",\n    fontSize: 20,\n    // backgroundImage: `url(${process.env.PUBLIC_URL}/images/compound-logo.svg)`,\n    // backgroundRepeat: \"no-repeat\",\n    // backgroundSize: \"contain\",\n    // backgroundColor: \"transparent\",\n\n    \"&:hover\": {\n      color: theme.palette.primary.light,\n    },\n  },\n  lnLinkText: {\n    minWidth: 127,\n    height: 27,\n    color: \"rgba(256,256,256,0.5)\",\n    // color: theme.palette.primary.dark,\n    textDecoration: \"none\",\n    fontSize: 20,\n    // backgroundImage: `url(${process.env.PUBLIC_URL}/images/compound-logo.svg)`,\n    // backgroundRepeat: \"no-repeat\",\n    // backgroundSize: \"contain\",\n    // backgroundColor: \"transparent\",\n\n    \"&:hover\": {\n      color: \"white\",\n    },\n  },\n  actions: {\n    minHeight: \"3rem\",\n    justifyContent: \"flex-end\",\n    // color: \"#CFD8DC\",\n    color: TEXT_ON_DARK,\n  },\n  headerButtonLike: {\n    // border: `5px solid ${Color.rgb(theme.palette.background.default)\n    //   .lighten(0.9)\n    //   .hex()}`,\n    backgroundColor: Color.rgb(theme.palette.background.default)\n      .lighten(0.9)\n      .hex(),\n    border: `3px solid ${theme.palette.background.default}`,\n    borderRadius: \"5%\",\n    \"&:hover\": {\n      borderColor: Color.rgb(theme.palette.background.default)\n        .lighten(0.9)\n        .hex(),\n      backgroundColor: theme.palette.background.default,\n      color: theme.palette.primary.light,\n      // background: \"#1d2b38\",\n      // background: Color.rgb(theme.palette.background.default)\n      //   .lighten(0.9)\n      //   .hex(),\n    },\n  },\n  tokenBalance: {\n    // backgroundColor: \"#f25f4c\",\n    // border: \"1px solid #fffffe\",\n\n    // background: \"#141E27\",\n    // backgroundColor: Color.rgb(theme.palette.background.default)\n    //   .darken(0.1)\n    //   .hex(),\n\n    // borderRadius: \"3px\",\n    cursor: \"pointer\",\n    padding: \"0.43rem 0.665rem\",\n    display: \"flex\",\n    alignItems: \"center\",\n    letterSpacing: \"1px\",\n    fontSize: \"12px\",\n    fontWeight: 600,\n    textTransform: \"none\",\n  },\n\n  account: {\n    // background: \"#141E27\",\n    borderRadius: \"3px\",\n    cursor: \"pointer\",\n    padding: \"0.665rem\",\n    marginLeft: \"1.33rem\",\n    letterSpacing: \"1px\",\n    fontSize: \"12px\",\n    fontWeight: 600,\n    textTransform: \"none\",\n  },\n\n  // DEV_NOTE : All of these 'icon' classes can be moved to a common file\n  tokenIcon: {\n    marginLeft: \"0.25rem\",\n    height: \"1.25rem\",\n    width: \"1.25rem\",\n    minHeight: \"1.25rem\",\n    minWidth: \"1.25rem\",\n  },\n  // TODO : CRITICAL : Make this generic\n  iconComp: {\n    backgroundImage: `url(${process.env.PUBLIC_URL}/tokens/asset_WFUSE.svg)`,\n  },\n  icon: {\n    flexShrink: 0,\n    display: \"inline-block\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\",\n    backgroundSize: \"contain\",\n    borderRadius: \"50%\",\n  },\n}));\n\nexport const Header = observer<React.FunctionComponent<IProps>>((props) => {\n  const classes = useStyles();\n\n  const cryptoWalletConnectionStore = useCryptoWalletIntegrationStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const activeLn = lendingNetworksStore.activeLNStore;\n\n  const walletText = cryptoWalletConnectionStore.isConnectedToWallet\n    ? summarizeAddress(cryptoWalletConnectionStore.mainAddress)\n    : \"Connect\";\n\n  const hasActiveLn = !!activeLn;\n  const activeLnName = activeLn?.name;\n  const linkToLnPage = activeLn?.lnHomePage || \"/\";\n  const incentiveTokenBalance = activeLn?.compBalanceUnits || 0;\n\n  return (\n    <header className={classes.header}>\n      <ContentContainer>\n        <Grid\n          container\n          direction=\"row\"\n          alignItems=\"center\"\n          style={{\n            alignItems: \"center\",\n            alignContent: \"center\",\n          }}\n        >\n          {/* Logo */}\n          <Grid item xs={3} className={classes.alignedRow}>\n            {/* TODO : Add Project logo here */}\n            {/*<Link className={classes.logoLink} to=\"/\" />*/}\n            <Link className={classes.logoLinkText} to=\"/\">\n              Ola Finance\n            </Link>\n\n            {activeLnName && (\n              <a\n                className={classes.lnLinkText}\n                target=\"_blank\"\n                href={linkToLnPage}\n              >\n                {activeLnName}\n              </a>\n            )}\n          </Grid>\n          {/* Empty spaces */}\n          {/* DEV_NOTE : Place holder for the navigations */}\n          <Hidden xsDown>\n            <Grid item xs={6}></Grid>\n          </Hidden>\n\n          <Grid\n            className={clsx(classes.alignedRow, classes.actions)}\n            item\n            xs={9}\n            sm={3}\n          >\n            {/* Token balance */}\n            {hasActiveLn && (\n              <div\n                className={clsx([\n                  classes.headerButtonLike,\n                  classes.tokenBalance,\n                ])}\n                onClick={() => modalsStore.showIncentiveModal()}\n              >\n                {incentiveTokenBalance.toFixed(4).toLocaleString()}\n                <div\n                  className={clsx(\n                    classes.tokenIcon,\n                    classes.iconComp,\n                    classes.icon\n                  )}\n                />\n              </div>\n            )}\n\n            {/* Address */}\n            {/* DEV_NOTE : Hides on mobile to keep original UX*/}\n            <Hidden xsDown>\n              <a\n                className={clsx(classes.headerButtonLike, classes.account)}\n                onClick={() => cryptoWalletConnectionStore.askToConnect()}\n              >\n                <span />\n                {walletText}\n              </a>\n            </Hidden>\n          </Grid>\n        </Grid>\n      </ContentContainer>\n    </header>\n  );\n});\n\n/**\n * QuicknDirty\n */\nfunction summarizeAddress(address: string): string {\n  return `${address.substring(0, 3)}...${address.substring(\n    address.length - 3,\n    address.length\n  )}`;\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nexport const useCommonClasses = makeStyles((theme) => ({\n  mobileHide: {\n    [theme.breakpoints.down(\"xs\")]: {\n      display: \"none !important\",\n    },\n  },\n  mobileOnly: {\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none !important\",\n    },\n  },\n  label: {\n    // fontFamily: 'Haas Grot Text R',\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    color: \"#AAB8C1\",\n  },\n\n  textRight: {\n    textAlign: \"right\",\n  },\n  textCenter: {\n    textAlign: \"center\",\n  },\n  icon: {\n    flexShrink: 0,\n    display: \"inline-block\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\",\n    backgroundSize: \"contain\",\n    borderRadius: \"50%\",\n    width: \"1.8rem\",\n    height: \"1.8rem\",\n    minWidth: \"1.8rem\",\n    minHeight: \"1.8rem\",\n  },\n}));\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  panel: {\n    background: \"#fffffe\",\n    boxShadow: \"0px 2px 4px rgb(16 21 24 / 5%)\",\n    borderRadius: \"4px\",\n    // marginBottom: \"1.33rem\",\n    height: \"100%\",\n    width: \"100%\",\n  },\n}));\n\nexport const Panel = React.memo<IProps>((props) => {\n  const classes = useStyles();\n\n  return <div className={classes.panel}>{props.children}</div>;\n});\n","import React, { useMemo } from \"react\";\nimport clsx from \"clsx\";\nimport { useCommonClasses } from \"../../theme/commonClasses\";\nimport { makeStyles } from \"@material-ui/core\";\n\ninterface IProps {\n  symbol: string;\n  extraClasses?: string[];\n}\n\nconst PUBLIC_URL = process.env.PUBLIC_URL;\n\nconst useStyles = makeStyles((theme) => ({\n  token: {\n    // \"&:hover\": {\n    //   animation: \"$turn 3000ms linear\",\n    // },\n  },\n\n  \"@keyframes turn\": {\n    \"0%\": {\n      transform: \"rotateY(0deg)\",\n    },\n    // \"25%\": {\n    //   transform: \"rotateY(-180deg)\",\n    // },\n    \"50%\": {\n      transform: \"rotateY(-360deg)\",\n    },\n    // \"75%\": {\n    //   transform: \"rotateY(180deg)\",\n    // },\n    \"100%\": {\n      transform: \"rotateY(0deg)\",\n    },\n  },\n  \"@keyframes return\": {\n    \"100%\": {\n      transform: \"rotateY(0deg)\",\n    },\n  },\n}));\n\nexport const TokenIcon = React.memo<IProps>((props) => {\n  const { symbol, extraClasses } = props;\n  const classes = useStyles();\n  const commonClasses = useCommonClasses();\n\n  const classesForSpan = useMemo(() => {\n    const safeExtraClasses = extraClasses || [];\n    return clsx([commonClasses.icon, classes.token, ...safeExtraClasses]);\n  }, [classes.token, commonClasses.icon, extraClasses]);\n\n  return (\n    <span\n      className={classesForSpan}\n      style={{\n        backgroundImage: `url(${PUBLIC_URL}/tokens/asset_${symbol}.svg)`,\n        backgroundSize: \"contain\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    />\n  );\n});\n","import React, { useCallback, useMemo } from \"react\";\nimport { Grid, makeStyles, Switch } from \"@material-ui/core\";\nimport { TMarketType } from \"./types\";\nimport clsx from \"clsx\";\nimport { useCommonClasses } from \"../../../../theme/commonClasses\";\nimport { TAssetInMarketParameters } from \"../../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { TokenIcon } from \"../../../../components/icons/TokenIcon\";\nimport {\n  BRAND_MAIN_COLOR,\n  TEXT_ON_LIGHT,\n} from \"../../../../theme/themeConstants\";\nimport { observer } from \"mobx-react\";\nimport {\n  useCryptoWalletIntegrationStore,\n  useCTokenStoreByBaseAsset,\n} from \"../../../../store/storeHooks\";\nimport { Skeleton } from \"@material-ui/lab\";\n\ninterface IProps {\n  assetSummary: TAssetInMarketParameters;\n  unitsInWallet: number;\n  marketType: TMarketType;\n\n  onCollateralableChange: (\n    baseAssetAddress: string,\n    newCollaterableValue: boolean\n  ) => void;\n\n  onAssetSelected: (baseAssetAddress: string) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  // TODO : Consider making this global\n  a: {\n    color: \"inherit\",\n    letterSpacing: \"1px\",\n    // fontSize: \"12px\",\n    // fontWeight: 700,\n    textRransform: \"uppercase\",\n    textDecoration: \"none\",\n    cursor: \"pointer\",\n  },\n  asset: {\n    // display: \"flex\",\n    // alignItems: \"center\",\n    // borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    // padding: \"1.25rem 1.75rem\",\n    // fontSize: \"1rem\",\n    // fontWeight: 500,\n    // textTransform: \"capitalize\",\n    // letterSpacing: 0,\n    // transition: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    // padding: \"1.25rem 1.75rem\",\n    padding: \"1.25rem 1.75rem\",\n    borderLeft: \"2px solid transparent\",\n    paddingLeft: \"1.625rem\",\n    textTransform: \"none\",\n    fontSize: \"1rem\",\n    fontWeight: 500,\n    letterSpacing: 0,\n    transition: \"none\",\n    color: TEXT_ON_LIGHT,\n\n    \"&:hover\": {\n      borderLeft: `2px solid ${BRAND_MAIN_COLOR}`,\n      color: \"#141E27\",\n    },\n\n    height: \"6rem\",\n  },\n\n  list_icon: {\n    width: \"2.25rem\",\n    height: \"2.25rem\",\n  },\n\n  identity: {\n    alignItems: \"center\",\n  },\n\n  identity_icon: {\n    marginRight: \"1rem\",\n  },\n\n  identity_balance: {\n    flex: \"1 1\",\n    marginRight: \"0.25rem\",\n    overflow: \"hidden\",\n  },\n\n  balance: {\n    \"& > div\": {\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n    },\n  },\n\n  balanceSubtitle: {\n    display: \"block\",\n    marginTop: \"9px\",\n    color: \"#AAB8C1\",\n    fontSize: \"0.9em\",\n  },\n}));\n\nexport const AssetPanelRow = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const classes = useStyles();\n    const commonClasses = useCommonClasses();\n    const {\n      marketType,\n      assetSummary,\n      // cTokenMeta,\n      onCollateralableChange,\n      onAssetSelected,\n    } = props;\n\n    const { address } = assetSummary;\n\n    const {\n      name,\n      symbol,\n      // amountInWallet,\n      // isCollateralable,\n      // supplyApy,\n      // usdLiquidity,\n    } = assetSummary;\n\n    const cTokenStore = useCTokenStoreByBaseAsset(address);\n\n    const isCollaterable = cTokenStore?.isCollaterable;\n\n    // console.log({ supplyRatePerBlock: supplyRatePerBlock });\n\n    const borrowApy = cTokenStore?.borrowApyInPercentages || 0;\n    const supplyApy = cTokenStore?.supplyApyInPercentages || 0;\n\n    const usdCashLiquidity = cTokenStore?.cTokenCashInUSD || 0;\n    const walletBalanceInUnits =\n      cTokenStore?.accountUnderlyingBalanceInUnits || 0;\n\n    const liquidityUSDInScale = amountToSumInScale(usdCashLiquidity);\n\n    const supplyInUnits = cTokenStore?.accountSupplyInUnits || 0;\n    const borrowInUnits = cTokenStore?.accountBorrowInUnits || 0;\n\n    const isSupply = marketType === \"supply\";\n    const ApyToDisplay = isSupply ? supplyApy : borrowApy;\n    const unitsToDisplay = isSupply ? supplyInUnits : borrowInUnits;\n    const unitsText = isSupply ? \"Supplied\" : \"Borrowed\";\n    const showActionUnits = unitsToDisplay > 0;\n\n    const onCollateralSwitch = useCallback(\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        onCollateralableChange(address, event.target.checked);\n      },\n      [address, onCollateralableChange]\n    );\n\n    const onAssetInteractionRequested = useCallback(\n      (event: React.MouseEvent<HTMLAnchorElement>) => {\n        if (cTokenStore?.hasBeenInitialized) {\n          onAssetSelected(address);\n        } else {\n          console.log(`Asset interation: cTokenStore not yet initialised`);\n        }\n      },\n      [address, cTokenStore?.hasBeenInitialized, onAssetSelected]\n    );\n\n    const collateralLiquidityOrLoading = useMemo(() => {\n      const collateralOrLiquidity =\n        marketType === \"supply\" ? (\n          // <input type=\"checkbox\" />\n          //  TODO : Add a proper toggle component\n          <Switch\n            checked={isCollaterable}\n            onChange={onCollateralSwitch}\n            // Preventing toggle-click from being intercepted by the row's 'onClick'\n            onClick={(e) => e.stopPropagation()}\n          />\n        ) : (\n          <div>\n            $\n            {parseFloat(\n              liquidityUSDInScale.units.toLocaleString()\n            ).toLocaleString()}\n            {liquidityUSDInScale.scaleUnit}\n          </div>\n        );\n\n      return cTokenStore?.hasBeenInitialized ? (\n        collateralOrLiquidity\n      ) : (\n        <Skeleton animation=\"wave\" />\n      );\n    }, [\n      cTokenStore?.hasBeenInitialized,\n      isCollaterable,\n      liquidityUSDInScale.scaleUnit,\n      liquidityUSDInScale.units,\n      marketType,\n      onCollateralSwitch,\n    ]);\n\n    return (\n      <a\n        className={clsx([classes.a, classes.asset])}\n        onClick={onAssetInteractionRequested}\n      >\n        {/* Asset (+APY subtitle) */}\n        <Grid container item xs={4} sm={4} className={classes.identity}>\n          <TokenIcon\n            symbol={symbol}\n            extraClasses={[classes.identity_icon, classes.list_icon]}\n          />\n          <div className={clsx([classes.balance, classes.identity_balance])}>\n            <div>{name}</div>\n            <span\n              className={clsx([\n                commonClasses.mobileOnly,\n                classes.balanceSubtitle,\n              ])}\n            >\n              {ApyToDisplay}%\n            </span>\n          </div>\n        </Grid>\n\n        {/* APY (mobile hidden) */}\n        <Grid\n          item\n          xs={1}\n          sm={3}\n          className={clsx([commonClasses.mobileHide, commonClasses.textCenter])}\n        >\n          <div className={clsx([classes.balance])}>\n            {cTokenStore?.hasBeenInitialized ? (\n              <div>{(+ApyToDisplay.toFixed(2)).toLocaleString()}%</div>\n            ) : (\n              <Skeleton animation={\"wave\"} />\n            )}\n          </div>\n        </Grid>\n\n        {/* Wallet */}\n        <Grid item xs={4} sm={3} className={clsx([commonClasses.textCenter])}>\n          <div className={clsx([classes.balance])}>\n            <div>\n              {walletBalanceInUnits.toLocaleString()} {symbol}\n            </div>\n            {showActionUnits && (\n              <span\n                className={clsx([\n                  // commonClasses.mobileOnly,\n                  classes.balanceSubtitle,\n                ])}\n              >\n                {(+unitsToDisplay.toFixed(3)).toLocaleString()} {unitsText}\n              </span>\n            )}\n          </div>\n        </Grid>\n\n        {/* Collateral / Liquidity */}\n        <Grid item xs={4} sm={2} className={clsx([commonClasses.textRight])}>\n          <div className={clsx([classes.balance])}>\n            {collateralLiquidityOrLoading}\n          </div>\n        </Grid>\n      </a>\n    );\n  }\n);\n\ntype TNumericalScaleUnit = \"M\" | \"K\";\ntype TSumInScale = {\n  scaleUnit: TNumericalScaleUnit;\n  units: number;\n};\n\nfunction amountToSumInScale(amount: number): TSumInScale {\n  let scaleUnit: TNumericalScaleUnit = \"M\";\n  let scaleDivider = 1_000_000;\n\n  // TODO : Play with this threshold\n  if (amount < 500_000) {\n    scaleUnit = \"K\";\n    scaleDivider = 1_000;\n  }\n\n  const sumInScale: TSumInScale = {\n    scaleUnit,\n    units: amount / scaleDivider,\n  };\n\n  return sumInScale;\n}\n","import React, { FunctionComponent, SFC } from \"react\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\n\nimport clsx from \"clsx\";\nimport { TAssetInMarketGist, TMarketType } from \"./types\";\nimport { useCommonClasses } from \"../../../../theme/commonClasses\";\nimport { Panel } from \"../../../../components/panel/Panel\";\nimport { AssetPanelRow } from \"./AssetPanelRow\";\nimport { TAssetInMarketParameters } from \"../../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TCTokenMetadata } from \"../../../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { TEXT_ON_LIGHT } from \"../../../../theme/themeConstants\";\n\ninterface IProps {\n  header: string;\n  marketType: TMarketType;\n  assetsInMarket: TAssetInMarketParameters[];\n  // Symbol -> balanceInUnits\n  userBalancesInUnits: Record<string, number>;\n  marketsUserIsIn: string[];\n\n  /**\n   *  Asset 'collateral' flag toggle is clicked (user want to add/remove asset from being used as collateral)\n   */\n  onCollateralableChange: (\n    baseAssetAddress: string,\n    newCollaterableValue: boolean\n  ) => void;\n\n  /**\n   *  Asset row is clicked (user want to interact with this asset's market)\n   */\n  onAssetSelected: (baseAssetAddress: string) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  panelHeader: {\n    display: \"flex\",\n    flexFlow: \"inherit\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    fontSize: \"1.1rem\",\n    padding: \"1rem 1.75rem\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    color: TEXT_ON_LIGHT,\n  },\n  zeroMargin: {\n    margin: 0,\n  },\n  assetsList: {},\n  panelLabels: {\n    // display: \"flex\",\n    padding: \"1rem 1.75rem\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    alignItems: \"center\",\n  },\n  assets: {},\n}));\n\n// export const MarketsPanel = React.memo<IProps>((props) => {\nexport const MarketsPanel: FunctionComponent<IProps> = (props) => {\n  const classes = useStyles();\n  const commonClasses = useCommonClasses();\n  const {\n    header,\n    marketType,\n    assetsInMarket,\n    userBalancesInUnits,\n    marketsUserIsIn,\n    onCollateralableChange,\n    onAssetSelected,\n  } = props;\n\n  console.log(`Building markets panel ${header}`);\n\n  return (\n    <Panel>\n      <div className={classes.panelHeader}>\n        <h4 className={classes.zeroMargin}>{header}</h4>\n      </div>\n      <div className={classes.assetsList}>\n        <Grid container direction={\"row\"} className={classes.panelLabels}>\n          {/* Asset */}\n          <Grid item xs={4} sm={4}>\n            <label className={commonClasses.label}>Asset</label>\n          </Grid>\n\n          {/* APY */}\n          <Grid\n            className={clsx([\n              commonClasses.textCenter,\n              commonClasses.mobileHide,\n            ])}\n            item\n            xs={false}\n            sm={3}\n          >\n            <label className={clsx([commonClasses.label])}>APY</label>\n          </Grid>\n\n          {/* WALLET */}\n          <Grid className={commonClasses.textCenter} item xs={4} sm={3}>\n            <label\n              className={clsx([commonClasses.label, commonClasses.textRight])}\n            >\n              Wallet\n            </label>\n          </Grid>\n\n          {/* Collateral/Liquidity */}\n          <Grid className={commonClasses.textRight} item xs={4} sm={2}>\n            <label\n              className={clsx([commonClasses.label, commonClasses.textRight])}\n            >\n              {marketType === \"supply\" ? \"Collateral\" : \"Liquidity\"}\n            </label>\n          </Grid>\n        </Grid>\n\n        <div className={classes.assets}>\n          {assetsInMarket.map((asset) => (\n            <AssetPanelRow\n              marketType={marketType}\n              assetSummary={asset}\n              unitsInWallet={userBalancesInUnits[asset.symbol] || 0}\n              key={asset.symbol}\n              onCollateralableChange={onCollateralableChange}\n              onAssetSelected={onAssetSelected}\n            />\n          ))}\n        </div>\n      </div>\n    </Panel>\n  );\n};\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { observer } from \"mobx-react\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { SingleLNStore } from \"../../../../store/multiInstanceStores/SingleLNStore\";\nimport { MarketsPanel } from \"./MarketsPanel\";\nimport { ContentContainer } from \"../../../../components/structure/ContentContainer\";\nimport {\n  useAccountStore,\n  useActiveLendingNetworkStore,\n  useModalsStore,\n} from \"../../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TCTokenMetadata } from \"../../../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\n\nconst useStyles = makeStyles((theme) => ({\n  interfaceContainer: {\n    \"--alertHeight\": \"0px\",\n    // TODO : Understand this calculation\n    minHeight: \"calc(100vh - 82px - 23rem + 34px - var(--alertHeight))\",\n  },\n  row: {\n    display: \"flex\",\n    flexFlow: \"row wrap\",\n    marginRight: \"-0.665rem\",\n    marginLeft: \"-0.665rem\",\n  },\n  marketsColumn: {\n    flexBasis: \"100%\",\n    padding: \"0 0.665rem\",\n    // DEV_NOTE : Original : @media (min-width: 40em)\n    [theme.breakpoints.up(\"sm\")]: {\n      flexBasis: \"50%\",\n      maxWidth: \"50%\",\n    },\n\n    // Same as 'Panel'\n    marginBottom: \"1.33rem\",\n  },\n}));\n\ninterface IProps {}\nexport const MarketsSection: React.FC<IProps> = observer((props) => {\n  const classes = useStyles();\n  const [error, setError] = React.useState<string | null>(null);\n\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lnStore = useActiveLendingNetworkStore();\n\n  const onCollateralableChange = useCallback(\n    async (baseAssetAddress: string, newCollaterableValue: boolean) => {\n      modalsStore.showCollateralModal(baseAssetAddress);\n      // if (!lnStore) {\n      //   return;\n      // }\n      //\n      // // TODO : Make this tx handling better\n      // if (newCollaterableValue) {\n      //   console.log(`Entered market request - ${baseAssetAddress}`);\n      //   await lnStore.enterMarket(baseAssetAddress);\n      //   console.log(\"Entered market\");\n      // } else {\n      //   await lnStore.exitMarket(baseAssetAddress);\n      //   console.log(\"Left market\");\n      // }\n    },\n    [modalsStore]\n  );\n\n  const getPayloadForMarketInteractionModal = useCallback(\n    (baseAssetAddress: string) => {\n      if (!lnStore) {\n        return {\n          cTokenMeta: undefined,\n          assetParameters: undefined,\n        };\n      }\n      const cTokenStore = lnStore.baseAssetsToCTokenStore.get(baseAssetAddress);\n      const assetParameters = lnStore.assetsParams.find(\n        (assetParam) => assetParam.address === baseAssetAddress\n      );\n\n      if (!assetParameters) {\n        console.error(`No asset parameters found for ${baseAssetAddress}`);\n      } else if (!cTokenStore) {\n        console.error(`No cToken meta found for ${baseAssetAddress}`);\n      }\n\n      const payload: {\n        assetParameters: TAssetInMarketParameters | undefined;\n        cTokenMeta: TCTokenMetadata | undefined;\n      } = {\n        assetParameters,\n        cTokenMeta: undefined,\n      };\n\n      return payload;\n    },\n    [lnStore]\n  );\n\n  const onSupplyAssetSelected = useCallback(\n    (baseAssetAddress: string) => {\n      modalsStore.showSupplyModal(baseAssetAddress);\n    },\n    [modalsStore]\n  );\n\n  const onBorrowAssetSelected = useCallback(\n    (baseAssetAddress: string) => {\n      modalsStore.showBorrowModal(baseAssetAddress);\n    },\n    [modalsStore]\n  );\n\n  // React.useEffect(() => {\n  //   if (lendingNetworkStore && lendingNetworkStore.tokens === null) {\n  //     let cancel = false;\n  //     const fetch = async () => {\n  //       if (!cancel) {\n  //         try {\n  //           await lendingNetworkStore.loadCTokenMetadata();\n  //         } catch (e) {\n  //           setError(\n  //             `Unable to fetch the tokens data of network \"${lendingNetworkStore.id}\"`\n  //           );\n  //         }\n  //       }\n  //     };\n  //\n  //     fetch();\n  //     return () => {\n  //       cancel = true;\n  //     };\n  //   }\n  // }, [lendingNetworkStore]);\n\n  // if (lendingNetworkStore.assetsGists === null) {\n  //   return <div style={{ color: \"white\" }}>Loading tokens meta data...</div>;\n  // }\n\n  if (error) {\n    return <Typography style={{ color: \"white\" }}>Error: {error}</Typography>;\n  }\n\n  if (!lnStore) {\n    return <Typography style={{ color: \"white\" }}>Initializing...</Typography>;\n  }\n\n  return (\n    <ContentContainer>\n      <section>\n        <div className={clsx([classes.interfaceContainer, classes.row])}>\n          {/* Supply(/Withdraw) */}\n          <div className={classes.marketsColumn}>\n            <MarketsPanel\n              header={\"Supply Markets\"}\n              marketType={\"supply\"}\n              assetsInMarket={lnStore.assetsParams}\n              userBalancesInUnits={accountStore.symbolsToUnits}\n              marketsUserIsIn={lnStore.marketsUserIsIn}\n              onCollateralableChange={onCollateralableChange}\n              onAssetSelected={onSupplyAssetSelected}\n            />\n          </div>\n          {/* Borrow(/Repay) */}\n          <div className={classes.marketsColumn}>\n            <MarketsPanel\n              header={\"Borrow Markets\"}\n              marketType={\"borrow\"}\n              assetsInMarket={lnStore.assetsParams}\n              userBalancesInUnits={accountStore.symbolsToUnits}\n              marketsUserIsIn={lnStore.marketsUserIsIn}\n              onCollateralableChange={onCollateralableChange}\n              onAssetSelected={onBorrowAssetSelected}\n            />\n          </div>\n        </div>\n      </section>\n    </ContentContainer>\n  );\n});\n","import React from \"react\";\n// @ts-ignore\nimport AnimatedNumber from \"animated-number-react\";\n\ninterface IProps {\n  value: number;\n}\n\nfunction standardSumFormat(n: number) {\n  return (+n.toFixed(2)).toLocaleString();\n}\n\nexport const AnimatedNumberText = React.memo<IProps>((props) => {\n  const { value } = props;\n\n  return <AnimatedNumber value={value} formatValue={standardSumFormat} />;\n});\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { AFFIRMATIVE_GREEN_COLOR } from \"../../../../theme/themeConstants\";\nimport { AnimatedNumberText } from \"../../../../components/AnimatedNumberText/AnimatedNumberText\";\n\ninterface IProps {\n  titleText: string;\n  sum: number;\n  isSupply: boolean;\n  alignLeft: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  headline: {\n    fontSize: \"1.6rem\",\n    fontWeight: 300,\n    color: \"#ffffff\",\n    marginTop: \"0.7rem\",\n  },\n  textCenter: {\n    textAlign: \"center\",\n  },\n  textLeft: {\n    textAlign: \"left\",\n  },\n  label: {\n    // fontFamily: \"Haas Grot Text R\",\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    color: \"#AAB8C1\",\n  },\n  supply: {\n    color: AFFIRMATIVE_GREEN_COLOR,\n  },\n  borrow: {\n    color: \"#9669ED\",\n  },\n}));\n\nexport const BalanceHeadline = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { titleText, sum, isSupply, alignLeft } = props;\n\n  return (\n    <div className={alignLeft ? classes.textLeft : classes.textCenter}>\n      <label\n        className={clsx([\n          classes.label,\n          isSupply ? classes.supply : classes.borrow,\n        ])}\n      >\n        {titleText}\n      </label>\n      {/* TODO : Add the digits CSS */}\n      <div className={classes.headline}>\n        $\n        <AnimatedNumberText value={sum} />\n        {/*{sum.toLocaleString()}*/}\n      </div>\n    </div>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { useRef } from \"react\";\nimport useHover from \"@react-hook/hover\";\nimport { AFFIRMATIVE_GREEN_COLOR } from \"../../../../theme/themeConstants\";\n\ninterface IProps {\n  netApy: number;\n  totalYearlyChangeUsd: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  netApyWrapper: {\n    // TODO : decrease by 20 when in small screen\n    height: \"140px\",\n    width: \"140px\",\n    position: \"relative\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    [theme.breakpoints.down(\"xs\")]: {\n      height: \"120px\",\n      width: \"120px\",\n    },\n  },\n  netApy: {},\n  netApyDescription: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    margin: \"0.1875rem\",\n    backgroundColor: \"#070A0E\",\n    borderRadius: \"50%\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: \"0.25rem\",\n\n    \"&:hover\": {\n      backgroundColor: \"rgba(20, 30, 39, 0.98)\",\n    },\n  },\n  netApyDescription_Active: {\n    backgroundColor: \"rgba(20, 30, 39, 0.98)\",\n  },\n  label: {\n    textAlign: \"center\",\n    color: \"#657786\",\n\n    // fontFamily: \"Haas Grot Text R\",\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    // color: \"#AAB8C1\",\n  },\n  label_active: {\n    color: \"white\",\n  },\n  headline: {\n    fontWeight: 300,\n    color: \"#ffffff\",\n    marginTop: \"0.7rem\",\n  },\n  headline_inactive: {\n    fontSize: \"1.6rem\",\n  },\n  headline_active: {\n    color: \"#F9FAFB\",\n    fontSize: \"12px\",\n    textAlign: \"center\",\n  },\n}));\n\nexport const NetApy: React.FC<IProps> = (props) => {\n  const classes = useStyles();\n  const { netApy, totalYearlyChangeUsd } = props;\n\n  // TODO : Add 'click detect' to keep same behavior on mobile\n  const hoverTargetRef = useRef<HTMLDivElement>(null);\n  const isHovering = useHover(hoverTargetRef);\n\n  const isEarning = netApy > 0;\n  const apyOrApr = isEarning ? \"APY\" : \"APR\";\n  const apyDirectionMessage = `Net ${apyOrApr}`;\n  const earnedOrPaid = isEarning ? \"earned interest\" : \"paid interest\";\n\n  const netApyStringified = (+netApy.toFixed(2)).toLocaleString();\n  const totalYearlyChangeUsdStringified = (+totalYearlyChangeUsd.toFixed(\n    2\n  )).toLocaleString();\n\n  console.log({ totalYearlyChangeUsdStringified });\n\n  const labelText = isHovering\n    ? `${totalYearlyChangeUsdStringified} $`\n    : apyDirectionMessage;\n  const headlineText = isHovering\n    ? // ? \"Interest earned and paid, plus TOKEN\"\n      `Anticipated yearly ${earnedOrPaid}`\n    : `${netApyStringified}%`;\n\n  return (\n    <div className={classes.netApyWrapper} ref={hoverTargetRef}>\n      <div className={classes.netApy}>\n        <svg viewBox=\"0 0 140 140\" width=\"100%\">\n          <path\n            d=\"M 70 70 L  70 0 A 70 70 0 0 1 70 0 Z\"\n            stroke=\"transparent\"\n            fill=\"#9669ED\"\n          />\n          <path\n            d=\"M 70 70 L  70 0 A 70 70 0 1 1 69.99956017702848 1.381744718642608e-9 Z\"\n            stroke=\"transparent\"\n            fill={AFFIRMATIVE_GREEN_COLOR}\n          />\n        </svg>\n      </div>\n      <div\n        className={clsx([\n          classes.netApyDescription,\n          isHovering ? classes.netApyDescription_Active : false,\n        ])}\n      >\n        <label\n          className={clsx([\n            classes.label,\n            isHovering ? classes.label_active : false,\n          ])}\n        >\n          {labelText}\n        </label>\n        <div\n          className={clsx([\n            classes.headline,\n            isHovering ? classes.headline_active : classes.headline,\n          ])}\n        >\n          {headlineText}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Grid, Hidden, makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { BalanceHeadline } from \"./BalanceHeadline\";\nimport { NetApy } from \"./NetApy\";\n\ninterface IProps {\n  supplyBalanceUsd: number;\n  borrowBalanceUsd: number;\n  netApy: number;\n  totalYearlyChangeUsd: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  content: {},\n  row: {\n    marginRight: \"-0.665rem\",\n    marginLeft: \"-0.665rem\",\n  },\n  alignMiddle: {\n    alignItems: \"center\",\n  },\n  textCenter: {\n    textAlign: \"center\",\n  },\n  column: {\n    padding: \"0 0.665rem\",\n  },\n}));\n\nexport const BalancesAndApy = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    borrowBalanceUsd,\n    supplyBalanceUsd,\n    netApy,\n    totalYearlyChangeUsd,\n  } = props;\n\n  return (\n    <div className={classes.content}>\n      {/* Large */}\n      <Hidden xsDown>\n        <Grid\n          container\n          direction={\"row\"}\n          className={clsx([classes.row, classes.alignMiddle])}\n        >\n          <Grid\n            className={classes.column}\n            item\n            container\n            direction={\"column\"}\n            xs={5}\n          >\n            <BalanceHeadline\n              sum={supplyBalanceUsd}\n              titleText={\"Supply balance\"}\n              isSupply={true}\n              alignLeft={false}\n            />\n          </Grid>\n\n          <Grid\n            className={classes.column}\n            container\n            item\n            direction={\"column\"}\n            xs={2}\n          >\n            <NetApy\n              netApy={netApy}\n              totalYearlyChangeUsd={totalYearlyChangeUsd}\n            />\n          </Grid>\n\n          <Grid\n            className={classes.column}\n            container\n            item\n            direction={\"column\"}\n            xs={5}\n          >\n            <BalanceHeadline\n              sum={borrowBalanceUsd}\n              titleText={\"Borrow balance\"}\n              isSupply={false}\n              alignLeft={false}\n            />\n          </Grid>\n        </Grid>\n      </Hidden>\n\n      {/* Mobile */}\n      <Hidden smUp>\n        <Grid\n          container\n          direction={\"row\"}\n          className={clsx([classes.row, classes.alignMiddle])}\n        >\n          <Grid className={classes.column} item xs={4}>\n            <NetApy\n              netApy={netApy}\n              totalYearlyChangeUsd={totalYearlyChangeUsd}\n            />\n          </Grid>\n\n          <Grid className={classes.column} item xs={8}>\n            <BalanceHeadline\n              sum={0}\n              titleText={\"Supply balance\"}\n              isSupply={true}\n              alignLeft={true}\n            />\n            <BalanceHeadline\n              sum={0}\n              titleText={\"Borrow balance\"}\n              isSupply={false}\n              alignLeft={true}\n            />\n          </Grid>\n        </Grid>\n      </Hidden>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\n\nimport clsx from \"clsx\";\nimport { AFFIRMATIVE_GREEN_COLOR } from \"../../../../theme/themeConstants\";\nimport { AnimatedNumberText } from \"../../../../components/AnimatedNumberText/AnimatedNumberText\";\n\ninterface IProps {\n  usedBorrowPercentage: number;\n  collateralPotentialInUSD: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  limitBar: {\n    display: \"flex\",\n    marginTop: \"3.25rem\",\n  },\n  label: {\n    // fontFamily: \"Haas Grot Text R\",\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    color: \"#AAB8C1\",\n  },\n  limitBarLabel: {\n    color: \"#657786\",\n    // marginTop: \"0.7rem\",\n    // marginRight: \"0.625rem\",\n    marginTop: \"0.7rem\",\n    marginRight: \"0.625rem\",\n    \"&:last-of-type\": {\n      marginRight: 0,\n      marginLeft: \"0.625rem\",\n    },\n  },\n  progressBarWrapper: {\n    position: \"relative\",\n    flex: \"1 1\",\n  },\n  progress_bar_green: {\n    display: \"flex\",\n    backgroundColor: AFFIRMATIVE_GREEN_COLOR,\n  },\n  progress: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: \"1 1\",\n    height: \"5px\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    backgroundColor: \"rgba(40, 49, 55, 0.1)\",\n    borderRadius: \"100px\",\n    marginTop: \"1rem\",\n  },\n  dark_clear: {\n    background: \"rgba(54, 61, 68, 0.5)\",\n  },\n  thin: {\n    height: \"3px\",\n  },\n  progress_bar_percent_label: {\n    display: \"inline-block\",\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    width: \"100%\",\n  },\n  p: {\n    position: \"relative\",\n    float: \"right\",\n    marginRight: \"-0.7rem\",\n    color: \"#ffffff\",\n    padding: \"0.3rem 0.3rem 0.25rem 0.25rem\",\n    backgroundColor: \"#070A0E\",\n  },\n  small: {\n    fontSize: \"12px\",\n  },\n  progress_bar_hover_space: {\n    display: \"inline-block\",\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    width: \"100%\",\n    height: \"10px\",\n    marginTop: \"1rem\",\n  },\n}));\n\nexport const BorrowLimitBar = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { usedBorrowPercentage, collateralPotentialInUSD } = props;\n\n  // TODO : Add tooltip\n\n  return (\n    <div className={classes.limitBar}>\n      <label className={clsx([classes.label, classes.limitBarLabel])}>\n        Borrow Limit (<AnimatedNumberText value={usedBorrowPercentage} />\n        %)\n      </label>\n      <div className={classes.progressBarWrapper}>\n        {/*<div className=\"progress dark-clear thin\">*/}\n        <div\n          className={clsx([classes.progress, classes.dark_clear, classes.thin])}\n        >\n          <div\n            role=\"progressbar\"\n            aria-valuemin={0}\n            aria-valuemax={100}\n            className={classes.progress_bar_green}\n            style={{ width: `${usedBorrowPercentage}%` }}\n          />\n        </div>\n\n        <div className={classes.progress_bar_percent_label}>\n          <div\n            style={{\n              minWidth: \"1%\",\n              maxWidth: \"99%\",\n              width: `${usedBorrowPercentage}%`,\n            }}\n          >\n            {/*<p className={clsx([classes.p, classes.small])}>*/}\n            {/*  {usedBorrowPercentage.toFixed(2)}%*/}\n            {/*</p>*/}\n          </div>\n        </div>\n\n        <div className={classes.progress_bar_hover_space}></div>\n      </div>\n      <label className={clsx([classes.label, classes.limitBarLabel])}>\n        $\n        <AnimatedNumberText value={collateralPotentialInUSD} />\n        {/*{\" \"}*/}\n        {/*$ {collateralPotentialInUSD.toFixed(2)}*/}\n      </label>\n    </div>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { BalancesAndApy } from \"./BalancesAndApy\";\nimport { BorrowLimitBar } from \"./BorrowLimitBar\";\n\ninterface IProps {\n  supplyBalanceUsd: number;\n  borrowBalanceUsd: number;\n  netApy: number;\n  totalYearlyChangeUsd: number;\n\n  // Borrow limit\n  usedBorrowPercentage: number;\n  collateralPotentialInUSD: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  balancesTotal: {\n    position: \"relative\",\n    maxWidth: \"60em\",\n    margin: \"0 auto\",\n    [theme.breakpoints.down(\"xs\")]: {\n      margin: \"0 1.33rem\",\n    },\n  },\n}));\n\nexport const BalancesTotal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n\n  const {\n    supplyBalanceUsd,\n    netApy,\n    totalYearlyChangeUsd,\n    borrowBalanceUsd,\n    usedBorrowPercentage,\n    collateralPotentialInUSD,\n  } = props;\n\n  return (\n    <div className={classes.balancesTotal}>\n      <BalancesAndApy\n        netApy={netApy}\n        totalYearlyChangeUsd={totalYearlyChangeUsd}\n        supplyBalanceUsd={supplyBalanceUsd}\n        borrowBalanceUsd={borrowBalanceUsd}\n      />\n      <BorrowLimitBar\n        usedBorrowPercentage={usedBorrowPercentage}\n        collateralPotentialInUSD={collateralPotentialInUSD}\n      />\n    </div>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { BalancesTotal } from \"./BalancesTotal\";\nimport { useActiveLendingNetworkStore } from \"../../../../store/storeHooks\";\nimport { observer } from \"mobx-react\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  hero: {\n    // background: \"#070A0E\",\n    backgroundColor: theme.palette.background.default,\n    marginBottom: \"-3.75rem\",\n    padding: \"1.2635rem 0 7.315rem\",\n  },\n}));\n\nexport const BorrowOverview = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const classes = useStyles();\n\n    const lnStore = useActiveLendingNetworkStore();\n\n    const supplyBalanceUsd = lnStore?.totalAccountSupplyBalanceUsd || 0;\n    const borrowBalanceUsd = lnStore?.totalAccountBorrowBalanceUsd || 0;\n    const netApy = lnStore?.netApy || 0;\n    const totalYearlyChangeUsd = lnStore?.totalYearlyChangeUsd || 0;\n    const collateralPotentialInUSD = lnStore?.collateralPotentialInUSD || 0;\n    const usedBorrowPercentage = lnStore?.usedBorrowPercentage || 0;\n\n    return (\n      <section className={clsx(classes.hero)}>\n        <BalancesTotal\n          supplyBalanceUsd={supplyBalanceUsd}\n          borrowBalanceUsd={borrowBalanceUsd}\n          netApy={netApy}\n          totalYearlyChangeUsd={totalYearlyChangeUsd}\n          usedBorrowPercentage={usedBorrowPercentage}\n          collateralPotentialInUSD={collateralPotentialInUSD}\n        />\n      </section>\n    );\n  }\n);\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { SingleLNStore } from \"../../../store/multiInstanceStores/SingleLNStore\";\nimport { MarketsSection } from \"./markets/MarketsSection\";\nimport { BorrowOverview } from \"./overview/BorrowOverview\";\nimport { useActiveLendingNetworkStore } from \"../../../store/storeHooks\";\n\ninterface IProps {}\n\nexport const MainLendingNetworkTab = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    return (\n      <>\n        <BorrowOverview />\n        <MarketsSection />\n      </>\n    );\n  }\n);\n","import React from \"react\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\n\nexport type TModalFooterMessagePayload = {\n  title: string;\n  tokenAmount: number;\n  tokenSymbol?: string;\n};\n\ninterface IProps extends TModalFooterMessagePayload {}\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  title: {\n    // fontWeight: \"bolder\",\n  },\n}));\n\nexport const ModalFooter = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { tokenSymbol, tokenAmount, title } = props;\n\n  return (\n    <div className={classes.footer}>\n      <Typography className={classes.title}>{title}</Typography>\n      <Typography>\n        {tokenAmount.toLocaleString()} {tokenSymbol}\n      </Typography>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { Button, makeStyles } from \"@material-ui/core\";\n\ninterface IProps {\n  text: string;\n  onClick: () => void;\n  disabled?: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({}));\n\nexport const ModalActionButton = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { text, onClick, disabled } = props;\n\n  console.log(\"Building button\");\n\n  return (\n    <Button\n      variant={\"contained\"}\n      fullWidth\n      disabled={disabled}\n      onClick={onClick}\n      color={\"primary\"}\n    >\n      {text}\n    </Button>\n  );\n});\n","import React from \"react\";\nimport {\n  Collapse,\n  Fade,\n  Grow,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { TokenIcon } from \"../../../../icons/TokenIcon\";\nimport { AnimatedNumberText } from \"../../../../AnimatedNumberText/AnimatedNumberText\";\n\nexport type TRatesRow = {\n  label: string;\n  value: number;\n  valuePrefix?: string;\n  valueSuffix?: string;\n  tokenSymbol?: string;\n\n  // Predicted value\n  displayPredictedValues?: boolean;\n  predictedValue?: number;\n};\n\ninterface IProps {\n  title: string;\n  subTitle?: string;\n\n  rateRows: TRatesRow[];\n\n  // Styling\n  bottomBorder?: boolean;\n}\n\nconst GRAYISH_TEXT = \"#AAB8C1\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    // alignItems: \"stretch\",\n  },\n\n  rateRow: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"start\",\n    alignItems: \"center\",\n    padding: \"0.5rem\",\n  },\n\n  bottomBorder: {\n    borderBottom: \"1px solid #CCD6DD\",\n  },\n  heavyBottomBorder: {\n    borderBottom: \"1px solid rgb(20, 30, 39)\",\n  },\n  symbolIcon: {\n    marginRight: \"0.25rem\",\n  },\n  labelText: {\n    // Push to the right\n    color: GRAYISH_TEXT,\n  },\n  valueText: {\n    // Push to the right\n    // marginLeft: \"auto\",\n    color: theme.palette.text.primary,\n  },\n}));\n\nexport const BaseRates = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { title, subTitle, rateRows, bottomBorder } = props;\n\n  const arrowText = \"->\";\n\n  return (\n    <div\n      className={clsx([\n        classes.container,\n        bottomBorder ? classes.heavyBottomBorder : null,\n      ])}\n    >\n      <Typography>{title}</Typography>\n      {subTitle && <Typography variant={\"caption\"}>{subTitle}</Typography>}\n      {rateRows.map((rateRow, index) => {\n        const isLast = index === rateRows.length;\n        const predictedValue = rateRow?.predictedValue || 0;\n\n        return (\n          <div\n            className={clsx([\n              classes.rateRow,\n              isLast ? null : classes.bottomBorder,\n            ])}\n            key={`${rateRow.tokenSymbol}_${rateRow.label}`}\n          >\n            {rateRow.tokenSymbol && (\n              <TokenIcon\n                symbol={rateRow.tokenSymbol}\n                extraClasses={[classes.symbolIcon]}\n              />\n            )}\n            <Typography className={classes.labelText}>\n              {rateRow.label}\n            </Typography>\n            <div></div>\n            <Typography\n              className={classes.valueText}\n              style={{ marginLeft: \"auto\" }}\n            >\n              {(+rateRow.value.toFixed(2)).toLocaleString()}\n              {\"  \"}\n              {!rateRow.displayPredictedValues && rateRow.valueSuffix}\n            </Typography>\n\n            {rateRow.displayPredictedValues && (\n              <>\n                <Typography className={classes.valueText}>\n                  {\"   \"}\n                  {arrowText}\n                  {/*{rateRow.valuePrefix}*/}\n                  {(+predictedValue.toFixed(2)).toLocaleString()}\n                  {\"  \"}\n                  {rateRow.valueSuffix}\n                </Typography>\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import React, { useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { BaseRates, TRatesRow } from \"./BaseRates\";\n\ninterface IProps {\n  actionName: string;\n  assetSymbol: string;\n  assetSupplyApy: number;\n  distributionAssetSymbol: string;\n  distributionAssetApy: number;\n}\n\nexport const ActionRates = React.memo<IProps>((props) => {\n  const {\n    actionName,\n    assetSymbol,\n    assetSupplyApy,\n    distributionAssetSymbol,\n    distributionAssetApy,\n  } = props;\n\n  const rateRows = useMemo<TRatesRow[]>(() => {\n    const firstRow: TRatesRow = {\n      label: `${actionName} APY`,\n      tokenSymbol: assetSymbol,\n      value: assetSupplyApy,\n      valueSuffix: \"%\",\n    };\n    const secondRow: TRatesRow = {\n      label: \"Distribution APY\",\n      tokenSymbol: distributionAssetSymbol,\n      value: distributionAssetApy,\n      valueSuffix: \"%\",\n    };\n\n    return [firstRow, secondRow];\n  }, [\n    actionName,\n    assetSupplyApy,\n    assetSymbol,\n    distributionAssetApy,\n    distributionAssetSymbol,\n  ]);\n\n  return <BaseRates title={`${actionName} Rates`} rateRows={rateRows} />;\n});\n","import React, { useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { BaseRates, TRatesRow } from \"./BaseRates\";\n\ninterface IProps {\n  borrowLimitUsd: number;\n  borrowLimitUsedPercentage: number;\n  predictedBorrowLimitUsd: number;\n  predictedBorrowLimitPercentage: number;\n  displayPredictedValues?: boolean;\n  note?: string;\n}\n\nexport const BorrowLimitRates = React.memo<IProps>((props) => {\n  const {\n    borrowLimitUsd,\n    borrowLimitUsedPercentage,\n    predictedBorrowLimitUsd,\n    predictedBorrowLimitPercentage,\n    displayPredictedValues,\n    note,\n  } = props;\n\n  const rateRows = useMemo<TRatesRow[]>(() => {\n    const firstRow: TRatesRow = {\n      label: `Borrow Limit`,\n      value: borrowLimitUsd,\n      valueSuffix: \"$\",\n      displayPredictedValues: displayPredictedValues,\n      predictedValue: predictedBorrowLimitUsd,\n    };\n    const secondRow: TRatesRow = {\n      label: \"Borrow Limit Used\",\n      value: borrowLimitUsedPercentage,\n      valueSuffix: \"%\",\n      displayPredictedValues: displayPredictedValues,\n      predictedValue: predictedBorrowLimitPercentage,\n    };\n\n    return [firstRow, secondRow];\n  }, [\n    borrowLimitUsd,\n    borrowLimitUsedPercentage,\n    displayPredictedValues,\n    predictedBorrowLimitPercentage,\n    predictedBorrowLimitUsd,\n  ]);\n\n  const title = \"Borrow Limit\";\n  const subTitle = note;\n\n  return (\n    <BaseRates\n      title={title}\n      subTitle={subTitle}\n      rateRows={rateRows}\n      bottomBorder\n    />\n  );\n});\n","import React from \"react\";\nimport {\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { TokenIcon } from \"../../icons/TokenIcon\";\nimport { BRAND_MAIN_COLOR, GRAYISH_TEXT } from \"../../../theme/themeConstants\";\nimport { ActionRates } from \"../MarketInteractionModal/base/rates/ActionRates\";\nimport { BorrowLimitRates } from \"../MarketInteractionModal/base/rates/BorrowLimitRates\";\nimport { ModalActionButton } from \"../MarketInteractionModal/base/ModalActionButton\";\nimport { ModalFooter } from \"../MarketInteractionModal/base/ModalFooter\";\n\nexport type TTxWaitingStage = \"USER_APPROVAL\" | \"CONFIRMATION\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n\n  txWaitingStage: TTxWaitingStage;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  txWaitingPanel: {\n    position: \"relative\",\n    width: \"30rem\",\n    maxWidth: \"100%\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {\n    fontWeight: \"bold\",\n  },\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  messageContainer: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    textAlign: \"center\",\n\n    color: GRAYISH_TEXT,\n  },\n\n  tabBody: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    backgroundColor: \"#ffffff\",\n  },\n}));\n\nexport const TxWaitingModal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { open, closeModal, txWaitingStage } = props;\n\n  const isWaitingForUserApproval = txWaitingStage === \"USER_APPROVAL\";\n  const isWaitingForTxConfirmation = txWaitingStage === \"CONFIRMATION\";\n  const title = isWaitingForUserApproval\n    ? \"Please confirm the transaction\"\n    : \"Waiting for the transaction to be mined\";\n\n  const message = isWaitingForUserApproval\n    ? \"Please approve the tx in your wallet.\"\n    : \"This might take a few moments\";\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.txWaitingPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h6\"} className={classes.title}>\n              {title}\n            </Typography>\n          </div>\n\n          <div className={classes.messageContainer}>\n            <Typography>{message}</Typography>\n          </div>\n\n          {/* Tab Body */}\n          {/*  <div className={classes.tabBody}>*/}\n          {/*  //   /!* Borrow limit rates *!/*/}\n          {/*  //   <BorrowLimitRates*/}\n          {/*  //     borrowLimitUsd={currentBorrowLimit || 0}*/}\n          {/*  //     borrowLimitUsedPercentage={usedBorrowLimitPercentage || 0}*/}\n          {/*  //     predictedBorrowLimitPercentage={*/}\n          {/*  //       usedBorrowLimitPercentageAfterChange || 0*/}\n          {/*  //     }*/}\n          {/*  //     predictedBorrowLimitUsd={borrowLimitAfterChange || 0}*/}\n          {/*  //     displayPredictedValues={showPredictedBorrowLimits}*/}\n          {/*  //   />*/}\n          {/*  //*/}\n          {/*  /!*  <br />*!/*/}\n          {/*  /!*  <br />*!/*/}\n\n          {/*  /!*  /!* Action button *!/*!/*/}\n          {/*  /!*  <ModalActionButton*!/*/}\n          {/*  /!*    onClick={actionButtonOnClick}*!/*/}\n          {/*  /!*    text={actionButtonText}*!/*/}\n          {/*  /!*    disabled={!actionButtonActive}*!/*/}\n          {/*  /!*  />*!/*/}\n          {/*  /!*</div>*!/*/}\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","import React, { ReactNode, useMemo } from \"react\";\nimport {\n  Button,\n  Collapse,\n  Fade,\n  Grid,\n  Grow,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n  Zoom,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport clsx from \"clsx\";\nimport { TokenIcon } from \"../../../icons/TokenIcon\";\nimport { IReactComponent } from \"mobx-react/src/types/IReactComponent\";\nimport { ModalFooter, TModalFooterMessagePayload } from \"./ModalFooter\";\nimport { ModalActionButton } from \"./ModalActionButton\";\nimport { ActionRates } from \"./rates/ActionRates\";\nimport { BRAND_MAIN_COLOR } from \"../../../../theme/themeConstants\";\nimport { BorrowLimitRates } from \"./rates/BorrowLimitRates\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../../txWaitingModal/TxWaitingModal\";\n\nexport type TZeroOrOne = 0 | 1;\n\nexport interface IMarketModalCommonStatePayload {\n  // Tabs\n  currentTabIndex: TZeroOrOne;\n  onTabIndexChange: (newIndex: TZeroOrOne) => void;\n  tab0Title: string;\n  tab1Title: string;\n\n  // Assets\n  actionAssetSymbol: string;\n  actionAssetName: string;\n  distributionAssetSymbol: string;\n\n  // Borrow Limit (optional)\n  currentBorrowLimit?: number;\n  usedBorrowLimitPercentage?: number;\n\n  // TX waiting\n  waitingForUserApproval?: boolean;\n  waitingForTxConfirmation?: boolean;\n}\n\nexport interface IMarketModalPerTabStatePayload {\n  // Message or input component\n  messageOrInput: ReactNode;\n  showInputActionButton: boolean;\n  inputActionButtonActive: boolean;\n  inputActionButtonText: string;\n  onInputActionButtonPressed?: () => void;\n\n  // Action Rates\n  actionName: string;\n  actionApy: number;\n  distributionApy: number;\n\n  // Borrow Limit (optional)\n  showBorrowLimit?: boolean;\n  showPredictedBorrowLimits?: boolean;\n  borrowLimitAfterChange?: number;\n  usedBorrowLimitPercentageAfterChange?: number;\n  borrowLimitNote?: string;\n\n  // Action button\n  actionButtonActive: boolean;\n  actionButtonText: string;\n  actionButtonDisabledText?: string;\n  actionButtonOnClick: () => void;\n\n  // Footer\n  footerMessagesPayloads: TModalFooterMessagePayload[];\n  // footerTitle: string | string[];\n  // footerTokenAmount: number;\n}\n\n// DEV_NOTE : To make it easier to build in parent components\nexport interface IMarketModalStatePayload\n  extends IMarketModalCommonStatePayload,\n    IMarketModalPerTabStatePayload {}\n\ninterface IProps extends IMarketModalStatePayload {\n  open: boolean;\n  closeModal: () => void;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  // paper: {\n  //   backgroundColor: theme.palette.background.paper,\n  //   // border: \"2px solid #000\",\n  //   boxShadow: theme.shadows[5],\n  //   padding: theme.spacing(20, 4, 3),\n  // },\n  marketInteractionPanel: {\n    position: \"relative\",\n    width: \"25.5rem\",\n    maxWidth: \"100%\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {},\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  tabBody: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    backgroundColor: \"#ffffff\",\n  },\n}));\n\nexport const MarketInteractionModal = React.memo<IProps>((props) => {\n  const {\n    open,\n    closeModal,\n\n    // Input/message\n    messageOrInput,\n    inputActionButtonText,\n    onInputActionButtonPressed,\n    showInputActionButton,\n    inputActionButtonActive,\n\n    // Assets\n    actionAssetSymbol,\n    actionAssetName,\n    distributionAssetSymbol,\n\n    // Tabs\n    currentTabIndex,\n    onTabIndexChange,\n    tab0Title,\n    tab1Title,\n\n    // Action Rates\n    actionName,\n    actionApy,\n    distributionApy,\n\n    // Borrow Limits (Optional)\n    showBorrowLimit,\n    showPredictedBorrowLimits,\n    currentBorrowLimit,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentage,\n    usedBorrowLimitPercentageAfterChange,\n    borrowLimitNote,\n\n    // Action button\n    actionButtonActive,\n    actionButtonText,\n    actionButtonDisabledText,\n    actionButtonOnClick,\n\n    // Footer\n    footerMessagesPayloads,\n\n    // TX Waiting\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n  } = props;\n\n  const classes = useStyles();\n\n  const formattedMessages = useMemo(() => {}, []);\n\n  if (waitingForTxConfirmation || waitingForUserApproval) {\n    const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n      ? \"CONFIRMATION\"\n      : \"USER_APPROVAL\";\n\n    return (\n      <TxWaitingModal\n        open={open}\n        closeModal={closeModal}\n        txWaitingStage={txWaitingStage}\n      />\n    );\n  }\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.marketInteractionPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Quick-n-Dirty Market icon */}\n          <TokenIcon\n            symbol={actionAssetSymbol}\n            extraClasses={[classes.tokenIcon, classes.upperLeftCorner]}\n          />\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h5\"} className={classes.title}>\n              {actionAssetName}\n            </Typography>\n          </div>\n\n          {/* Input or message */}\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {messageOrInput}\n\n            {showInputActionButton && (\n              <Button\n                color={\"primary\"}\n                style={{ marginRight: \"1.5rem\", maxHeight: \"3rem\" }}\n                variant={\"outlined\"}\n                onClick={onInputActionButtonPressed}\n                disabled={!inputActionButtonActive}\n              >\n                <Typography variant={\"body2\"}>\n                  {inputActionButtonText}\n                </Typography>\n              </Button>\n            )}\n          </div>\n\n          {/* Tabs */}\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n            }}\n          >\n            <div\n              style={{\n                flex: 1,\n                textAlign: \"center\",\n                borderBottom:\n                  currentTabIndex === 0\n                    ? `2px solid ${BRAND_MAIN_COLOR}`\n                    : \"none\",\n              }}\n            >\n              <Button fullWidth onClick={() => onTabIndexChange(0)}>\n                <Typography>{tab0Title}</Typography>\n              </Button>\n            </div>\n            <div\n              style={{\n                flex: 1,\n                textAlign: \"center\",\n                borderBottom:\n                  currentTabIndex === 1\n                    ? `2px solid ${BRAND_MAIN_COLOR}`\n                    : \"none\",\n              }}\n            >\n              <Button fullWidth onClick={() => onTabIndexChange(1)}>\n                <Typography>{tab1Title}</Typography>\n              </Button>\n            </div>\n          </div>\n\n          {/* Tab Body */}\n          <div className={classes.tabBody}>\n            {/* Modal action rates */}\n            <ActionRates\n              actionName={actionName}\n              assetSupplyApy={actionApy}\n              assetSymbol={actionAssetSymbol}\n              distributionAssetApy={distributionApy}\n              distributionAssetSymbol={distributionAssetSymbol}\n            />\n            <br />\n\n            {/* Borrow limit rates */}\n            {showBorrowLimit && (\n              <>\n                <br />\n                <BorrowLimitRates\n                  borrowLimitUsd={currentBorrowLimit || 0}\n                  borrowLimitUsedPercentage={usedBorrowLimitPercentage || 0}\n                  predictedBorrowLimitPercentage={\n                    usedBorrowLimitPercentageAfterChange || 0\n                  }\n                  predictedBorrowLimitUsd={borrowLimitAfterChange || 0}\n                  displayPredictedValues={showPredictedBorrowLimits}\n                  note={borrowLimitNote}\n                />\n                <br />\n              </>\n            )}\n\n            <br />\n            {/* Action button */}\n            <ModalActionButton\n              onClick={actionButtonOnClick}\n              text={\n                actionButtonActive || !actionButtonDisabledText\n                  ? actionButtonText\n                  : actionButtonDisabledText\n              }\n              disabled={!actionButtonActive}\n            />\n\n            <br />\n            <br />\n\n            {/* DEV_NOTE : Footer inside of body to keep same padding easily */}\n            {footerMessagesPayloads.map((footerMessagesPayload) => (\n              <>\n                <ModalFooter\n                  key={footerMessagesPayload.title}\n                  title={footerMessagesPayload.title}\n                  tokenAmount={footerMessagesPayload.tokenAmount}\n                  tokenSymbol={footerMessagesPayload.tokenSymbol}\n                />\n                <br key={footerMessagesPayload.title} />\n              </>\n            ))}\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","// DEV_NOTE : Taken from typeless library 'eth-json-rpc-errors';\nexport const JSON_RPC_ERROR_CODES = {\n  rpc: {\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603,\n  },\n  provider: {\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n  },\n};\n","import { ContractTransaction } from \"ethers\";\nimport { useCallback, useState } from \"react\";\nimport { JSON_RPC_ERROR_CODES } from \"../../../constants/ethereumErrorCodes\";\n\nexport type TTxCreatingFunction = () =>\n  | Promise<ContractTransaction>\n  | undefined;\n\nexport function useTxWaitingLogic(\n  txCreatingFunction: TTxCreatingFunction,\n  closeModal: () => void\n) {\n  const {\n    waitingForTxConfirmation,\n    waitingForUserApproval,\n    setWaitingForTxConfirmation,\n    setWaitingForUserApproval,\n  } = useTxWaitingStateExplicit();\n\n  const wrappedTxBuildingFunction = useTxWaitingLogicExplicit(\n    txCreatingFunction,\n    closeModal,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation\n  );\n\n  return {\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n    wrappedTxBuildingFunction,\n  };\n}\n\nexport function useTxWaitingStateExplicit() {\n  const [waitingForUserApproval, setWaitingForUserApproval] = useState(false);\n  const [waitingForTxConfirmation, setWaitingForTxConfirmation] = useState(\n    false\n  );\n\n  return {\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation,\n  };\n}\n\nexport function useTxWaitingLogicExplicit(\n  txCreatingFunction: TTxCreatingFunction,\n  closeModal: () => void,\n  setWaitingForUserApproval: (val: boolean) => void,\n  setWaitingForTxConfirmation: (val: boolean) => void\n) {\n  const wrappedTxBuildingFunction = useCallback(async () => {\n    let contractTx: ContractTransaction | undefined;\n\n    // We are going to ask the user to approve tx\n    setWaitingForUserApproval(true);\n\n    try {\n      contractTx = await txCreatingFunction();\n\n      // We are after user approval, let's wait for the tx to be mined\n      setWaitingForTxConfirmation(true);\n\n      const receipt = await contractTx?.wait();\n      console.log(receipt);\n    } catch (e) {\n      if (e.code === JSON_RPC_ERROR_CODES.provider.userRejectedRequest) {\n        // User denied tx\n        console.log(\"User denied tx\");\n      } else {\n        // TODO : Have a more user-friendly error communication.\n        // DEV_NOTE :\n        closeModal();\n        throw e;\n      }\n    } finally {\n      // No matter what, we ain't waiting after this line\n      setWaitingForUserApproval(false);\n      setWaitingForTxConfirmation(false);\n    }\n  }, [\n    closeModal,\n    setWaitingForTxConfirmation,\n    setWaitingForUserApproval,\n    txCreatingFunction,\n  ]);\n\n  return wrappedTxBuildingFunction;\n}\n","import {\n  useAccountStore,\n  useLendingNetworksStore,\n  useModalsStore,\n  useSystemStore,\n} from \"../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { SingleCTokenStore } from \"../../../store/multiInstanceStores/SingleCTokenStore\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { TZeroOrOne } from \"./base/MarketInteractionModal\";\nimport { ethers } from \"ethers\";\nimport { useTxWaitingLogicExplicit } from \"../txWaitingModal/txWaitingHooks\";\n\nexport function useMarketInteractionModalBase() {\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const systemStore = useSystemStore();\n  const activeLNStore = lendingNetworksStore.activeLNStore;\n  const assetAddressToParamsMap =\n    activeLNStore?.assetBaseAddressToParams ||\n    new Map<string, TAssetInMarketParameters>();\n  const assetBaseAddress = modalsStore.assetBaseAddress;\n\n  const assetParams = assetAddressToParamsMap.get(assetBaseAddress);\n  const isNativeCoin = assetParams?.symbol === systemStore.nativeCoinSymbol;\n\n  const cTokenStore = activeLNStore?.baseAssetsToCTokenStore.get(\n    assetBaseAddress\n  );\n\n  const cToken = cTokenStore?.cTokenAddress || \"\";\n\n  const supplyTokenSymbol = assetParams?.symbol || \"\";\n  const supplyTokenName = assetParams?.name || \"\";\n  const distributionTokenSymbol =\n    activeLNStore?.distributionAssetParams.symbol || \"NONE\";\n\n  const walletBalance = cTokenStore?.accountUnderlyingBalanceInUnits || 0;\n  const hasWalletBalance = walletBalance > 0;\n  const needToApprove = !isNativeCoin; // False for native\n\n  const pricePerUnitUsd = cTokenStore?.underlyingUsdPrice || 0;\n  const collateralFactorInUnits = cTokenStore?.collateralFactorInUnits || 0;\n  const maximillionAddress = activeLNStore?.maximillionAddress || \"\";\n  const currentBorrowLimitUsd = activeLNStore?.liquidityUsd || 0;\n  const usedBorrowPercentage = activeLNStore?.usedBorrowPercentage || 0;\n  const totalAccountBorrowBalanceUsd =\n    activeLNStore?.totalAccountBorrowBalanceUsd || 0;\n  const collateralPotentialInUSD = activeLNStore?.collateralPotentialInUSD || 0;\n  const priceCalculationDecimals = activeLNStore?.priceCalculationDecimals || 6;\n\n  const distributionAssetApy = activeLNStore?.distributionAssetApy || 0;\n  const supplyApy = cTokenStore?.supplyApyInPercentages || 0;\n  const borrowApy = cTokenStore?.borrowApyInPercentages || 0;\n\n  // Can they borrow more ?\n  const currentLiquidityUsd = activeLNStore?.liquidityUsd || 0;\n  const hasAvailableLiquidity = currentLiquidityUsd > 0; // True means user can borrow&withdraw\n\n  // How many units can the user borrow more\n  const liquidityInAssetUnits = currentLiquidityUsd / pricePerUnitUsd;\n\n  const isCollaterable = cTokenStore?.isCollaterable || false;\n\n  return {\n    accountStore,\n    modalsStore,\n    lendingNetworksStore,\n    activeLNStore,\n    assetBaseAddress,\n    maximillionAddress,\n    isNativeCoin,\n    cTokenStore,\n    cToken,\n    supplyTokenSymbol,\n    supplyTokenName,\n    distributionTokenSymbol,\n    isCollaterable,\n    collateralPotentialInUSD,\n\n    walletBalance,\n    hasWalletBalance,\n    needToApprove,\n\n    priceCalculationDecimals,\n    pricePerUnitUsd,\n    collateralFactorInUnits,\n    currentBorrowLimitUsd,\n    usedBorrowPercentage,\n    totalAccountBorrowBalanceUsd,\n\n    distributionAssetApy,\n    supplyApy,\n    borrowApy,\n\n    hasAvailableLiquidity,\n    liquidityInAssetUnits,\n  };\n}\n\nexport function useMarketInteractionModalTabsState() {\n  const [activeTabIndex, setActiveTabIndex] = useState<TZeroOrOne>(0);\n\n  const borrowTabIndex = 0;\n  const repayTabIndex = 1;\n  const tab0Title = \"Borrow\";\n  const tab1Title = \"Repay\";\n\n  const isBorrow = activeTabIndex === borrowTabIndex;\n  const isRepay = activeTabIndex === repayTabIndex;\n\n  return {\n    activeTabIndex,\n    setActiveTabIndex,\n  };\n}\n\nexport function useMarketInteractionActiveTabState(activeTabIndex: TZeroOrOne) {\n  return [activeTabIndex === 0, activeTabIndex === 1];\n}\n\nexport function useOnEnableClicked(\n  cToken: string,\n  assetBaseAddress: string,\n  closeModal: () => void,\n  setWaitingForUserApproval: (val: boolean) => void,\n  setWaitingForTxConfirmation: (val: boolean) => void\n) {\n  const accountStore = useAccountStore();\n\n  const createEnableTx = useCallback(() => {\n    return accountStore.approveErc20Usage(\n      assetBaseAddress,\n      cToken,\n      ethers.constants.MaxUint256\n    );\n  }, [accountStore, assetBaseAddress, cToken]);\n\n  const wrappedEnableTx = useTxWaitingLogicExplicit(\n    createEnableTx,\n    closeModal,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation\n  );\n\n  const onEnableClicked = useCallback(async () => {\n    if (!cToken) {\n      return console.log(\"No CToken Address\");\n    }\n\n    await wrappedEnableTx();\n\n    console.log(`Enable button clicked`);\n    await console.log(`Enable is done !`);\n  }, [cToken, wrappedEnableTx]);\n\n  return onEnableClicked;\n}\n\n/**\n *\n * @param currentBorrowLimitUsd\n * @param totalAccountBorrowBalanceUsd sum of all active borrows in USD\n * @param actionInUnits DEV_NOTE : Units should be negative for actions that reduce collateral (borrow/withdraw)\n * @param unitPriceInUsd\n * @param collateralFactorInUnits\n */\nexport function useCalculateChangeInBorrowLimits(\n  currentBorrowLimitUsd: number,\n  totalAccountBorrowBalanceUsd: number,\n  actionInUnits: number,\n  unitPriceInUsd: number,\n  collateralFactorInUnits: number,\n  // Indicates the decimals used to calculate the prices in the smart contract.\n  // This will prevent js float calculation from interfering.\n  // For example, when withdrawing maximum amount, the float rounding\n  // could cause the app to think that this will lead to shortfall\n  // (because the value will we an something like -1e14.\n  pricePrecision: number\n) {\n  const priceSensitivizer = buildSensitivizer(pricePrecision);\n  const actionEffectInUsd = priceSensitivizer(actionInUnits * unitPriceInUsd);\n\n  const collateralValueOfActionEffect = priceSensitivizer(\n    actionEffectInUsd * collateralFactorInUnits\n  );\n\n  const borrowLimitAfterChange = priceSensitivizer(\n    currentBorrowLimitUsd + collateralValueOfActionEffect\n  );\n\n  const usedBorrowLimitPercentageAfterChange = priceSensitivizer(\n    totalAccountBorrowBalanceUsd / borrowLimitAfterChange\n  );\n\n  const actionLeadsToShortfall = borrowLimitAfterChange < 0;\n\n  return {\n    actionEffectInUsd,\n    actionLeadsToShortfall,\n    collateralValueOfActionEffect,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  };\n}\n\n/**\n *\n * @param currentBorrowLimitUsd\n * @param totalAccountBorrowBalanceUsd sum of all active borrows in USD\n * @param actionInUnits DEV_NOTE : Units should be negative for actions that reduce collateral (borrow/withdraw)\n * @param unitPriceInUsd\n * @param collateralFactorInUnits\n */\nexport function useCalculateChangeInBorrowLimitsForBorrow(\n  collateralPotentialInUSD: number,\n  currentBorrowLimitUsd: number,\n  totalAccountBorrowBalanceUsd: number,\n  actionInUnits: number,\n  unitPriceInUsd: number,\n  // Indicates the decimals used to calculate the prices in the smart contract.\n  // This will prevent js float calculation from interfering.\n  // For example, when withdrawing maximum amount, the float rounding\n  // could cause the app to think that this will lead to shortfall\n  // (because the value will we an something like -1e14.\n  pricePrecision: number\n) {\n  const priceSensitivizer = buildSensitivizer(pricePrecision);\n  const actionEffectInUsd = priceSensitivizer(actionInUnits * unitPriceInUsd);\n\n  const collateralValueOfActionEffect = actionEffectInUsd;\n\n  const borrowLimitAfterChange = priceSensitivizer(\n    currentBorrowLimitUsd + collateralValueOfActionEffect\n    // currentBorrowLimitUsd\n  );\n\n  const totalAccountBorrowBalanceUsdAfterAction =\n    totalAccountBorrowBalanceUsd + Math.abs(actionEffectInUsd);\n\n  const usedBorrowLimitPercentageAfterChange =\n    priceSensitivizer(\n      totalAccountBorrowBalanceUsdAfterAction / collateralPotentialInUSD\n    ) * 100;\n\n  const actionLeadsToShortfall = borrowLimitAfterChange < 0;\n\n  return {\n    actionEffectInUsd,\n    actionLeadsToShortfall,\n    collateralValueOfActionEffect,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  };\n}\n\nexport function usePriceInSensitivity(price: number, sensitivity: number) {\n  return useMemo(() => {\n    return sensitivizePrice(price, sensitivity);\n  }, [price, sensitivity]);\n}\n\nexport function useSensitivizer(sensitivity: number) {\n  return useCallback(\n    (price: number) => {\n      return sensitivizePrice(price, sensitivity);\n    },\n    [sensitivity]\n  );\n}\n\nexport function buildSensitivizer(sensitivity: number) {\n  return (price: number) => {\n    return sensitivizePrice(price, sensitivity);\n  };\n}\n\nfunction sensitivizePrice(price: number, sensitivity: number): number {\n  return parseFloat(price.toFixed(sensitivity));\n}\n","import React from \"react\";\nimport { Fade, makeStyles, Typography } from \"@material-ui/core\";\nimport { TokenIcon } from \"../../../../icons/TokenIcon\";\n\ninterface IProps {\n  tokenSymbol: string;\n  message: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    width: \"100%\",\n    paddingTop: \"1rem\",\n    padding: \"2.5rem\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  largeIcon: {\n    width: \"3rem\",\n    height: \"3rem\",\n  },\n  fadeIn: {\n    transition: \"500ms\",\n    \"&:hover\": {\n      // animation: \"$fadeIn 300ms\",\n      // border: \"1px solid red\",\n      backgroundColor: theme.palette.primary.main,\n      // padding: `2.0rem`,\n      // height: \"3.5rem\",\n      // width: \"3.5rem\",\n    },\n  },\n\n  \"@keyframes fadeIn\": {\n    // from: { opacity: 1 },\n    // to: { opacity: 0 },\n    \"0%\": {\n      // opacity: 1,\n    },\n    \"100%\": {\n      // opacity: 0,\n    },\n  },\n}));\n\nexport const MainModalMessage = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { tokenSymbol, message } = props;\n\n  return (\n    <div className={classes.container}>\n      <TokenIcon\n        symbol={tokenSymbol}\n        extraClasses={[classes.largeIcon, classes.fadeIn]}\n      />\n      <br />\n      {/*<Typography variant={\"h6\"}>Message ${tokenSymbol}</Typography>*/}\n      <Typography>{message}</Typography>\n    </div>\n  );\n});\n","import React, { ReactNode, useCallback, useMemo, useState } from \"react\";\nimport {\n  IMarketModalCommonStatePayload,\n  IMarketModalPerTabStatePayload,\n  IMarketModalStatePayload,\n  MarketInteractionModal,\n  TZeroOrOne,\n} from \"./base/MarketInteractionModal\";\nimport { Button, Input, Typography } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport { ethers } from \"ethers\";\nimport {\n  useCalculateChangeInBorrowLimits,\n  useMarketInteractionActiveTabState,\n  useMarketInteractionModalBase,\n  useMarketInteractionModalTabsState,\n  useOnEnableClicked,\n} from \"./marketInteractionModalHooks\";\nimport { MainModalMessage } from \"./base/mainModalMessage/MainModalMessage\";\nimport {\n  useTxWaitingLogicExplicit,\n  useTxWaitingStateExplicit,\n} from \"../txWaitingModal/txWaitingHooks\";\nimport { TModalFooterMessagePayload } from \"./base/ModalFooter\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nexport const SupplyModal = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const { open, closeModal } = props;\n\n    const {\n      lendingNetworksStore,\n      cTokenStore,\n      modalsStore,\n      accountStore,\n      assetBaseAddress,\n      maximillionAddress,\n      activeLNStore,\n      isNativeCoin,\n      cToken,\n      isCollaterable,\n\n      walletBalance,\n      hasWalletBalance,\n      needToApprove,\n\n      distributionTokenSymbol,\n      supplyTokenSymbol,\n      supplyTokenName,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      currentBorrowLimitUsd,\n      collateralFactorInUnits,\n      usedBorrowPercentage,\n      totalAccountBorrowBalanceUsd,\n      distributionAssetApy,\n      borrowApy,\n      supplyApy,\n\n      hasAvailableLiquidity,\n      liquidityInAssetUnits,\n    } = useMarketInteractionModalBase();\n\n    const {\n      activeTabIndex,\n      setActiveTabIndex,\n    } = useMarketInteractionModalTabsState();\n\n    const {\n      waitingForUserApproval,\n      waitingForTxConfirmation,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n    } = useTxWaitingStateExplicit();\n\n    const [isSupply, isWithdraw] = useMarketInteractionActiveTabState(\n      activeTabIndex\n    );\n\n    const onEnableClicked = useOnEnableClicked(\n      cToken,\n      assetBaseAddress,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const [supplyInputValue, setSupplyInputValue] = useState(0);\n    const [withdrawInputValue, setWithdrawInputValue] = useState(0);\n\n    const clearStateBeforeClose = useCallback(() => {\n      setSupplyInputValue(0);\n      setWithdrawInputValue(0);\n      closeModal();\n    }, [closeModal]);\n\n    // Constants\n    const tab0Title = \"Supply\";\n    const tab1Title = \"Withdraw\";\n\n    // TODO : Separate inputs for each usage / make a component\n    const inputComponent = useMemo(() => {\n      return (\n        <div\n          style={{\n            width: \"100%\",\n            padding: \"2.5rem\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Input\n            style={{ textAlign: \"center\" }}\n            inputProps={{ style: { textAlign: \"center\", appearance: \"none\" } }}\n            type={\"number\"}\n            title={\"Input\"}\n            name={\"Input\"}\n            value={isSupply ? supplyInputValue : withdrawInputValue}\n            onChange={(e) =>\n              isSupply\n                ? setSupplyInputValue(sanitizeNumericInput(e.target.value))\n                : setWithdrawInputValue(sanitizeNumericInput(e.target.value))\n            }\n          />\n        </div>\n      );\n    }, [isSupply, supplyInputValue, withdrawInputValue]);\n\n    // TODO : CRITICAL : Add test for 'some' approval (not unlimitted) as well\n    const hasApprovedERC20 = cTokenStore?.hasAnyAllowance;\n    const currentSupplyBalance = cTokenStore?.accountSupplyInUnits || 0;\n    const hasSupplyBalance = currentSupplyBalance > 0;\n    const hasBorrowBalance = totalAccountBorrowBalanceUsd > 0;\n\n    const createSupplyTx = () =>\n      accountStore.supplyToMarket(\n        cToken,\n        ethers.utils.parseUnits(\n          supplyInputValue.toString(),\n          cTokenStore?.underlyingDecimals || -1\n        ),\n        isNativeCoin,\n        maximillionAddress\n      );\n\n    const createWithdrwaTx = () =>\n      accountStore.withdrawFromMarket(\n        cToken,\n        ethers.utils.parseUnits(\n          withdrawInputValue.toString(),\n          cTokenStore?.underlyingDecimals || -1\n        ),\n        isNativeCoin,\n        maximillionAddress\n      );\n\n    console.log(\n      `Underlying decimals (${supplyTokenSymbol}) : ${cTokenStore?.underlyingDecimals}`\n    );\n\n    console.log(`Input value : ${withdrawInputValue.toString()}`);\n\n    const wrappedSupplyTx = useTxWaitingLogicExplicit(\n      createSupplyTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const wrappedWIthdrawTx = useTxWaitingLogicExplicit(\n      createWithdrwaTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const onSupplyClicked = useCallback(async () => {\n      console.log(`Supply button clicked`);\n\n      await wrappedSupplyTx();\n\n      console.log(`Supply is done !`);\n    }, [wrappedSupplyTx]);\n    const onWithdrawClicked = useCallback(async () => {\n      console.log(`Withdraw button clicked`);\n\n      await wrappedWIthdrawTx();\n\n      console.log(`Withdraw is done !`);\n    }, [wrappedWIthdrawTx]);\n\n    const messageOrInputComponent = useMemo<ReactNode>(() => {\n      if (isSupply) {\n        if (needToApprove && !hasApprovedERC20) {\n          // Message component - needs to approve\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Please approve ${supplyTokenSymbol} usage`}\n            />\n          );\n        } else {\n          // Input component - how much to supply ?\n          return inputComponent;\n        }\n      } else if (isWithdraw) {\n        // Input component - how much to withdraw ?\n        return inputComponent;\n      }\n\n      // Safe error\n      return <></>;\n    }, [\n      hasApprovedERC20,\n      inputComponent,\n      isSupply,\n      isWithdraw,\n      needToApprove,\n      supplyTokenSymbol,\n    ]);\n\n    const footerMessagePayloads = useMemo<TModalFooterMessagePayload[]>(() => {\n      const payloads: TModalFooterMessagePayload[] = [\n        {\n          title: \"Currently Supplying\",\n          tokenAmount: currentSupplyBalance,\n        },\n        {\n          title: \"Wallet Balance\",\n          tokenAmount: walletBalance,\n        },\n      ];\n\n      return payloads;\n    }, [currentSupplyBalance, walletBalance]);\n\n    // Must have wallet balance in this asset + Must approve (if needed)\n    const canSupply =\n      hasWalletBalance && (needToApprove ? hasApprovedERC20 : true);\n    const canWithdraw = hasSupplyBalance;\n\n    const borrowLimitNote = !isCollaterable\n      ? `Enable ${supplyTokenSymbol} as collateral to affect Borrow limit`\n      : undefined;\n\n    // Common payload part\n    const commonPayloadPart = useMemo<IMarketModalCommonStatePayload>(() => {\n      const commonModalState: IMarketModalCommonStatePayload = {\n        // Tabs\n        currentTabIndex: activeTabIndex,\n        onTabIndexChange: setActiveTabIndex,\n        tab0Title,\n        tab1Title,\n\n        // Assets\n        actionAssetSymbol: supplyTokenSymbol,\n        actionAssetName: supplyTokenName,\n        distributionAssetSymbol: distributionTokenSymbol,\n\n        // Borrow Limit (optional)\n        currentBorrowLimit: currentBorrowLimitUsd,\n        usedBorrowLimitPercentage: usedBorrowPercentage,\n\n        // Tx Waiting\n        waitingForTxConfirmation,\n        waitingForUserApproval,\n      };\n\n      return commonModalState;\n    }, [\n      activeTabIndex,\n      currentBorrowLimitUsd,\n      distributionTokenSymbol,\n      setActiveTabIndex,\n      supplyTokenName,\n      supplyTokenSymbol,\n      usedBorrowPercentage,\n      waitingForTxConfirmation,\n      waitingForUserApproval,\n    ]);\n\n    // Payload for supply\n    const marketModalStatePayloadForSupplyTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      const isSupplyInputValueValid = supplyInputValue > 0;\n      const isOfferingMoreThanWalletBalance = supplyInputValue > walletBalance;\n      const actionButtonTextForSupply = canSupply\n        ? \"Supply\"\n        : needToApprove\n        ? \"Approve\"\n        : \"No Balance\";\n\n      const activeButtonActive =\n        (isSupplyInputValueValid &&\n          canSupply &&\n          !isOfferingMoreThanWalletBalance) ||\n        (needToApprove && !hasApprovedERC20);\n      const actionButtonCbForSupply = canSupply\n        ? onSupplyClicked\n        : onEnableClicked;\n\n      let reasonForNotBeingAbleToWithdraw = undefined;\n      if (!hasWalletBalance) {\n        reasonForNotBeingAbleToWithdraw = \"No balance to supply\";\n      } else if (isOfferingMoreThanWalletBalance) {\n        reasonForNotBeingAbleToWithdraw = \"Exceeding wallet balance\";\n      } else if (!isSupplyInputValueValid) {\n        // No message\n        // reasonForNotBeingAbleToWithdraw = \"Invalid sum\";\n      }\n\n      const actionButtonDisabledText = reasonForNotBeingAbleToWithdraw;\n\n      // Calculate the changes to borrow limit (USD and % used)\n      const {\n        collateralValueOfActionEffect,\n        borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange,\n      } = useCalculateChangeInBorrowLimits(\n        currentBorrowLimitUsd,\n        totalAccountBorrowBalanceUsd,\n        supplyInputValue,\n        pricePerUnitUsd,\n        collateralFactorInUnits,\n        priceCalculationDecimals\n      );\n\n      const showPredictedBorrowLimits =\n        isCollaterable && collateralValueOfActionEffect !== 0;\n\n      // Input action button\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText: \"\",\n        showInputActionButton: false,\n        inputActionButtonActive: false,\n        onInputActionButtonPressed: undefined,\n\n        // Action Rates\n        actionName: \"Supply\",\n        actionApy: supplyApy,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        // DEV_NOTE : We want to show the effect of both supply and withdraw on the borrow limits\n        showBorrowLimit: isWithdraw || canSupply,\n        borrowLimitAfterChange: borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange: usedBorrowLimitPercentageAfterChange,\n        showPredictedBorrowLimits,\n        borrowLimitNote,\n\n        // Action button\n        actionButtonActive: activeButtonActive,\n        actionButtonText: actionButtonTextForSupply,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForSupply,\n\n        // Footer\n        footerMessagesPayloads: footerMessagePayloads,\n      };\n\n      return payload;\n    }, [\n      borrowLimitNote,\n      canSupply,\n      collateralFactorInUnits,\n      currentBorrowLimitUsd,\n      distributionAssetApy,\n      footerMessagePayloads,\n      hasApprovedERC20,\n      hasWalletBalance,\n      isCollaterable,\n      isWithdraw,\n      messageOrInputComponent,\n      needToApprove,\n      onEnableClicked,\n      onSupplyClicked,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      supplyApy,\n      supplyInputValue,\n      totalAccountBorrowBalanceUsd,\n      walletBalance,\n    ]);\n\n    // Payload for withdraw\n    const marketModalStatePayloadForWithdrawTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      // Calculate borrow limit (USD and % used) after requested withdraw\n      const {\n        actionLeadsToShortfall,\n        collateralValueOfActionEffect,\n        borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange,\n      } = useCalculateChangeInBorrowLimits(\n        currentBorrowLimitUsd,\n        totalAccountBorrowBalanceUsd,\n        withdrawInputValue * -1,\n        pricePerUnitUsd,\n        collateralFactorInUnits,\n        priceCalculationDecimals\n      );\n\n      const withdrawInputValid = withdrawInputValue > 0;\n      const isRequestingMoreThanSuppliedBalance =\n        withdrawInputValue > currentSupplyBalance;\n      // Make sure the user does not fall into shortfall.\n      // DEV_NOTE : This is used to ensure that withdraw will be allowed when there is no borrow +\n      //            when this asset is not used as collateral\n      const isRequestLegal =\n        !actionLeadsToShortfall ||\n        !hasBorrowBalance ||\n        (hasBorrowBalance && !isCollaterable);\n\n      const activeButtonActive =\n        canWithdraw &&\n        withdrawInputValid &&\n        !isRequestingMoreThanSuppliedBalance &&\n        isRequestLegal;\n      const actionButtonCbForWithdraw = onWithdrawClicked;\n\n      let reasonForNotBeingAbleToWithdraw = undefined;\n      if (!hasSupplyBalance) {\n        reasonForNotBeingAbleToWithdraw = \"No balance to withdraw\";\n      } else if (isRequestingMoreThanSuppliedBalance) {\n        reasonForNotBeingAbleToWithdraw = \"Exceeding supplied balance\";\n      } else if (!withdrawInputValid) {\n        // No message\n        // reasonForNotBeingAbleToWithdraw = \"Invalid sum\";\n      }\n\n      // const actionButtonTextForWithdraw = canWithdraw ? \"Withdraw\" : \"\";\n      const actionButtonTextForWithdraw = \"Withdraw\";\n      const actionButtonDisabledText = reasonForNotBeingAbleToWithdraw;\n\n      const showPredictedBorrowLimits =\n        isCollaterable && collateralValueOfActionEffect !== 0;\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText: \"\",\n        showInputActionButton: false,\n        inputActionButtonActive: false,\n        onInputActionButtonPressed: undefined,\n\n        // Action Rates\n        actionName: \"Supply\",\n        actionApy: supplyApy,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        showBorrowLimit: isWithdraw,\n        borrowLimitAfterChange,\n        showPredictedBorrowLimits,\n        usedBorrowLimitPercentageAfterChange,\n        borrowLimitNote,\n\n        // Action button\n        actionButtonActive: activeButtonActive,\n        actionButtonText: actionButtonTextForWithdraw,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForWithdraw,\n\n        // Footer\n        footerMessagesPayloads: footerMessagePayloads,\n      };\n\n      return payload;\n    }, [\n      borrowLimitNote,\n      canWithdraw,\n      collateralFactorInUnits,\n      currentBorrowLimitUsd,\n      currentSupplyBalance,\n      distributionAssetApy,\n      footerMessagePayloads,\n      hasBorrowBalance,\n      hasSupplyBalance,\n      isCollaterable,\n      isWithdraw,\n      messageOrInputComponent,\n      onWithdrawClicked,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      supplyApy,\n      totalAccountBorrowBalanceUsd,\n      withdrawInputValue,\n    ]);\n\n    const statePerTabPayload = isSupply\n      ? marketModalStatePayloadForSupplyTab\n      : marketModalStatePayloadForWithdrawTab;\n\n    const marketModalStatePayload = useMemo<IMarketModalStatePayload>(() => {\n      const payload: IMarketModalStatePayload = {\n        ...commonPayloadPart,\n        ...statePerTabPayload,\n      };\n\n      return payload;\n    }, [commonPayloadPart, statePerTabPayload]);\n\n    return (\n      <MarketInteractionModal\n        open={open}\n        closeModal={clearStateBeforeClose}\n        {...marketModalStatePayload}\n      />\n    );\n  }\n);\n\nfunction sanitizeNumericInput(stringValueOfNumericInput?: string): number {\n  let safeString = stringValueOfNumericInput || \"0\";\n  // DEV_NOTE : Barbaric way\n  while (safeString.length > 1 && safeString.charAt(0) === \"0\") {\n    console.log(`Starts in 0 : ${safeString}`);\n    safeString = safeString.substring(1, safeString.length);\n    console.log(`After trim : ${safeString}`);\n  }\n\n  const parsedAsFloat = +safeString;\n  if (!stringValueOfNumericInput || isNaN(parsedAsFloat)) {\n    return 0;\n  }\n\n  return parsedAsFloat;\n}\n","import React, {\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  IMarketModalCommonStatePayload,\n  IMarketModalPerTabStatePayload,\n  IMarketModalStatePayload,\n  MarketInteractionModal,\n} from \"./base/MarketInteractionModal\";\nimport { Input } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport { BigNumber, ethers } from \"ethers\";\nimport {\n  useCalculateChangeInBorrowLimitsForBorrow,\n  useMarketInteractionActiveTabState,\n  useMarketInteractionModalBase,\n  useMarketInteractionModalTabsState,\n  useOnEnableClicked,\n} from \"./marketInteractionModalHooks\";\nimport { MainModalMessage } from \"./base/mainModalMessage/MainModalMessage\";\nimport {\n  useTxWaitingLogicExplicit,\n  useTxWaitingStateExplicit,\n} from \"../txWaitingModal/txWaitingHooks\";\nimport { TModalFooterMessagePayload } from \"./base/ModalFooter\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nconst ONATIVE_MAX_REPAY_FACTOR = 1.05;\n// Percentage in factor from max limit that is considered safe.\nconst SAFE_BORROW_FACTOR = 0.4;\n\nexport const BorrowModal = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const { open, closeModal } = props;\n\n    const {\n      lendingNetworksStore,\n      cTokenStore,\n      modalsStore,\n      accountStore,\n      assetBaseAddress,\n      maximillionAddress,\n      activeLNStore,\n      isNativeCoin,\n      cToken,\n      isCollaterable,\n\n      walletBalance,\n      needToApprove,\n      hasWalletBalance,\n\n      collateralPotentialInUSD,\n      distributionTokenSymbol,\n      supplyTokenSymbol,\n      supplyTokenName,\n      totalAccountBorrowBalanceUsd,\n      usedBorrowPercentage,\n      collateralFactorInUnits,\n      priceCalculationDecimals,\n      currentBorrowLimitUsd,\n      pricePerUnitUsd,\n      distributionAssetApy,\n      borrowApy,\n      supplyApy,\n\n      liquidityInAssetUnits,\n      hasAvailableLiquidity,\n    } = useMarketInteractionModalBase();\n\n    const {\n      waitingForUserApproval,\n      waitingForTxConfirmation,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n    } = useTxWaitingStateExplicit();\n\n    const {\n      activeTabIndex,\n      setActiveTabIndex,\n    } = useMarketInteractionModalTabsState();\n\n    const [isBorrow, isRepay] = useMarketInteractionActiveTabState(\n      activeTabIndex\n    );\n\n    const onEnableClicked = useOnEnableClicked(\n      cToken,\n      assetBaseAddress,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const [isRepayingMax, setIsRepayingMax] = useState(false);\n    const [borrowInputValue, setBorrowInputValue] = useState(0);\n    const [repayInputValue, setRepayInputValue] = useState(0);\n\n    useEffect(() => {\n      let newToken = cToken;\n      setIsRepayingMax(false);\n    }, [cToken]);\n\n    const clearStateBeforeClose = useCallback(() => {\n      setBorrowInputValue(0);\n      setRepayInputValue(0);\n      closeModal();\n    }, [closeModal]);\n\n    // Constants\n    const tab0Title = \"Borrow\";\n    const tab1Title = \"Repay\";\n\n    // TODO : Separate inputs for each usage / make a component\n    const inputComponent = useMemo(() => {\n      return (\n        <div\n          style={{\n            width: \"100%\",\n            padding: \"2.5rem\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Input\n            style={{ textAlign: \"center\" }}\n            inputProps={{ style: { textAlign: \"center\" } }}\n            type={\"number\"}\n            title={\"Input\"}\n            name={\"Input\"}\n            value={isBorrow ? borrowInputValue : repayInputValue}\n            onChange={(e) =>\n              isBorrow\n                ? setBorrowInputValue(sanitizeNumericInput(e.target.value))\n                : setRepayInputValue(sanitizeNumericInput(e.target.value))\n            }\n          />\n        </div>\n      );\n    }, [borrowInputValue, isBorrow, repayInputValue]);\n\n    // TODO : CRITICAL : Add test for 'some' approval (not unlimitted) as well\n    const hasApprovedERC20 = cTokenStore?.hasAnyAllowance;\n    // Is our user borrowing this asset ?\n    const currentBorrowBalance = cTokenStore?.accountBorrowInUnits || 0;\n    const hasBorrowBalance = currentBorrowBalance > 0;\n    const needsToButNotYetApproved = needToApprove && !hasApprovedERC20;\n\n    const createBorrowTx = () =>\n      accountStore.borrowFromMarket(\n        cToken,\n        ethers.utils.parseUnits(\n          borrowInputValue.toString(),\n          cTokenStore?.underlyingDecimals || -1\n        ),\n        isNativeCoin,\n        maximillionAddress\n      );\n\n    const repayAmount = useMemo(() => {\n      if (isRepayingMax) {\n        if (isNativeCoin) {\n          // TODO : Go over this calculation and maybe use fixed decimals/from chain store + put the factor somewhere proper\n          return ethers.utils.parseUnits(\n            (currentBorrowBalance * ONATIVE_MAX_REPAY_FACTOR).toString(),\n            cTokenStore?.underlyingDecimals || 0\n          );\n        } else {\n          return ethers.constants.MaxUint256;\n        }\n      } else {\n        return ethers.utils.parseUnits(\n          repayInputValue.toString(),\n          cTokenStore?.underlyingDecimals || 0\n        );\n      }\n    }, [\n      cTokenStore?.underlyingDecimals,\n      currentBorrowBalance,\n      isNativeCoin,\n      isRepayingMax,\n      repayInputValue,\n    ]);\n\n    const createRepayTx = () =>\n      accountStore.repayToMarket(\n        cToken,\n        repayAmount,\n        isNativeCoin,\n        maximillionAddress\n      );\n\n    const wrappedBorrowTx = useTxWaitingLogicExplicit(\n      createBorrowTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const wrappedRepayTx = useTxWaitingLogicExplicit(\n      createRepayTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const onBorrowClicked = useCallback(async () => {\n      if (!cToken) {\n        return console.log(\"No CToken Address\");\n      }\n\n      console.log(`Borrow button clicked`);\n      await wrappedBorrowTx();\n      console.log(`Borrow is done !`);\n    }, [cToken, wrappedBorrowTx]);\n    const onBorrowMaxSafeClicked = useCallback(async () => {\n      if (!cToken) {\n        return console.log(\"No CToken Address\");\n      }\n\n      const safeAmountInUsd = collateralPotentialInUSD * SAFE_BORROW_FACTOR;\n      const amountLeftToSafe = safeAmountInUsd - totalAccountBorrowBalanceUsd;\n\n      if (amountLeftToSafe < 0) {\n        console.log(\n          `Already over safe borrow amount : safe is : ${safeAmountInUsd} | borrowedUsd is ${totalAccountBorrowBalanceUsd}`\n        );\n        setBorrowInputValue(0);\n      } else {\n        const safeBorrowInUnits =\n          cTokenStore?.getUnitsForUsdValue(amountLeftToSafe) || 0;\n\n        // TODO : CRITICAL : Move to constants\n        // DEV_NOTE : Decided to round up to 6 ( the markets decimals are 8 - this leaves us some space + this is the lowest decimals for all base assets - so we can safely use it)\n        setBorrowInputValue(parseFloat(safeBorrowInUnits.toFixed(6)));\n      }\n    }, [\n      cToken,\n      cTokenStore,\n      collateralPotentialInUSD,\n      totalAccountBorrowBalanceUsd,\n    ]);\n\n    const onRepayClicked = useCallback(async () => {\n      console.log(`Repay button clicked`);\n      await wrappedRepayTx();\n      console.log(`Repay is done !`);\n    }, [wrappedRepayTx]);\n\n    // How many units does the cToken holds ?\n    const cTokenCashInUnits = cTokenStore?.cTokenCashInUnits || 0;\n\n    // Is borrowing from this asset ?\n    const accountBorrowInUnits = cTokenStore?.accountBorrowInUnits || 0;\n\n    // How much underlying (in USD) does the market hold ?\n    const cTokenCashInUsd = cTokenStore?.cTokenCashInUSD || 0;\n\n    const repayIsZero = repayInputValue === 0;\n    const hasEnoughToRepayAll = walletBalance > accountBorrowInUnits;\n    const canRepayMax = hasWalletBalance && hasEnoughToRepayAll && !repayIsZero;\n\n    const onSetRepayToMaxClicked = useCallback(() => {\n      console.log(\"set repay max\");\n      setIsRepayingMax(!isRepayingMax);\n    }, [isRepayingMax]);\n\n    const messageOrInputComponent = useMemo<ReactNode>(() => {\n      if (isRepay) {\n        if (needsToButNotYetApproved) {\n          // Message component - needs to approve\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Please approve ${supplyTokenSymbol} usage`}\n            />\n          );\n        } else if (isRepayingMax) {\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Repaying all (~${(+currentBorrowBalance.toFixed(\n                2\n              )).toLocaleString()})`}\n            />\n          );\n        } else {\n          // Input component - how much to supply ?\n          return inputComponent;\n        }\n      } else if (isBorrow) {\n        // Input component - how much to withdraw ?\n        return inputComponent;\n      }\n\n      // Safe error\n      return <></>;\n    }, [\n      currentBorrowBalance,\n      inputComponent,\n      isBorrow,\n      isRepay,\n      isRepayingMax,\n      needsToButNotYetApproved,\n      supplyTokenSymbol,\n    ]);\n\n    const footerMessagePayloads = useMemo<TModalFooterMessagePayload[]>(() => {\n      return [\n        {\n          title: \"Currently Borrowing\",\n          tokenAmount: accountBorrowInUnits,\n        },\n        {\n          title: \"Wallet Balance\",\n          tokenAmount: walletBalance,\n        },\n      ];\n    }, [accountBorrowInUnits, walletBalance]);\n\n    // // Must have active borrow in this asset + Must approve (if needed)\n    // const canRepay =\n    //   hasBorrowBalance && (needToApprove ? hasApprovedERC20 : true);\n\n    // TODO : Make sure this is a right assumption\n    // Either what the user is allowed to borrow, or everything there is.\n    const maxPossibleBorrow = Math.max(\n      liquidityInAssetUnits,\n      cTokenCashInUnits\n    );\n\n    // Common payload part\n    const commonPayloadPart = useMemo<IMarketModalCommonStatePayload>(() => {\n      const commonModalState: IMarketModalCommonStatePayload = {\n        // Tabs\n        currentTabIndex: activeTabIndex,\n        onTabIndexChange: setActiveTabIndex,\n        tab0Title,\n        tab1Title,\n\n        // Assets\n        actionAssetSymbol: supplyTokenSymbol,\n        actionAssetName: supplyTokenName,\n        distributionAssetSymbol: distributionTokenSymbol,\n\n        // Borrow Limit (optional)\n        currentBorrowLimit: currentBorrowLimitUsd,\n        usedBorrowLimitPercentage: usedBorrowPercentage,\n\n        // Tx Waiting\n        waitingForUserApproval,\n        waitingForTxConfirmation,\n      };\n\n      return commonModalState;\n    }, [\n      activeTabIndex,\n      currentBorrowLimitUsd,\n      distributionTokenSymbol,\n      setActiveTabIndex,\n      supplyTokenName,\n      supplyTokenSymbol,\n      usedBorrowPercentage,\n      waitingForTxConfirmation,\n      waitingForUserApproval,\n    ]);\n\n    // Payload for Borrow\n    const marketModalStatePayloadForBorrowTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      // Calculate the changes to borrow limit (USD and % used)\n      const {\n        actionEffectInUsd,\n        actionLeadsToShortfall,\n        collateralValueOfActionEffect,\n        borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange,\n      } = useCalculateChangeInBorrowLimitsForBorrow(\n        collateralPotentialInUSD,\n        currentBorrowLimitUsd,\n        totalAccountBorrowBalanceUsd,\n        borrowInputValue * -1,\n        pricePerUnitUsd,\n        priceCalculationDecimals\n      );\n\n      const isRequestingMoreThanCanBorrow =\n        borrowInputValue > maxPossibleBorrow;\n\n      const borrowUsdSum = -1 * actionEffectInUsd;\n      const isRequestingMoreThanMarketLiquidity =\n        borrowUsdSum > cTokenCashInUsd;\n\n      const canBorrow =\n        hasAvailableLiquidity &&\n        !isRequestingMoreThanCanBorrow &&\n        !isRequestingMoreThanMarketLiquidity &&\n        !actionLeadsToShortfall;\n\n      let reasonForNotBeingAbleToBorrow = undefined;\n      if (!hasAvailableLiquidity) {\n        reasonForNotBeingAbleToBorrow = \"Borrowing limit reached\";\n      } else if (isRequestingMoreThanCanBorrow) {\n        reasonForNotBeingAbleToBorrow = \"Requesting more than can borrow\";\n      } else if (isRequestingMoreThanMarketLiquidity) {\n        reasonForNotBeingAbleToBorrow = \"Exceeding market liquidity\";\n      } else if (actionLeadsToShortfall) {\n        reasonForNotBeingAbleToBorrow = \"Leads to shortfall\";\n      }\n\n      const actionButtonTextForBorrow = \"Borrow\";\n      const actionButtonDisabledText = reasonForNotBeingAbleToBorrow;\n\n      const activeButtonActive = canBorrow && borrowInputValue > 0;\n\n      const actionButtonCbForSupply = onBorrowClicked;\n\n      const showPredictedBorrowLimits = collateralValueOfActionEffect !== 0;\n\n      console.log({ usedBorrowPercentage });\n      const canBorrowMoreSafely =\n        usedBorrowPercentage < SAFE_BORROW_FACTOR * 100;\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText: \"Max Safe\",\n        showInputActionButton: true,\n        inputActionButtonActive: canBorrowMoreSafely,\n        onInputActionButtonPressed: onBorrowMaxSafeClicked,\n\n        // Action Rates\n        actionName: \"Borrow\",\n        actionApy: borrowApy,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        showBorrowLimit: true,\n        borrowLimitAfterChange: borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange: usedBorrowLimitPercentageAfterChange,\n        showPredictedBorrowLimits,\n\n        // Action button\n        actionButtonActive: activeButtonActive,\n        actionButtonText: actionButtonTextForBorrow,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForSupply,\n\n        // Footer\n        footerMessagesPayloads: footerMessagePayloads,\n      };\n\n      return payload;\n    }, [\n      borrowApy,\n      borrowInputValue,\n      cTokenCashInUsd,\n      collateralPotentialInUSD,\n      currentBorrowLimitUsd,\n      distributionAssetApy,\n      footerMessagePayloads,\n      hasAvailableLiquidity,\n      maxPossibleBorrow,\n      messageOrInputComponent,\n      onBorrowClicked,\n      onBorrowMaxSafeClicked,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      totalAccountBorrowBalanceUsd,\n      usedBorrowPercentage,\n    ]);\n\n    // Payload for repay\n    const marketModalStatePayloadForRepayTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      const isApproveDoneWith = needToApprove ? hasApprovedERC20 : true;\n\n      const isOfferingMoreThanWalletBalance = repayInputValue > walletBalance;\n      const isOfferingMoreThanHasBorrowed =\n        repayInputValue > accountBorrowInUnits;\n\n      // Must have enough wallet balance in this asset + Must approve (if needed)\n      const canRepay =\n        (hasWalletBalance &&\n          !isOfferingMoreThanWalletBalance &&\n          !isOfferingMoreThanHasBorrowed &&\n          !repayIsZero &&\n          isApproveDoneWith) ||\n        isRepayingMax;\n\n      const actionButtonActive = canRepay || needsToButNotYetApproved;\n      const actionButtonCbForRepay = needsToButNotYetApproved\n        ? onEnableClicked\n        : onRepayClicked;\n\n      let reasonForNotBeingAbleToRepay = undefined;\n      if (isOfferingMoreThanWalletBalance) {\n        reasonForNotBeingAbleToRepay = \"Exceeding wallet balance\";\n      } else if (isOfferingMoreThanHasBorrowed) {\n        reasonForNotBeingAbleToRepay = \"Exceeding borrowed amount\";\n      } else if (repayIsZero) {\n        // DEV_NOTE : Will be disabled with the call to action\n        reasonForNotBeingAbleToRepay = \"Repay\";\n      }\n\n      const actionButtonTextForRepay = canRepay\n        ? \"Repay\"\n        : needToApprove\n        ? \"Approve\"\n        : \"\";\n\n      const actionButtonDisabledText = reasonForNotBeingAbleToRepay;\n\n      // Calculate borrow limit (USD and % used) after requested withdraw\n      const {\n        collateralValueOfActionEffect,\n        borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange,\n      } = useCalculateChangeInBorrowLimitsForBorrow(\n        collateralPotentialInUSD,\n        currentBorrowLimitUsd,\n        totalAccountBorrowBalanceUsd,\n        repayInputValue,\n        pricePerUnitUsd,\n        priceCalculationDecimals\n      );\n\n      const showPredictedBorrowLimits = collateralValueOfActionEffect !== 0;\n\n      console.log({ canRepayMax });\n      const inputActionButtonText = isRepayingMax ? \"Cancel\" : \"Max\";\n      const showInputActionButton =\n        (isRepay || false) && !needsToButNotYetApproved && hasBorrowBalance;\n      const inputActionButtonActive = hasEnoughToRepayAll;\n      const onInputActionButtonPressed = onSetRepayToMaxClicked;\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText,\n        showInputActionButton,\n        onInputActionButtonPressed,\n        inputActionButtonActive,\n\n        // Action Rates\n        actionName: \"Supply\",\n        actionApy: 4.56,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        showBorrowLimit: showPredictedBorrowLimits,\n        borrowLimitAfterChange,\n        showPredictedBorrowLimits,\n        usedBorrowLimitPercentageAfterChange,\n\n        // Action button\n        actionButtonActive: !!actionButtonActive,\n        actionButtonText: actionButtonTextForRepay,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForRepay,\n\n        // Footer\n        footerMessagesPayloads: footerMessagePayloads,\n      };\n\n      return payload;\n    }, [\n      accountBorrowInUnits,\n      canRepayMax,\n      collateralPotentialInUSD,\n      currentBorrowLimitUsd,\n      distributionAssetApy,\n      footerMessagePayloads,\n      hasApprovedERC20,\n      hasBorrowBalance,\n      hasEnoughToRepayAll,\n      hasWalletBalance,\n      isRepay,\n      isRepayingMax,\n      messageOrInputComponent,\n      needToApprove,\n      needsToButNotYetApproved,\n      onEnableClicked,\n      onRepayClicked,\n      onSetRepayToMaxClicked,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      repayInputValue,\n      repayIsZero,\n      totalAccountBorrowBalanceUsd,\n      walletBalance,\n    ]);\n\n    const statePerTabPayload = isBorrow\n      ? marketModalStatePayloadForBorrowTab\n      : marketModalStatePayloadForRepayTab;\n\n    const marketModalStatePayload = useMemo<IMarketModalStatePayload>(() => {\n      const payload: IMarketModalStatePayload = {\n        ...commonPayloadPart,\n        ...statePerTabPayload,\n      };\n\n      return payload;\n    }, [commonPayloadPart, statePerTabPayload]);\n\n    console.log(\n      `BorrowLimitAfterChange : ${marketModalStatePayload.borrowLimitAfterChange}`\n    );\n    return (\n      <MarketInteractionModal\n        open={open}\n        closeModal={clearStateBeforeClose}\n        {...marketModalStatePayload}\n      />\n    );\n  }\n);\n\nfunction sanitizeNumericInput(stringValueOfNumericInput?: string): number {\n  let safeString = stringValueOfNumericInput || \"0\";\n  // DEV_NOTE : Barbaric way\n  while (safeString.length > 1 && safeString.charAt(0) === \"0\") {\n    console.log(`Starts in 0 : ${safeString}`);\n    safeString = safeString.substring(1, safeString.length);\n    console.log(`After trim : ${safeString}`);\n  }\n\n  const parsedAsFloat = +safeString;\n  if (!stringValueOfNumericInput || isNaN(parsedAsFloat)) {\n    return 0;\n  }\n\n  return parsedAsFloat;\n}\n","import React from \"react\";\nimport {\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { TokenIcon } from \"../../icons/TokenIcon\";\nimport { BRAND_MAIN_COLOR, GRAYISH_TEXT } from \"../../../theme/themeConstants\";\nimport { ActionRates } from \"../MarketInteractionModal/base/rates/ActionRates\";\nimport { BorrowLimitRates } from \"../MarketInteractionModal/base/rates/BorrowLimitRates\";\nimport { ModalActionButton } from \"../MarketInteractionModal/base/ModalActionButton\";\nimport { ModalFooter } from \"../MarketInteractionModal/base/ModalFooter\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../txWaitingModal/TxWaitingModal\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n\n  actionAssetName: string;\n  actionAssetSymbol: string;\n\n  currentBorrowLimit: number;\n  usedBorrowLimitPercentage: number;\n  usedBorrowLimitPercentageAfterChange: number;\n  borrowLimitAfterChange: number;\n  showPredictedBorrowLimits: boolean;\n\n  actionName: string;\n  actionButtonActive: boolean;\n  actionButtonText: string;\n  actionButtonOnClick: () => void;\n\n  // TX waiting\n  waitingForUserApproval: boolean;\n  waitingForTxConfirmation: boolean;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  collateralInteractionPanel: {\n    position: \"relative\",\n    width: \"30rem\",\n    maxWidth: \"100%\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {\n    fontWeight: \"bold\",\n  },\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  messageContainer: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    textAlign: \"center\",\n\n    color: GRAYISH_TEXT,\n  },\n\n  tabBody: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    backgroundColor: \"#ffffff\",\n  },\n}));\n\nexport const CollateralModal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    open,\n    closeModal,\n    actionAssetSymbol,\n    actionAssetName,\n\n    showPredictedBorrowLimits,\n    currentBorrowLimit,\n    usedBorrowLimitPercentage,\n    usedBorrowLimitPercentageAfterChange,\n    borrowLimitAfterChange,\n    actionName,\n    actionButtonActive,\n    actionButtonText,\n    actionButtonOnClick,\n\n    waitingForTxConfirmation,\n    waitingForUserApproval,\n  } = props;\n\n  if (waitingForTxConfirmation || waitingForUserApproval) {\n    const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n      ? \"CONFIRMATION\"\n      : \"USER_APPROVAL\";\n\n    return (\n      <TxWaitingModal\n        open={open}\n        closeModal={closeModal}\n        txWaitingStage={txWaitingStage}\n      />\n    );\n  }\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.collateralInteractionPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Quick-n-Dirty Market icon */}\n          <TokenIcon\n            symbol={actionAssetSymbol}\n            extraClasses={[classes.tokenIcon, classes.upperLeftCorner]}\n          />\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h6\"} className={classes.title}>\n              {actionName} as collateral\n            </Typography>\n          </div>\n\n          <div className={classes.messageContainer}>\n            <Typography>\n              Each asset used as collateral increases your borrowing limit.{\" \"}\n              <br />\n              Be careful, this can subject the asset to being seized in\n              liquidation.\n              {/*Learn more.*/}\n            </Typography>\n          </div>\n\n          {/* Tab Body */}\n          <div className={classes.tabBody}>\n            {/* Borrow limit rates */}\n            <BorrowLimitRates\n              borrowLimitUsd={currentBorrowLimit || 0}\n              borrowLimitUsedPercentage={usedBorrowLimitPercentage || 0}\n              predictedBorrowLimitPercentage={\n                usedBorrowLimitPercentageAfterChange || 0\n              }\n              predictedBorrowLimitUsd={borrowLimitAfterChange || 0}\n              displayPredictedValues={showPredictedBorrowLimits}\n            />\n\n            <br />\n            <br />\n\n            {/* Action button */}\n            <ModalActionButton\n              onClick={actionButtonOnClick}\n              text={actionButtonText}\n              disabled={!actionButtonActive}\n            />\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","import React, { useCallback, useMemo } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { CollateralModal } from \"./CollateralModal\";\nimport { useCalculateChangeInBorrowLimits } from \"../MarketInteractionModal/marketInteractionModalHooks\";\nimport { useCollateralModalState } from \"./collateralModalHooks\";\nimport { useTxWaitingLogic } from \"../txWaitingModal/txWaitingHooks\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nexport const ConnectedCollateralModal = observer<\n  React.FunctionComponent<IProps>\n>((props) => {\n  const { open, closeModal } = props;\n\n  const {\n    activeLNStore,\n    cToken,\n    accountSupplyInUnits,\n    underlyingName,\n    underlyingSymbol,\n    isCollaterable,\n\n    priceCalculationDecimals,\n    usedBorrowPercentage,\n    totalAccountBorrowBalanceUsd,\n    currentBorrowLimitUsd,\n    collateralFactorInUnits,\n    pricePerUnitUsd,\n  } = useCollateralModalState();\n\n  const newCollaterableValue = !isCollaterable;\n  // Will the new state add or reduce potential collateral\n  const signMultiplier = newCollaterableValue ? 1 : -1;\n  const effectiveUnits = signMultiplier * accountSupplyInUnits;\n\n  const actionButtonText = newCollaterableValue\n    ? `Use ${underlyingSymbol} as collateral`\n    : `Remove ${underlyingSymbol} as collateral`;\n\n  const actionName = newCollaterableValue ? \"Enable\" : \"Remove\";\n\n  // Calculate the changes to borrow limit (USD and % used)\n  const {\n    collateralValueOfActionEffect,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  } = useCalculateChangeInBorrowLimits(\n    currentBorrowLimitUsd,\n    totalAccountBorrowBalanceUsd,\n    effectiveUnits,\n    pricePerUnitUsd,\n    collateralFactorInUnits,\n    priceCalculationDecimals\n  );\n\n  // We always want to emphasis the change (even if it is 0)\n  const showPredictedBorrowLimits = true;\n\n  const actionButtonActive = true;\n\n  const txCreatingFunction = useMemo(() => {\n    if (newCollaterableValue) {\n      return () => activeLNStore?.enterMarketByCTokenAddress(cToken);\n    } else {\n      return () => activeLNStore?.exitMarketByCTokenAddress(cToken);\n    }\n  }, [activeLNStore, cToken, newCollaterableValue]);\n\n  const {\n    wrappedTxBuildingFunction,\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n  } = useTxWaitingLogic(txCreatingFunction, closeModal);\n\n  const onActionButtonClicked = useCallback(async () => {\n    await wrappedTxBuildingFunction();\n  }, [wrappedTxBuildingFunction]);\n\n  return (\n    <CollateralModal\n      open={open}\n      closeModal={closeModal}\n      actionName={actionName}\n      actionButtonText={actionButtonText}\n      actionAssetName={underlyingName}\n      actionAssetSymbol={underlyingSymbol}\n      actionButtonActive={actionButtonActive}\n      actionButtonOnClick={onActionButtonClicked}\n      showPredictedBorrowLimits={showPredictedBorrowLimits}\n      borrowLimitAfterChange={borrowLimitAfterChange}\n      currentBorrowLimit={currentBorrowLimitUsd}\n      usedBorrowLimitPercentage={usedBorrowPercentage}\n      usedBorrowLimitPercentageAfterChange={\n        usedBorrowLimitPercentageAfterChange\n      }\n      waitingForUserApproval={waitingForUserApproval}\n      waitingForTxConfirmation={waitingForTxConfirmation}\n    />\n  );\n});\n","import {\n  useAccountStore,\n  useLendingNetworksStore,\n  useModalsStore,\n  useSystemStore,\n} from \"../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../services/lendingNetworksService/ILendingNetworksService\";\n\nexport function useCollateralModalState() {\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const systemStore = useSystemStore();\n  const activeLNStore = lendingNetworksStore.activeLNStore;\n\n  const assetAddressToParamsMap =\n    activeLNStore?.assetBaseAddressToParams ||\n    new Map<string, TAssetInMarketParameters>();\n  const assetBaseAddress = modalsStore.assetBaseAddress;\n\n  const assetParams = assetAddressToParamsMap.get(assetBaseAddress);\n  const isNativeCoin = assetParams?.symbol === systemStore.nativeCoinSymbol;\n\n  const cTokenStore = activeLNStore?.baseAssetsToCTokenStore.get(\n    assetBaseAddress\n  );\n\n  const cToken = cTokenStore?.cTokenAddress || \"\";\n  const underlyingName = cTokenStore?.underlyingName || \"\";\n  const underlyingSymbol = cTokenStore?.underlyingSymbol || \"\";\n  const accountSupplyInUnits = cTokenStore?.accountSupplyInUnits || 0;\n  const isCollaterable = cTokenStore?.isCollaterable || false;\n\n  const pricePerUnitUsd = cTokenStore?.underlyingUsdPrice || 0;\n  const collateralFactorInUnits = cTokenStore?.collateralFactorInUnits || 0;\n  const currentBorrowLimitUsd = activeLNStore?.liquidityUsd || 0;\n  const usedBorrowPercentage = activeLNStore?.usedBorrowPercentage || 0;\n  const totalAccountBorrowBalanceUsd =\n    activeLNStore?.totalAccountBorrowBalanceUsd || 0;\n\n  const priceCalculationDecimals = activeLNStore?.priceCalculationDecimals || 6;\n\n  return {\n    activeLNStore,\n    cToken,\n    underlyingName,\n    underlyingSymbol,\n    accountSupplyInUnits,\n    isCollaterable,\n\n    priceCalculationDecimals,\n    pricePerUnitUsd,\n    collateralFactorInUnits,\n    currentBorrowLimitUsd,\n    usedBorrowPercentage,\n    totalAccountBorrowBalanceUsd,\n  };\n}\n","import React from \"react\";\nimport {\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { TokenIcon } from \"../../icons/TokenIcon\";\nimport { BRAND_MAIN_COLOR, GRAYISH_TEXT } from \"../../../theme/themeConstants\";\nimport { ActionRates } from \"../MarketInteractionModal/base/rates/ActionRates\";\nimport { BorrowLimitRates } from \"../MarketInteractionModal/base/rates/BorrowLimitRates\";\nimport { ModalActionButton } from \"../MarketInteractionModal/base/ModalActionButton\";\nimport { ModalFooter } from \"../MarketInteractionModal/base/ModalFooter\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../txWaitingModal/TxWaitingModal\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n\n  incentiveTokenAddress: string;\n  incentiveTokenName: string;\n  incentiveTokenSymbol: string;\n\n  balanceInUnits: number;\n  unclaimedInUnits: number;\n\n  canClaim: boolean;\n  onClaim: () => void;\n\n  // actionName: string;\n  // actionButtonActive: boolean;\n  // actionButtonText: string;\n  // actionButtonOnClick: () => void;\n\n  // TX waiting\n  // waitingForUserApproval: boolean;\n  // waitingForTxConfirmation: boolean;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  collateralInteractionPanel: {\n    position: \"relative\",\n    width: \"30rem\",\n    maxWidth: \"100%\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {\n    fontWeight: \"bold\",\n  },\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  messageContainer: {\n    paddingTop: \"1rem\",\n    paddingBottom: \"2rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    textAlign: \"center\",\n\n    color: GRAYISH_TEXT,\n    // display: \"flex\",\n    // flexDirection: \"row\",\n  },\n\n  tabBody: {\n    // paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    // backgroundColor: \"#ffffff\",\n  },\n\n  heroToken: {\n    height: \"4rem\",\n    width: \"4rem\",\n    marginBottom: \"1rem\",\n  },\n}));\n\nexport const IncentiveModal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    open,\n    closeModal,\n    incentiveTokenName,\n    incentiveTokenAddress,\n    incentiveTokenSymbol,\n    balanceInUnits,\n    unclaimedInUnits,\n    canClaim,\n    onClaim,\n  } = props;\n\n  // if (waitingForTxConfirmation || waitingForUserApproval) {\n  //   const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n  //     ? \"CONFIRMATION\"\n  //     : \"USER_APPROVAL\";\n  //\n  //   return (\n  //     <TxWaitingModal\n  //       open={open}\n  //       closeModal={closeModal}\n  //       txWaitingStage={txWaitingStage}\n  //     />\n  //   );\n  // }\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.collateralInteractionPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Quick-n-Dirty Market icon */}\n          <TokenIcon\n            symbol={incentiveTokenSymbol}\n            extraClasses={[classes.tokenIcon, classes.upperLeftCorner]}\n          />\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h6\"} className={classes.title}>\n              {incentiveTokenName}\n            </Typography>\n          </div>\n\n          <div className={classes.messageContainer}>\n            <div>\n              <TokenIcon\n                symbol={incentiveTokenSymbol}\n                extraClasses={[classes.heroToken]}\n              />\n            </div>\n\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <div style={{ flex: 1, textAlign: \"center\" }}>\n                <Typography style={{ fontWeight: \"bold\" }}>\n                  Wallet Balance\n                </Typography>\n                {/*<br />*/}\n                <Typography variant={\"body2\"} style={{ color: \"black\" }}>\n                  {balanceInUnits.toFixed(4)}\n                </Typography>\n              </div>\n\n              <div style={{ flex: 1, textAlign: \"center\" }}>\n                <Typography style={{ fontWeight: \"bold\" }}>\n                  Unclaimed balance\n                </Typography>\n                {/*<br />*/}\n                <Typography variant={\"body2\"} style={{ color: \"black\" }}>\n                  {unclaimedInUnits.toFixed(4)}\n                </Typography>\n              </div>\n            </div>\n          </div>\n\n          {/*/!* Tab Body *!/*/}\n          <div className={classes.tabBody}>\n            {/*  /!* Borrow limit rates *!/*/}\n            {/*  <BorrowLimitRates*/}\n            {/*    borrowLimitUsd={currentBorrowLimit || 0}*/}\n            {/*    borrowLimitUsedPercentage={usedBorrowLimitPercentage || 0}*/}\n            {/*    predictedBorrowLimitPercentage={*/}\n            {/*      usedBorrowLimitPercentageAfterChange || 0*/}\n            {/*    }*/}\n            {/*    predictedBorrowLimitUsd={borrowLimitAfterChange || 0}*/}\n            {/*    displayPredictedValues={showPredictedBorrowLimits}*/}\n            {/*  />*/}\n\n            {/*  <br />*/}\n            {/*  <br />*/}\n\n            {/* Action button */}\n            <ModalActionButton\n              onClick={onClaim}\n              text={`Claim ${incentiveTokenSymbol}`}\n              disabled={!canClaim}\n            />\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","import React, { ReactNode, useCallback, useMemo, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport {\n  useCalculateChangeInBorrowLimits,\n  useMarketInteractionModalBase,\n} from \"../MarketInteractionModal/marketInteractionModalHooks\";\nimport {\n  useTxWaitingLogic,\n  useTxWaitingStateExplicit,\n} from \"../txWaitingModal/txWaitingHooks\";\nimport { IncentiveModal } from \"./IncentiveModal\";\nimport {\n  useIncentiveModalState,\n  useOnClaimLnIncentive,\n} from \"./incentiveModalHooks\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nexport const ConnectedIncentiveModal = observer<\n  React.FunctionComponent<IProps>\n>((props) => {\n  const { open, closeModal } = props;\n\n  const {\n    activeLNStore,\n    incentiveTokenAddress,\n    incentiveTokenName,\n    incentiveTokenSymbol,\n    compAllocatedUnits,\n    compBalanceUnits,\n  } = useIncentiveModalState();\n\n  const {\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation,\n  } = useTxWaitingStateExplicit();\n\n  const onClaimClicked = useOnClaimLnIncentive(\n    activeLNStore,\n    closeModal,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation\n  );\n\n  const canClaim = compAllocatedUnits > 0;\n\n  return (\n    <IncentiveModal\n      open={open}\n      closeModal={closeModal}\n      incentiveTokenAddress={incentiveTokenAddress || \"\"}\n      incentiveTokenName={incentiveTokenName || \"\"}\n      incentiveTokenSymbol={incentiveTokenSymbol || \"\"}\n      balanceInUnits={compBalanceUnits}\n      unclaimedInUnits={compAllocatedUnits}\n      canClaim={canClaim}\n      onClaim={onClaimClicked}\n    />\n  );\n});\n","import {\n  useAccountStore,\n  useLendingNetworksStore,\n  useModalsStore,\n} from \"../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useTxWaitingLogicExplicit } from \"../txWaitingModal/txWaitingHooks\";\nimport { SingleLNStore } from \"../../../store/multiInstanceStores/SingleLNStore\";\n\nexport function useIncentiveModalState() {\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const activeLNStore = lendingNetworksStore.activeLNStore;\n\n  const incentiveTokenSymbol = activeLNStore?.distributionAssetParams.symbol;\n  const incentiveTokenName = activeLNStore?.distributionAssetParams.name;\n  const incentiveTokenAddress = activeLNStore?.distributionAssetParams.address;\n\n  const compBalanceUnits = activeLNStore?.compBalanceUnits || 0;\n  const compAllocatedUnits = activeLNStore?.compAllocatedUnits || 0;\n\n  return {\n    activeLNStore,\n    incentiveTokenSymbol,\n    incentiveTokenName,\n    incentiveTokenAddress,\n    compBalanceUnits,\n    compAllocatedUnits,\n  };\n}\n\nexport function useOnClaimLnIncentive(\n  activeLNStore: SingleLNStore | undefined,\n  closeModal: () => void,\n  setWaitingForUserApproval: (val: boolean) => void,\n  setWaitingForTxConfirmation: (val: boolean) => void\n) {\n  const createClaimLnIncentiveTx = useCallback(() => {\n    return activeLNStore!.claimLnIncentiveToken();\n  }, [activeLNStore]);\n\n  const wrappedClaimTx = useTxWaitingLogicExplicit(\n    createClaimLnIncentiveTx,\n    closeModal,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation\n  );\n\n  const onClaimClicked = useCallback(async () => {\n    if (activeLNStore) {\n      console.log(`Claim LN incentive button clicked`);\n      await wrappedClaimTx();\n      console.log(`Claim LN incentive is done`);\n    } else {\n      return console.log(\"No Ln Store for claiming\");\n    }\n  }, [activeLNStore, wrappedClaimTx]);\n\n  return onClaimClicked;\n}\n","import { makeStyles, Tab, Tabs, Typography } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport {\n  useLendingNetworksStore,\n  useModalsStore,\n} from \"../../store/storeHooks\";\nimport { MainLendingNetworkTab } from \"./MarketsTab/MainLendingNetworkTab\";\nimport { SupplyModal } from \"../../components/modals/MarketInteractionModal/SupplyModal\";\nimport { BorrowModal } from \"../../components/modals/MarketInteractionModal/BorrowModal\";\nimport { ConnectedCollateralModal } from \"../../components/modals/collateralModal/ConnectedCollateralModal\";\nimport { ConnectedIncentiveModal } from \"../../components/modals/incentiveModal/ConnectedIncentiveModal\";\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n}));\n\ninterface IProps {\n  networkId: string;\n}\n\nexport const LendingNetworkPage = observer<React.FC<IProps>>(\n  ({ networkId }) => {\n    const classes = useStyles();\n    const { path, url } = useRouteMatch();\n    const history = useHistory();\n    const lendingNetworksStore = useLendingNetworksStore();\n    const [error, setError] = React.useState<string | null>(null);\n\n    const lnStore = lendingNetworksStore.activeLNStore;\n    const modalsStore = useModalsStore();\n\n    console.log(`Should modal open : ${modalsStore.isSupplyModalActive}`);\n\n    // Update active LN\n    useEffect(() => {\n      lendingNetworksStore.setActiveLn(networkId);\n    }, [lendingNetworksStore, networkId]);\n\n    // const [\n    //   lendingNetworkStore,\n    //   setLendingNetworkStore,\n    // ] = React.useState<SingleLNStore | null>(null);\n\n    // React.useEffect(() => {\n    //   if (lendingNetworksStore.isLoading) {\n    //     return;\n    //   }\n    //\n    //   const lendingNetworkStore = lendingNetworksStore.getLendingNetworkStore(\n    //     networkId\n    //   );\n    //   if (lendingNetworkStore === null) {\n    //     setError(`A network with id \"${networkId}\" was not found`);\n    //   } else {\n    //     setLendingNetworkStore(lendingNetworkStore);\n    //   }\n    // }, [lendingNetworksStore, lendingNetworksStore.isLoading, networkId]);\n\n    if (lendingNetworksStore.isLoading) {\n      return <Typography>Loading...</Typography>;\n    }\n\n    if (error) {\n      return <Typography>Error: {error}</Typography>;\n    }\n\n    return (\n      // TODO : Change this to use proper page structure\n      <div className={classes.root}>\n        {/* DEV_NOTE : Temp solution for tabs */}\n        {/*<div*/}\n        {/*  style={{*/}\n        {/*    display: \"flex\",*/}\n        {/*    justifyContent: \"center\",*/}\n        {/*  }}*/}\n        {/*>*/}\n        {/*  <Tabs*/}\n        {/*    value={history.location.pathname}*/}\n        {/*    onChange={(e, value) => history.push(value)}*/}\n        {/*  >*/}\n        {/*    <Tab label=\"Markets\" value={`${url}/markets`} />*/}\n        {/*    <Tab label=\"Price Feed\" value={`${url}/price-feed`} />*/}\n        {/*  </Tabs>*/}\n        {/*</div>*/}\n        <Switch>\n          <Route\n            path={`${path}/markets`}\n            exact\n            render={() => <MainLendingNetworkTab />}\n          />\n          <Route\n            path={`${path}/price-feed`}\n            render={() => <div>Price Feed</div>}\n          />\n          <Redirect to={`${path}/markets`} />\n        </Switch>\n\n        {/*  Modals used by this page  */}\n        <SupplyModal\n          open={modalsStore.isSupplyModalActive}\n          closeModal={() => modalsStore.hideSupplyModal()}\n        />\n        <BorrowModal\n          open={modalsStore.isBorrowModalActive}\n          closeModal={() => modalsStore.hideBorrowModal()}\n        />\n        <ConnectedCollateralModal\n          open={modalsStore.isCollateralModalActive}\n          closeModal={() => modalsStore.hideCollateralModal()}\n        />\n\n        <ConnectedIncentiveModal\n          closeModal={() => modalsStore.hideIncentiveModal()}\n          open={modalsStore.isInventiveModalActive}\n        />\n      </div>\n    );\n  }\n);\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { ILendingNetworkGist } from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TokenIcon } from \"../../components/icons/TokenIcon\";\n\ninterface IProps {\n  networkGist: ILendingNetworkGist;\n  onViewNetwork: (networkId: string) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  lnAsset: {\n    margin: \"0.1rem\",\n  },\n}));\n\nexport const NetworkListItem: React.FC<IProps> = observer((props) => {\n  const classes = useStyles();\n  const { onViewNetwork, networkGist } = props;\n  const { id, name, assets } = networkGist;\n  // TODO : Fix styling\n  return (\n    <Card\n      style={{\n        margin: \"0.5rem\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        flex: 1,\n        maxWidth: \"20rem\",\n        // backgroundColor: \"rgba(0,0,0,0.1)\",\n      }}\n    >\n      <CardHeader\n        title={name}\n        style={{ textAlign: \"center\", fontWeight: \"bold\" }}\n      />\n      <Typography variant={\"body1\"} style={{ fontWeight: \"bold\" }}>\n        In Testing\n      </Typography>\n      <CardContent\n        style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\n      >\n        {/*{assets.map((a) => (*/}\n        {/*  <div key={a.symbol}>{a.name}</div>*/}\n        {/*))}*/}\n        {assets.map((a) => (\n          <TokenIcon\n            symbol={a.symbol}\n            key={a.symbol}\n            extraClasses={[classes.lnAsset]}\n          />\n        ))}\n      </CardContent>\n      <CardActions\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => onViewNetwork(id)}\n        >\n          View Network\n        </Button>\n      </CardActions>\n    </Card>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { ILendingNetworkGist } from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport { NetworkListItem } from \"./NetworkListItem\";\nimport { SingleLNStore } from \"../../store/multiInstanceStores/SingleLNStore\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    display: \"flex\",\n    margin: spacing(4, 8),\n    justifyContent: \"center\",\n  },\n}));\n\ninterface IProps {\n  lendingNetworksGists: ILendingNetworkGist[];\n  onViewNetwork: (networkId: string) => void;\n}\n\nexport const NetworksList: React.FC<IProps> = observer((props) => {\n  const classes = useStyles();\n  const { lendingNetworksGists, onViewNetwork } = props;\n\n  return (\n    <div className={classes.root}>\n      {lendingNetworksGists.map((network) => (\n        <NetworkListItem\n          onViewNetwork={onViewNetwork}\n          networkGist={network}\n          key={network.id}\n        />\n      ))}\n    </div>\n  );\n});\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router\";\nimport { useLendingNetworksStore } from \"../../store/storeHooks\";\nimport { NetworksList } from \"./NetworksList\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    paddingTop: spacing(10),\n  },\n  title: {\n    paddingBottom: spacing(2),\n  },\n}));\n\nexport const AllNetworksPage: React.FC = observer(() => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { url } = useRouteMatch();\n  const lendingNetworksStore = useLendingNetworksStore();\n  // const { isLoading, lendingNetworks } = useLendingNetworksStore();\n  const activeLendingNetworkId = lendingNetworksStore.activeLendingNetworkId;\n  // Reset the 'active ln' when entering this page\n  useEffect(() => {\n    console.log(`In effect ${activeLendingNetworkId}`);\n    if (activeLendingNetworkId !== \"\") {\n      lendingNetworksStore.setActiveLn(\"\");\n    }\n  }, [activeLendingNetworkId, lendingNetworksStore]);\n\n  const onViewNetwork = React.useCallback(\n    (networkId: string) => {\n      const targetUrl = `${url}/${networkId}`;\n      history.push(targetUrl);\n    },\n    [history, url]\n  );\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h3\" align=\"center\" className={classes.title}>\n        Ola Lending Networks\n      </Typography>\n      <Typography variant=\"h5\" align=\"center\">\n        A Leap Forward in Decentralized Peer-to-Pool Lending\n      </Typography>\n      {lendingNetworksStore.isLoading ? (\n        <Typography>Loading...</Typography>\n      ) : (\n        <NetworksList\n          lendingNetworksGists={lendingNetworksStore.allLNGists}\n          onViewNetwork={onViewNetwork}\n        />\n      )}\n    </div>\n  );\n});\n","import { makeStyles, Paper } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { LendingNetworkPage } from \"./LendingNetworkPage/LendingNetworkPage\";\nimport { AllNetworksPage } from \"./AllNetworksPage/AllNetworksPage\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    borderRadius: 16,\n    width: \"80%\",\n    minHeight: 400,\n    maxWidth: 1200,\n    padding: spacing(2),\n    marginTop: spacing(4),\n    marginBottom: spacing(4),\n    margin: \"0 auto\",\n  },\n}));\n\nexport const Main: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    // <Paper elevation={22} className={classes.root}>\n    <Switch>\n      <Route path=\"/networks\" exact component={AllNetworksPage} />\n      <Route\n        path=\"/networks/:network_id\"\n        render={({ match }) => (\n          <LendingNetworkPage networkId={match.params.network_id} />\n        )}\n      />\n      <Redirect to=\"/networks\" />\n    </Switch>\n    // </Paper>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Header } from \"./components/header/Header\";\nimport { Main } from \"./pages/Main\";\nimport { observer } from \"mobx-react\";\nimport { useLendingNetworksStore } from \"./store/storeHooks\";\nimport { TLNContractsAddresses } from \"./services/Services\";\n\n// TODO : Handle tx failing gracefully.\n\nexport const App = observer(() => {\n  // This part is responsible for keeping the LN services aimed at the right LN contracts\n  const lendingNetworksStore = useLendingNetworksStore();\n  const firstLNParamsUnitrollerAddress =\n    lendingNetworksStore.lendingNetworkParameters[0]?.unitrollerAddress || \"\";\n  // const lnContractsAddresses = useMemo(() => {\n  //   console.log(\"Calculatin ln addresses\");\n  //   // console.log(firstLNParamsUnitrollerAddress);\n  //   const addresses: TLNContractsAddresses = {\n  //     unitrollerAddress:\n  //       lendingNetworksStore.lendingNetworkParameters[0]?.unitrollerAddress ||\n  //       \"\",\n  //   };\n  //\n  //   return addresses;\n  // }, [lendingNetworksStore.lendingNetworkParameters]);\n\n  // const addresses: TLNContractsAddresses = {\n  //   unitrollerAddress:\n  //     lendingNetworksStore.lendingNetworkParameters[0]?.unitrollerAddress || \"\",\n  // };\n\n  // useSyncLNServices();\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL || \"/\"}>\n      <Header />\n      <Main />\n    </BrowserRouter>\n  );\n});\n","import createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport responsiveFontSizes from \"@material-ui/core/styles/responsiveFontSizes\";\nimport { BACKGROUND_DARK_COLOR, BRAND_MAIN_COLOR } from \"./themeConstants\";\n\nexport const baseTheme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      primary: {\n        // main: \"#1a237e\",\n        main: BRAND_MAIN_COLOR,\n      },\n      secondary: {\n        main: \"#0091ea\",\n      },\n      text: {\n        primary: \"#141E27\",\n      },\n      background: {\n        default: BACKGROUND_DARK_COLOR,\n      },\n    },\n  })\n);\n","import Web3 from \"web3\";\nimport { ICryptoWalletConnectionService } from \"./ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"./IEthereumProvider\";\nimport { fromWei } from \"web3-utils\";\n\n// TODO : FUTURE : O.L : Change all ethereum.<call> to the new standard events format.\n//                        Consider using AbstractProvider\nexport class CryptoWalletConnectionService\n  implements ICryptoWalletConnectionService {\n  private readonly web3?: Web3;\n  public readonly hasEthereumProvider: boolean;\n  public readonly hasEventsSupport: boolean;\n  public readonly isMetamaskInstalled: boolean;\n  public readonly isSemiCompliantEthereumProviderInstalled: boolean;\n\n  constructor(private ethereum: IEthereumProvider) {\n    this.hasEthereumProvider = this.ethereum !== undefined;\n\n    // Distinguishes between installed ethereum providers\n    this.isMetamaskInstalled =\n      this.hasEthereumProvider && !!this.ethereum.isMetaMask;\n    this.isSemiCompliantEthereumProviderInstalled =\n      this.hasEthereumProvider && !this.ethereum.isMetaMask;\n\n    if (this.hasEthereumProvider) {\n      this.web3 = new Web3(this.ethereum as any);\n    }\n\n    const onFunction = this.hasEthereumProvider ? this.ethereum.on : undefined;\n    this.hasEventsSupport = onFunction !== undefined && onFunction !== null;\n  }\n\n  public async requestConnectionPermission(): Promise<boolean> {\n    try {\n      await this.ethereum.enable();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Getters\n  public getEthereumProvider() {\n    return this.ethereum;\n  }\n\n  public get didUserApproveDappInThePast(): boolean {\n    // DEV_NOTE : O.L : IMPORTANT ! : This currently works with the soon to be deprecated apis of metamask injected 'ethereum'\n    //                                and is not part of the properties in the official types of web3.\n    //                                We need to check and find a better way to detect if the user has already approved wallet access.\n    // @ts-ignore\n    return this.isMetamaskInstalled && !!this.ethereum.selectedAddress;\n  }\n\n  async getIsMainNetwork(): Promise<boolean> {\n    return this.isMetamaskInstalled && this.ethereum.networkVersion === \"1\";\n  }\n\n  // Data \"reading\"\n  async readChainId(): Promise<number> {\n    const chainId = (await this.web3?.eth.getChainId()) || -1;\n    return chainId;\n  }\n\n  async readEthereumBalance(address: string): Promise<number> {\n    const balance = await this.web3?.eth.getBalance(address);\n    const balanceInDecimal = parseInt(fromWei(balance || \"0\"));\n    return balanceInDecimal;\n  }\n\n  async readMainAddress(): Promise<string> {\n    const accounts = (await this.web3?.eth.getAccounts()) || [];\n    return accounts[0];\n  }\n\n  async readCurrentBlockNumber(): Promise<number> {\n    return this.web3?.eth.getBlockNumber() || 0;\n  }\n\n  // Event listeners\n  onMainAddressChange(onChange: (mainAddress: string) => void): () => void {\n    if (!this.hasEventsSupport) {\n      throw new Error(\n        `Cannot subscribe to events with given Ethereum provider`\n      );\n    }\n\n    const listener = (accounts: string[]) => onChange(accounts[0]);\n\n    this.ethereum.on(\"accountsChanged\", listener);\n\n    return () => {\n      this.ethereum.off(\"accountsChanged\", listener);\n    };\n  }\n\n  onChainIdChange(onChange: (chainId: number) => void): () => void {\n    if (!this.hasEventsSupport) {\n      throw new Error(\n        `Cannot subscribe to events with given Ethereum provider`\n      );\n    }\n\n    const listener = (chainId: string) => {\n      console.log(`Typof chainId : ${typeof chainId}`);\n      onChange(parseInt(chainId));\n    };\n\n    this.ethereum.on(\"chainChanged\", listener);\n\n    return () => {\n      this.ethereum.off(\"chainChanged\", listener);\n    };\n  }\n}\n","export const READ_ONLY_ETHEREUM_ENDPOINT =\n  process.env.REACT_APP_READ_ONLY_ETHEREUM_ENDPOINT;\n\nexport const IS_PROD =\n  process.env.REACT_APP_USE_PROD === \"true\" ||\n  process.env.NODE_ENV === \"production\";\n\nexport const IS_DEV = !IS_PROD;\n","export async function fetchLocalJson<T = any>(localPath: string): Promise<T> {\n  const fetchRes = await fetch(`${process.env.PUBLIC_URL}/${localPath}`);\n  const json = (await fetchRes.json()) as T;\n\n  return json;\n}\n","export const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nexport const NATIVE_COIN_ASSET_ADDRESS =\n  \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\";\n","import { ILendingNetworkParameters } from \"./ILendingNetworksService\";\nimport { ZERO_ADDRESS } from \"../../constants/constantAddresses\";\n\nconst wrappedFuseAddress = \"0x57378Bd0FfD53155F58DD5Ff71A68e73A9b5fAcb\";\n\nexport const FUSE_ON_ROPSTEN: ILendingNetworkParameters = {\n  name: \"Fuse Ropsten\",\n  lnHomePage: \"https://www.fuse.io\",\n  id: \"0x9c518a98b22B3B81ED063cf4E604CeAb8c3a1b7B\",\n  unitrollerAddress: \"0x9c518a98b22B3B81ED063cf4E604CeAb8c3a1b7B\",\n  maximillionAddress: \"0xd7c6D91567bAbaB3C9A52169D2F12DA9C62E61a5\",\n  chainId: \"3\",\n  assets: [\n    {\n      symbol: \"WBTC\",\n      name: \"Wrapped BTC\",\n      address: \"0xA2f99D0123397fEb028B61953060dda4a3a74519\",\n      decimals: 8,\n      isNativeCoin: false,\n    },\n    {\n      symbol: \"ETH\",\n      name: \"Ether\",\n      address: ZERO_ADDRESS,\n      decimals: 18,\n      isNativeCoin: true,\n    },\n    {\n      symbol: \"USDC\",\n      name: \"USD Coin\",\n      address: \"0xAB819c1502607C52fa0fc024F32b125EEd01f18c\",\n      decimals: 6,\n      isNativeCoin: false,\n    },\n    {\n      symbol: \"WFUSE\",\n      name: \"Wrapped Fuse\",\n      address: wrappedFuseAddress,\n      decimals: 18,\n      isNativeCoin: false,\n    },\n  ],\n  distributionAssetParameters: {\n    symbol: \"WFUSE\",\n    name: \"Wrapped Fuse\",\n    address: wrappedFuseAddress,\n    decimals: 18,\n    isNativeCoin: false,\n  },\n};\n\nexport const LendingNetworksParam: ILendingNetworkParameters[] = [\n  FUSE_ON_ROPSTEN,\n];\n","import {\n  ILendingNetworkGist,\n  ILendingNetworkLiveState,\n  ILendingNetworkParameters,\n  ILendingNetworksService,\n} from \"./ILendingNetworksService\";\nimport { IS_DEV } from \"../../configs\";\nimport { fetchLocalJson } from \"../networkActions\";\nimport LocalNetworkDevLNAddresses from \"../../solidityInterfaces/localLNaddresses.json\";\n// TODO : CRITICAL almost : Add 'decimals on chain' to make sure that decimals are right for each chain.\nimport LocalNetworkDevTokensAddresses from \"../../solidityInterfaces/localTokensAddresses.json\";\nimport { NATIVE_COIN_ASSET_ADDRESS } from \"../../constants/constantAddresses\";\nimport { LendingNetworksParam } from \"./lendingNetworksParams\";\n\nexport class LendingNetworksService implements ILendingNetworksService {\n  async fetchALlLendingNetworksParameters(): Promise<\n    ILendingNetworkParameters[]\n  > {\n    const lnParams: ILendingNetworkParameters[] = [];\n\n    if (IS_DEV) {\n      const devNetworksgist = await this.fetchDevNetworkGist();\n\n      lnParams.push(...devNetworksgist);\n    } else {\n      lnParams.push(...LendingNetworksParam);\n    }\n\n    return lnParams;\n  }\n\n  async fetchAllLendingNetworksGists(): Promise<ILendingNetworkGist[]> {\n    return [];\n    const allLNsGists: ILendingNetworkGist[] = [];\n  }\n\n  async fetchLendingNetworkLiveState(\n    networkId: string\n  ): Promise<ILendingNetworkLiveState> {\n    return {\n      participatingSuppliers: 0,\n      tvl: 0,\n    };\n  }\n\n  private async fetchDevNetworkGist() {\n    const devNetworksgist = await fetchLocalJson<ILendingNetworkGist[]>(\n      \"lnParameters/devLnParams.json\"\n    );\n\n    // DEV_NOTE : We have one, and we want to at least semi-dynamically get the addresses\n    devNetworksgist[0].id = LocalNetworkDevLNAddresses.unitroller;\n    devNetworksgist[0].unitrollerAddress =\n      LocalNetworkDevLNAddresses.unitroller;\n    devNetworksgist[0].maximillionAddress =\n      LocalNetworkDevLNAddresses.maxmimilion;\n    devNetworksgist[0].distributionAssetParameters.address =\n      LocalNetworkDevTokensAddresses[\"WFUSE\"];\n\n    for (let assetInMarket of devNetworksgist[0].assets) {\n      const { symbol } = assetInMarket;\n      // @ts-ignore\n      const assetAddress = LocalNetworkDevTokensAddresses[symbol];\n      const assetAddressToUse =\n        symbol === \"FUSE\" ? NATIVE_COIN_ASSET_ADDRESS : assetAddress;\n\n      if (!assetAddressToUse) {\n        // This quick-fail will save some time debugging\n        throw new Error(`No addres for asset ${symbol}`);\n      } else {\n        assetInMarket.address = assetAddressToUse;\n      }\n    }\n\n    return devNetworksgist;\n  }\n}\n","/**\n * This functions takes a tuple returned from an 'ethers' contract object and returns it in a pure object form.\n */\nexport function etheresStructResponseToObject<T extends object>(\n  ethersStructResponse: any\n): T {\n  const obj = {};\n\n  for (let key in ethersStructResponse) {\n    // DEV_NOTE : We assume that all numeric keys belongs to the array and ignore them\n    if (Number.isNaN(parseInt(key))) {\n      // @ts-ignore\n      obj[key] = ethersStructResponse[key];\n    }\n  }\n\n  return obj as T;\n}\n","import { Contract } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport UniswapAnchoredViewJson from \"../../../solidityInterfaces/UniswapAnchoredView.json\";\nimport {\n  IUniswapAnchoredViewService,\n  TTokenConfig,\n} from \"./IUniswapAnchoredViewService\";\nimport { UniswapAnchoredView } from \"../../../solidityInterfaces/UniswapAnchoredView\";\nimport { etheresStructResponseToObject } from \"../contractsIntegrationUtils\";\n\nexport class UniswapAnchoredViewService implements IUniswapAnchoredViewService {\n  private uniswapAnchoredViewContract: UniswapAnchoredView;\n\n  constructor(\n    uniswapAnchoredViewAddress: string,\n    signerOrProvider?: Signer | Provider\n  ) {\n    this.uniswapAnchoredViewContract = new Contract(\n      uniswapAnchoredViewAddress,\n      UniswapAnchoredViewJson.abi,\n      signerOrProvider\n    ) as UniswapAnchoredView;\n  }\n\n  /**\n   * @ DEV_NOTE : Basic example for contract reading function.\n   */\n  async getTokenConfigBySymbol(tokenSymbol: string): Promise<TTokenConfig> {\n    return etheresStructResponseToObject(\n      await this.uniswapAnchoredViewContract.getTokenConfigBySymbol(tokenSymbol)\n    );\n  }\n}\n","import { IEthereumProvider } from \"../services/cryptoWalletConnectionService/IEthereumProvider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { ethers } from \"ethers\";\nimport { READ_ONLY_ETHEREUM_ENDPOINT } from \"../configs\";\n\nexport function getSignerOrProvider(\n  ethereumProvider?: IEthereumProvider\n): Signer | Provider {\n  let signerOrProvider;\n\n  // DEV_NOTE: This should allow us to continue reading\n  if (ethereumProvider) {\n    // @ts-ignore\n    signerOrProvider = new ethers.providers.Web3Provider(ethereumProvider);\n  } else {\n    signerOrProvider = new ethers.providers.JsonRpcProvider(\n      // TODO: Change this to network specific values (mainnet, kovan etc...)\n      READ_ONLY_ETHEREUM_ENDPOINT\n    );\n  }\n\n  const signer = signerOrProvider.getSigner();\n  if (signer) {\n    signer\n      .getAddress()\n      .then((address) => console.log(`Signer is ${address}`))\n      .catch((e) => console.log(`Signer exists but we cannot get address`));\n    signerOrProvider = signer;\n  } else {\n    console.log(`Provider only`);\n  }\n\n  return signerOrProvider;\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport ComptrollerJson from \"../../../solidityInterfaces/Comptroller.json\";\nimport { IComptrollerService } from \"./IComptrollerService\";\nimport { Comptroller } from \"../../../solidityInterfaces/Comptroller\";\nimport { toJS } from \"mobx\";\n\nexport class ComptrollerService implements IComptrollerService {\n  // We will use the unitroller address but with the 'comptroller' interface (As it is only a proxy)\n  private unitrollerProxyContract: Comptroller;\n\n  constructor(unitrollerAddress: string, signerOrProvider: Signer | Provider) {\n    console.log(\"Before init uni\");\n\n    this.unitrollerProxyContract = new Contract(\n      unitrollerAddress,\n      ComptrollerJson.abi,\n      signerOrProvider\n    ) as Comptroller;\n\n    console.log(\"Initialized unitroller\");\n  }\n\n  public getComptrollerProxyAddress(): string {\n    return this.unitrollerProxyContract.address;\n  }\n\n  // TODO : This is not called for now, check if it is needed and then check if it works\n  public updateUnitrollerAddress(unitrollerAddress: string): void {\n    const after = this.unitrollerProxyContract.attach(unitrollerAddress);\n    console.log(`Param is ${unitrollerAddress}`);\n    console.log(`Result address is ${toJS(after.address)}`);\n    console.log(\n      `Property address is ${toJS(this.unitrollerProxyContract.address)}`\n    );\n  }\n\n  /**\n   * @ DEV_NOTE : All of the CTokens of this comptroller\n   */\n  async getAllMarkets(): Promise<string[]> {\n    const markets = await this.unitrollerProxyContract.getAllMarkets();\n    return markets;\n  }\n\n  async enterMarkets(cTokens: string[]): Promise<ContractTransaction> {\n    return this.unitrollerProxyContract.enterMarkets(cTokens);\n    // const res = await this.unitrollerProxyContract.callStatic.enterMarkets(\n    //   cTokens\n    // );\n    //\n    // console.log(`enter markets : ${res}`);\n    //\n    // return (null as any) as ContractTransaction;\n  }\n  async exitMarket(cToken: string): Promise<ContractTransaction> {\n    return this.unitrollerProxyContract.exitMarket(cToken);\n  }\n\n  async claimIncentiveFromAllMarkets(\n    account: string\n  ): Promise<ContractTransaction> {\n    return this.unitrollerProxyContract[\"claimComp(address)\"](account);\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport ERC20Json from \"../../../solidityInterfaces/ERC20.json\";\nimport { ERC20 } from \"../../../solidityInterfaces/ERC20\";\nimport { IErc20Service } from \"./IErc20Service\";\n\nexport class Erc20Service implements IErc20Service {\n  private erc20Contract: ERC20;\n\n  constructor(erc20Address: string, signerOrProvider: Signer | Provider) {\n    this.erc20Contract = new Contract(\n      erc20Address,\n      ERC20Json.abi,\n      signerOrProvider\n    ) as ERC20;\n  }\n\n  public async readBalance(address: string): Promise<BigNumber> {\n    return this.erc20Contract.balanceOf(address);\n  }\n\n  public async readAllowance(\n    ownerAddress: string,\n    spenderAddress: string\n  ): Promise<BigNumber> {\n    return this.erc20Contract.allowance(ownerAddress, spenderAddress);\n  }\n\n  public async approve(\n    spenderAddress: string,\n    amount: BigNumber\n  ): Promise<ContractTransaction> {\n    return this.erc20Contract.approve(spenderAddress, amount);\n  }\n}\n","import { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { IErc20BuilderService } from \"./IErc20BuilderService\";\nimport { IErc20Service } from \"./IErc20Service\";\nimport { Erc20Service } from \"./Erc20Service\";\n\nexport class Erc20BuilderService implements IErc20BuilderService {\n  constructor(private signerOrProvider: Signer | Provider) {}\n\n  buildErc20Service(erc20Address: string): IErc20Service {\n    return new Erc20Service(erc20Address, this.signerOrProvider);\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport CErc20Json from \"../../../solidityInterfaces/CErc20.json\";\nimport { ICErc20Service } from \"./ICErc20Service\";\nimport { CErc20 } from \"../../../solidityInterfaces/CErc20\";\n\nexport class CErc20Service implements ICErc20Service {\n  private cErc20Contract: CErc20;\n\n  constructor(erc20Address: string, signerOrProvider: Signer | Provider) {\n    this.cErc20Contract = new Contract(\n      erc20Address,\n      CErc20Json.abi,\n      signerOrProvider\n    ) as CErc20;\n  }\n\n  public async mint(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.mint(amount);\n  }\n\n  public async withdraw(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.redeem(amount);\n  }\n\n  public async borrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.borrow(amount);\n  }\n\n  public async repayBorrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.repayBorrow(amount);\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport CEtherJson from \"../../../solidityInterfaces/CEther.json\";\nimport MaximillionJson from \"../../../solidityInterfaces/Maximillion.json\";\nimport { ICEtherService } from \"./ICEtherService\";\nimport { CEther } from \"../../../solidityInterfaces/CEther\";\nimport { Maximillion } from \"../../../solidityInterfaces/Maximillion\";\nimport { formatEther, parseEther } from \"ethers/lib/utils\";\n\nexport class CEtherService implements ICEtherService {\n  private cEther: CEther;\n  private maximillion: Maximillion;\n\n  constructor(\n    cEtherAddress: string,\n    maximillionAddress: string,\n    private signerOrProvider: Signer | Provider\n  ) {\n    this.cEther = new Contract(\n      cEtherAddress,\n      CEtherJson.abi,\n      signerOrProvider\n    ) as CEther;\n\n    this.maximillion = new Contract(\n      maximillionAddress,\n      MaximillionJson.abi,\n      signerOrProvider\n    ) as Maximillion;\n  }\n\n  public async mint(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.mint({ value: amount });\n  }\n\n  public async withdraw(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.redeemUnderlying(amount);\n  }\n\n  public async borrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.borrow(amount);\n  }\n\n  public async repayBorrow(amount: BigNumber): Promise<ContractTransaction> {\n    throw new Error(`Cannot call 'repayBorrow' for oNative`);\n  }\n\n  public async repayBorrowWithMaximillion(\n    borrowerAddress: string,\n    amount: BigNumber\n  ): Promise<ContractTransaction> {\n    console.log(`CEther repay borrow : ${amount.toString()}`);\n    console.log(`CEther repay borrow : ${formatEther(amount)}`);\n    return this.maximillion.repayBehalf(borrowerAddress, { value: amount });\n  }\n}\n","import { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { ICTokensBuilderService } from \"./ICTokensBuilderService\";\nimport { ICErc20Service } from \"./ICErc20Service\";\nimport { CErc20Service } from \"./CErc20Service\";\nimport { CEtherService } from \"./CEtherService\";\n\nexport class CTokensBuilderService implements ICTokensBuilderService {\n  constructor(private signerOrProvider: Signer | Provider) {}\n\n  buildCErc20Service(cErc20Address: string): ICErc20Service {\n    return new CErc20Service(cErc20Address, this.signerOrProvider);\n  }\n\n  buildCEtherService(cEther: string, maximillion: string): CEtherService {\n    return new CEtherService(cEther, maximillion, this.signerOrProvider);\n  }\n}\n","import localTokensAddressesJson from \"../solidityInterfaces/localTokensAddresses.json\";\n\nexport const SUPPORTED_TOKENS_PER_CHAIN = {\n  // Local Hardhat\n  1337: { ...localTokensAddressesJson },\n  31337: { ...localTokensAddressesJson },\n  // Ethereum mainnet\n  1: {},\n\n  // Fuse mainnet\n  122: null,\n};\n\n// Quick-n-Dirty to get Token names\nexport const SYMBOLS_TO_NAMES = {\n  DAI: \"DAI\",\n  USDC: \"USD Coin\",\n  FUSE: \"Fuse\",\n  BTC: \"Bitcoin\",\n  ETH: \"Ether\",\n  WETH: \"Wrapped Ether\",\n  WBTC: \"Wrapped Bitcoin\",\n  USDT: \"Tether\",\n};\n\nexport const NATIVE_COIN_SYMBOL_PER_CHAIN = {\n  1337: \"FUSE\",\n  31337: \"FUSE\",\n  1: \"ETH\",\n};\n\n// TODO : SEMI-CRITICAL : Have the right value for each chain.\nconst DAYS_IN_YEAR = 365;\nconst MAINNET_ETHERUM_BLOCKS_PER_YEAR = 2102400;\n\nconst ROPSTEN_BLOCKS_PER_MINUTE = 5;\nconst ROPSTEN_BLOCK_PER_DAY = ROPSTEN_BLOCKS_PER_MINUTE * 60 * 24;\nconst ROPSTEN_BLOCK_PER_YEAR = ROPSTEN_BLOCK_PER_DAY * DAYS_IN_YEAR;\n\nconst FUSE_BLOCKS_PER_MINUTE = 5;\nconst FUSE_BLOCK_PER_DAY = FUSE_BLOCKS_PER_MINUTE * 60 * 24;\nconst FUSE_BLOCK_PER_YEAR = FUSE_BLOCK_PER_DAY * DAYS_IN_YEAR;\n\nexport const DAILY_BLOCK_PER_CHAIN = {\n  // None\n  \"-1\": 0,\n\n  // Local Hardhat\n  1337: FUSE_BLOCK_PER_YEAR,\n  31337: FUSE_BLOCK_PER_YEAR,\n  // Ethereum mainnet\n  1: MAINNET_ETHERUM_BLOCKS_PER_YEAR,\n\n  // Ropsten\n  3: ROPSTEN_BLOCK_PER_YEAR,\n\n  // Rinkby\n  // 4: null,\n\n  // Fuse Mainnet\n  122: FUSE_BLOCK_PER_YEAR,\n\n  // BSC\n  // 97: null,\n};\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  makeObservable,\n  observable,\n  reaction,\n} from \"mobx\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"../services/cryptoWalletConnectionService/IEthereumProvider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getSignerOrProvider } from \"../ethereumConnection/ethereumConnection\";\nimport { DAILY_BLOCK_PER_CHAIN } from \"../constants/supportedTokensPerChain\";\n\nexport class CryptoWalletConnectionStore {\n  @observable private walletConnectionRequestApproved: boolean = false;\n\n  @observable public ethereumProvider: IEthereumProvider;\n  @observable public signerOrProvider: Signer | Provider;\n  @observable public hasEthereumProvider: boolean;\n  @observable public hasEventsSupport: boolean;\n\n  @observable public mainAddress: string = \"\";\n  @observable public chainId: number = -1;\n\n  @computed public get blocksPerYear(): number {\n    // @ts-ignore\n    const blocksPerYear = DAILY_BLOCK_PER_CHAIN[this.chainId];\n\n    if (blocksPerYear === undefined) {\n      return 0;\n    }\n\n    return blocksPerYear;\n  }\n\n  private addressCheckingInterval?: NodeJS.Timeout = undefined;\n  reactionToWalletConnection: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletConnectionService: ICryptoWalletConnectionService\n  ) {\n    makeObservable(this);\n\n    this.ethereumProvider = this.cryptoWalletConnectionService.getEthereumProvider();\n    this.signerOrProvider = getSignerOrProvider(this.ethereumProvider);\n    this.hasEthereumProvider =\n      cryptoWalletConnectionService.hasEthereumProvider;\n    this.hasEventsSupport = cryptoWalletConnectionService.hasEventsSupport;\n\n    this.reactionToWalletConnection = reaction(\n      () => this.isConnectedToWallet,\n      async (isConnected) => {\n        if (isConnected) {\n          this.readInformationFromConnectedWallet();\n        }\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n\n    if (this.hasEthereumProvider) {\n      // We will only detect address change if the Ethereum provider can support it\n      if (this.cryptoWalletConnectionService.hasEventsSupport) {\n        console.log(\"Provider has events support\");\n        this.cryptoWalletConnectionService.onMainAddressChange((address) => {\n          console.log(`DETECTED ADDDRESS CHANGE ${address}`);\n          this.setMainAddress(address);\n        });\n\n        this.cryptoWalletConnectionService.onChainIdChange((chainId) => {\n          console.log(`CHAIN-ID CHANGE ${chainId}`);\n          this.setChainId(chainId);\n        });\n      } else {\n        console.log(\"Provider does not have events support\");\n\n        // Else, we will read it one time + set an interval\n        this.addressCheckingInterval = setInterval(\n          () => this.refreshState(),\n          1000\n        );\n      }\n    }\n  }\n\n  @computed\n  public get isConnectedToWallet(): boolean {\n    return (\n      this.hasEthereumProvider &&\n      (this.cryptoWalletConnectionService.didUserApproveDappInThePast ||\n        this.walletConnectionRequestApproved)\n    );\n  }\n\n  public async refreshState() {\n    console.log(\"REFRESH-STATE\");\n    await this.readInformationFromConnectedWallet();\n  }\n\n  public async askToConnect(): Promise<boolean> {\n    if (this.isConnectedToWallet) {\n      return true;\n    } else {\n      const permissionGranted = await this.cryptoWalletConnectionService.requestConnectionPermission();\n      this.setWalletConnectionRequestApproved(permissionGranted);\n\n      return this.walletConnectionRequestApproved;\n    }\n  }\n\n  private async readInformationFromConnectedWallet() {\n    // Chain Id\n    const chainId = await this.cryptoWalletConnectionService.readChainId();\n    this.setChainId(chainId);\n\n    // Wallet address\n    const walletAddress = await this.cryptoWalletConnectionService.readMainAddress();\n    this.setMainAddress(walletAddress);\n  }\n\n  @action(\"setWalletConnectionRequestApproved\")\n  private setWalletConnectionRequestApproved(requestApproved: boolean) {\n    this.walletConnectionRequestApproved = requestApproved;\n  }\n\n  @action(\"setMainAddress\")\n  private setMainAddress(mainAddress: string) {\n    this.mainAddress = mainAddress;\n  }\n\n  @action(\"setChainId\")\n  private setChainId(chainId: number) {\n    this.chainId = chainId;\n  }\n}\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  observable,\n  ObservableMap,\n  reaction,\n} from \"mobx\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { PromiEvent, TransactionReceipt } from \"web3-core\";\nimport { JSON_RPC_ERROR_CODES } from \"../constants/ethereumErrorCodes\";\nimport {\n  NATIVE_COIN_SYMBOL_PER_CHAIN,\n  SUPPORTED_TOKENS_PER_CHAIN,\n  SYMBOLS_TO_NAMES,\n} from \"../constants/supportedTokensPerChain\";\nimport {\n  ITokensLensService,\n  TErc20Meta,\n} from \"../services/contractsIntegration/TokensLensService/ITokensLensService\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { ICompoundLensService } from \"../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { IErc20BuilderService } from \"../services/contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { ICTokensBuilderService } from \"../services/contractsIntegration/cTokensService/ICTokensBuilderService\";\nimport { SystemStore } from \"./SystemStore\";\n\nexport type TTokenMetaWithBalance = TErc20Meta & {\n  balance: BigNumber;\n  name: string;\n  balanceInUnits: number;\n};\n\nexport type TAssetAmount = {\n  rawAmount: BigNumber;\n  amountInUnits: number;\n};\n\nexport class AccountStore {\n  @observable public contractParametersDoneLoading = false;\n  @observable public contractParametersErrorLoading = false;\n  @observable public doneLoading = false;\n  @observable public errorLoading = false;\n\n  // Symbol -> TokenMetaWithBalance\n  @observable public tokensWithBalances: ObservableMap<\n    string,\n    TTokenMetaWithBalance\n  > = observable(new Map<string, TTokenMetaWithBalance>());\n\n  // Spender -> token-address -> TAssetAmount\n  @observable public allowances: ObservableMap<\n    string,\n    Map<string, TAssetAmount>\n  > = observable(new Map<string, Map<string, TAssetAmount>>());\n\n  // TODO : Move tx's state to a different store\n  @observable\n  public txPending = false;\n  @observable public txHadError = false;\n  @observable public txCanceled = false;\n\n  /**\n   * For better DX\n   */\n  @computed get symbolsToUnits(): Record<string, number> {\n    console.log(\"Computing s2u\");\n    const s2u = Array.from(this.tokensWithBalances.entries()).reduce(\n      (obj, cur) => {\n        const [symbol, metaWithBalances] = cur;\n        obj[symbol] = metaWithBalances.balanceInUnits;\n\n        return obj;\n      },\n      {} as Record<string, number>\n    );\n\n    return s2u;\n  }\n\n  private addressChangeReaction: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private systemStore: SystemStore,\n    private lendingNetworksStore: LendingNetworksStore,\n    private erc20BuilderService: IErc20BuilderService,\n    private cTokensBuilderService: ICTokensBuilderService\n  ) {\n    this.addressChangeReaction = reaction(\n      () => [\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress,\n        this.lendingNetworksStore.activeLNStore as SingleLNStore,\n      ],\n      async ([chainId, address, activeLNStoreId]) => {\n        console.log({ activeLNStoreId });\n        this.setDoneLoading(false);\n        await this.reactToConnectedChainOrAddressChanged(\n          // DEV_NOTE : We add 'as' because TS thinks mixes the string and number in the array\n          chainId as number,\n          address as string,\n          (activeLNStoreId as SingleLNStore) || undefined\n        );\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Computed values ****\n\n  // **** Contract interactions ****\n  private async handlePromievent(\n    promievent: PromiEvent<TransactionReceipt>,\n    name = \"A promievent\"\n  ): Promise<TransactionReceipt | undefined> {\n    this.resetTxIndicators();\n\n    // Indicate tx is pending\n    this.setTxPending(true);\n    console.log(`Waiting for promievent of ${name}`);\n\n    try {\n      const res = await promievent;\n      console.log(`Got Results for promievent of ${name}`);\n      return res;\n    } catch (e) {\n      if (\n        (e as any).code === JSON_RPC_ERROR_CODES.provider.userRejectedRequest\n      ) {\n        this.setTxCanceled(true);\n      } else {\n        throw e;\n      }\n    } finally {\n      this.setTxPending(false);\n    }\n  }\n\n  public async approveErc20Usage(\n    erc20Address: string,\n    spender: string,\n    amount: BigNumber\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(\n      `Approving ${amount.toString()} for ${spender} on ${erc20Address}`\n    );\n    const contractInteraction = await this.erc20BuilderService\n      .buildErc20Service(erc20Address)\n      .approve(spender, amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async supplyToMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Supplying ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(\n          cTokenAddress,\n          maximillionAddress\n        )\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.mint(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async withdrawFromMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Withdrawing ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(\n          cTokenAddress,\n          maximillionAddress\n        )\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.withdraw(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async borrowFromMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Borrowing ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(\n          cTokenAddress,\n          maximillionAddress\n        )\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.borrow(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async repayToMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Repaying ${amount.toString()} to market ${cTokenAddress}`);\n    let contractTransaction;\n\n    if (isNativeCoin) {\n      const cNativeService = this.cTokensBuilderService.buildCEtherService(\n        cTokenAddress,\n        maximillionAddress\n      );\n\n      contractTransaction = await cNativeService.repayBorrowWithMaximillion(\n        this.cryptoWalletIntegrationStore.mainAddress,\n        amount\n      );\n    } else {\n      const cTokenService = this.cTokensBuilderService.buildCErc20Service(\n        cTokenAddress\n      );\n      contractTransaction = await cTokenService.repayBorrow(amount);\n    }\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    const receipt = await contractTransaction\n      .wait()\n      .then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    // return receipt;\n    return contractTransaction;\n  }\n\n  // **** Current address changed ****\n\n  private async reactToConnectedChainOrAddressChanged(\n    chainId: number,\n    currentAddress: string,\n    activeLnStore?: SingleLNStore\n  ) {\n    if (currentAddress) {\n      if (this.cryptoWalletIntegrationStore.hasEventsSupport) {\n        this.refreshAccountListeners(currentAddress);\n      }\n\n      try {\n        await this.refreshDataForAccount(\n          chainId,\n          currentAddress,\n          this.systemStore.nativeCoinSymbol,\n          activeLnStore\n        );\n\n        // if\n      } catch (e) {\n        this.failLoadingProcess(e);\n        console.error(\n          \"Error in reacting to address change in Orbs Account Store\",\n          e\n        );\n      }\n    }\n  }\n\n  // **** Data reading and setting ****\n\n  /**\n   * DEV_NOTE : Move this to a dedicated 'tx's store that will handle tx and state refreshment.\n   */\n  public async manuallyUpdateAllStores() {\n    if (this.lendingNetworksStore.activeLNStore) {\n      this.lendingNetworksStore.activeLNStore.refreshFromOutside();\n    }\n    await this.manuallyReadAccountData();\n  }\n\n  public async manuallyReadAccountData() {\n    try {\n      await this.refreshDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress,\n        this.systemStore.nativeCoinSymbol,\n        this.lendingNetworksStore.activeLNStore\n      );\n    } catch (e) {\n      this.failLoadingProcess(e);\n      console.error(\n        \"Error in manually reading address data in Account Store\",\n        e\n      );\n    }\n  }\n\n  private async refreshDataForAccount(\n    chainId: number,\n    accountAddress: string,\n    nativeCoinSymbol: string,\n    activeLnStore?: SingleLNStore\n  ) {\n    console.log(\n      `reading data for ${accountAddress} on ${chainId} for ln ${activeLnStore?.id}`\n    );\n    // Clear old data\n    this.clearAllAccountData();\n  }\n\n  private clearAllAccountData() {\n    this.clearTokenBalancesMap();\n  }\n\n  // **** Read and Set ****\n\n  // ****  Subscriptions ****\n\n  private async refreshAccountListeners(accountAddress: string) {\n    this.cancelAllCurrentSubscriptions();\n  }\n\n  private cancelAllCurrentSubscriptions() {}\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private resetTxIndicators() {\n    this.setTxPending(false);\n    this.setTxHadError(false);\n    this.setTxCanceled(false);\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setTxPending\")\n  private setTxPending(txPending: boolean) {\n    this.txPending = txPending;\n  }\n\n  @action(\"setTxCanceled\")\n  private setTxCanceled(txCanceled: boolean) {\n    this.txCanceled = txCanceled;\n  }\n\n  @action(\"setTxHadError\")\n  private setTxHadError(txHadError: boolean) {\n    this.txHadError = txHadError;\n  }\n\n  @action(\"clearTokenBalancesMap\")\n  private clearTokenBalancesMap() {\n    this.tokensWithBalances.clear();\n  }\n\n  @action(\"replaceTokenBalancesMap\")\n  private replaceTokenBalancesMap(\n    tokensWithBalancesMap: Map<string, TTokenMetaWithBalance>\n  ) {\n    this.tokensWithBalances.replace(tokensWithBalancesMap);\n  }\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\n\nexport type TAssetInMarketParameters = {\n  name: string;\n  symbol: string;\n  address: string;\n  decimals: number;\n  isNativeCoin: boolean;\n};\n\nexport const EMPTY_ASSET_IN_MARKET_PARAMETERS: TAssetInMarketParameters = {\n  address: \"\",\n  symbol: \"\",\n  name: \"\",\n  decimals: 0,\n  isNativeCoin: false,\n};\n\n// \"Parameters\" refers to the unChangeable elements (name, id, tokens, etc..)\n// TODO : Think of a better name\nexport interface ILendingNetworkParameters {\n  id: string;\n  chainId: string;\n  name: string;\n  lnHomePage: string;\n  unitrollerAddress: string;\n  maximillionAddress: string;\n  assets: TAssetInMarketParameters[];\n  distributionAssetParameters: TAssetInMarketParameters;\n}\n\nexport interface ILendingNetworkLiveState {\n  tvl: number;\n  participatingSuppliers: number;\n}\n\nexport interface ILendingNetworkGist\n  extends ILendingNetworkParameters,\n    ILendingNetworkLiveState {}\n\nexport interface ITokenData {\n  cToken: string;\n  cTokenName: string;\n  cTokenSymbol: string;\n  cTokenDecimals: string;\n  exchangeRateCurrent: string;\n  supplyRatePerBlock: string;\n  borrowRatePerBlock: string;\n  reserveFactorMantissa: string;\n  totalBorrows: string;\n  totalReserves: string;\n  totalSupply: string;\n  totalCash: string;\n  isListed: boolean;\n  collateralFactorMantissa: string;\n}\n\nexport interface IUnderlyingMetadata {\n  underlyingAssetAddress: string;\n  underlyingDecimals: string;\n  underlyingName: string;\n  underlyingSymbol: string;\n}\n\nexport interface ITokenUnderlyingPrice {\n  cToken: string;\n  underlyingPrice: string;\n}\n\nexport interface ILendingNetworksService {\n  fetchALlLendingNetworksParameters(): Promise<ILendingNetworkParameters[]>;\n  fetchAllLendingNetworksGists(): Promise<ILendingNetworkGist[]>;\n\n  fetchLendingNetworkLiveState(\n    networkId: string\n  ): Promise<ILendingNetworkLiveState>;\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { action, computed, makeObservable, observable } from \"mobx\";\nimport {\n  ITokenData,\n  ITokenUnderlyingPrice,\n  IUnderlyingMetadata,\n  TAssetInMarketParameters,\n} from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport {\n  TCTokenBalances,\n  TCTokenMetadata,\n  TCTokenUnderlyingPrice,\n} from \"../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { ethers } from \"ethers\";\nimport { DAILY_BLOCK_PER_CHAIN } from \"../../constants/supportedTokensPerChain\";\nimport { CryptoWalletConnectionStore } from \"../CryptoWalletConnectionStore\";\n\nexport class SingleCTokenStore {\n  // CToken meta\n  @observable cTokenAddress: string;\n  @observable cTokenName: string;\n  @observable cTokenSymbol: string;\n  @observable cTokenDecimals: BigNumber;\n  @observable exchangeRateCurrent: BigNumber;\n  @observable supplyRatePerBlock: BigNumber;\n  @observable borrowRatePerBlock: BigNumber;\n  @observable private totalBorrows: BigNumber;\n  @observable private totalReserves: BigNumber;\n  @observable private totalSupply: BigNumber;\n  @observable private totalCash: BigNumber;\n  @observable private reserveFactorMantissa: BigNumber;\n  @observable private collateralFactorMantissa: BigNumber;\n  @observable isListed: boolean;\n\n  @observable underlyingAssetAddress: string;\n  @observable underlyingDecimals: number;\n  @observable underlyingName: string;\n  @observable underlyingSymbol: string;\n  // @observable underlyingPrice: BigNumber;\n\n  // CToken balances\n  @observable private balanceOf: BigNumber; // CToken balance for the user\n  @observable private borrowBalanceCurrent: BigNumber; // Underlying borrowed by the user\n  @observable private balanceOfUnderlying: BigNumber; // Balance of underlying for the user in the cToken ( owed to the user, derived from the user's wallet  cToken balance ).\n  @observable private tokenBalance: BigNumber; // Underlying balance for the user in their wallet\n  @observable private tokenAllowance: BigNumber; // Allowance in underlying with cToken as spender\n\n  // CToken underlying price\n  @observable underlyingPrice: BigNumber;\n\n  // Account specific data\n  @observable isCollaterable: boolean;\n\n  @computed get cTokenMeta(): TCTokenMetadata {\n    const cTokenMeta: TCTokenMetadata = {\n      cToken: this.cTokenAddress,\n      cTokenDecimals: this.cTokenDecimals,\n      collateralFactorMantissa: this.collateralFactorMantissa,\n      exchangeRateCurrent: this.exchangeRateCurrent,\n      isListed: this.isListed,\n      reserveFactorMantissa: this.reserveFactorMantissa,\n      totalBorrows: this.totalBorrows,\n      totalReserves: this.totalReserves,\n      totalSupply: this.totalSupply,\n      underlyingAssetAddress: this.underlyingAssetAddress,\n      underlyingDecimals: BigNumber.from(this.underlyingDecimals),\n      borrowRatePerBlock: this.borrowRatePerBlock,\n      supplyRatePerBlock: this.supplyRatePerBlock,\n      totalCash: this.totalCash,\n    };\n\n    return cTokenMeta;\n  }\n\n  constructor(\n    private cryptoWalletConnectionStore: CryptoWalletConnectionStore,\n    assetInMarketParams: TAssetInMarketParameters\n  ) {\n    makeObservable(this);\n    // this.cTokenAddress = tokenData.cToken;\n    // this.cTokenName = tokenData.cTokenName;\n    // this.cTokenSymbol = tokenData.cTokenSymbol;\n    // this.cTokenDecimals = BigNumber.from(tokenData.cTokenDecimals);\n    // this.totalCash = BigNumber.from(tokenData.totalCash);\n    // this.supplyRatePerBlock = BigNumber.from(tokenData.supplyRatePerBlock);\n    // this.borrowRatePerBlock = BigNumber.from(tokenData.borrowRatePerBlock);\n    // this.underlyingAssetAddress = assetInMarketParams.address;\n    // this.underlyingDecimals = assetInMarketParams.underlyingDecimals;\n    // this.underlyingName = underlyingMetadata.underlyingName;\n    // this.underlyingSymbol = underlyingMetadata.underlyingSymbol;\n    // this.underlyingPrice = BigNumber.from(0); // TODO : Figure where to get this from ?\n\n    this.cTokenAddress = \"\";\n    this.cTokenName = \"\";\n    this.cTokenSymbol = \"\";\n    this.cTokenDecimals = BigNumber.from(0);\n    this.exchangeRateCurrent = BigNumber.from(0);\n    this.supplyRatePerBlock = BigNumber.from(0);\n    this.borrowRatePerBlock = BigNumber.from(0);\n    this.totalBorrows = BigNumber.from(0);\n    this.totalReserves = BigNumber.from(0);\n    this.totalSupply = BigNumber.from(0);\n    this.totalCash = BigNumber.from(0);\n    this.reserveFactorMantissa = BigNumber.from(0);\n    this.collateralFactorMantissa = BigNumber.from(0);\n    this.isListed = false;\n\n    this.underlyingAssetAddress = assetInMarketParams.address;\n    this.underlyingDecimals = assetInMarketParams.decimals;\n    this.underlyingName = assetInMarketParams.name;\n    this.underlyingSymbol = assetInMarketParams.symbol;\n\n    // CToken balances\n    this.balanceOf = BigNumber.from(0);\n    this.borrowBalanceCurrent = BigNumber.from(0);\n    this.balanceOfUnderlying = BigNumber.from(0);\n    this.tokenBalance = BigNumber.from(0);\n    this.tokenAllowance = BigNumber.from(0);\n\n    // CToken underlying price\n    this.underlyingPrice = BigNumber.from(0);\n\n    // Account specific data\n    this.isCollaterable = false;\n  }\n\n  // **** State refresh from outside ****\n  public updateWithFreshState(\n    cTokenMeta: TCTokenMetadata,\n    cTokenBalances: TCTokenBalances,\n    cTokenUnderlyingPrice: TCTokenUnderlyingPrice\n  ) {\n    this.batchUpdateFromCTokenMeta(\n      cTokenMeta,\n      cTokenBalances,\n      cTokenUnderlyingPrice\n    );\n  }\n\n  public updateIsInCollaterable(isCollaterable: boolean) {\n    this.setIsCollaterable(isCollaterable);\n  }\n\n  /**\n   * Calculates how much collateral is being generated from this market\n   */\n  @computed public get collateralPotentialInUSD(): number {\n    if (this.isCollaterable && this.accountSupplyInUnits > 0) {\n      console.log(`${this.underlyingSymbol} is collaterable`);\n\n      const fullDepositedValueUsd =\n        this.accountSupplyInUnits * this.underlyingUsdPrice;\n      const collateralPotentialUsd =\n        fullDepositedValueUsd * this.collateralFactorInUnits;\n\n      return collateralPotentialUsd;\n    } else {\n      return 0;\n    }\n  }\n\n  /***\n   * Indicates how many underlying units the CToken currently holds\n   */\n  @computed\n  public get cTokenCashInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.totalCash, this.underlyingDecimals)\n    );\n  }\n\n  /***\n   * Indicates how many USD worth of underlying units the CToken currently holds\n   */\n  @computed\n  public get cTokenCashInUSD(): number {\n    return this.cTokenCashInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get accountUnderlyingBalanceInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.tokenBalance, this.underlyingDecimals)\n    );\n  }\n\n  @computed\n  public get totalSupplyInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.totalSupply, this.underlyingDecimals)\n    );\n  }\n\n  @computed\n  public get accountSupplyInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.balanceOfUnderlying,\n        this.underlyingDecimals\n      )\n    );\n  }\n\n  @computed\n  public get totalBorrowInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.totalBorrows, this.underlyingDecimals)\n    );\n  }\n\n  @computed\n  public get accountBorrowInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.borrowBalanceCurrent,\n        this.underlyingDecimals\n      )\n    );\n  }\n\n  @computed\n  public get underlyingUsdPrice(): number {\n    // DEV_NOTE : This calculation is based on the 'Lens' which returns the price is `36 - asset.decimals'\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.underlyingPrice,\n        36 - this.underlyingDecimals\n      )\n    );\n  }\n\n  @computed\n  public get totalSupplyBalanceUsd(): number {\n    return this.totalSupplyInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get accountSupplyBalanceUsd(): number {\n    return this.accountSupplyInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get totalBorrowBalanceUsd(): number {\n    return this.totalBorrowInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get accountBorrowBalanceUsd(): number {\n    return this.accountBorrowInUnits * this.underlyingUsdPrice;\n  }\n\n  /**\n   * We assume that if no cToken address has been set, it means that the 'batch update' has not finished.\n   */\n  @computed\n  public get hasBeenInitialized(): boolean {\n    return this.cTokenAddress !== \"\";\n  }\n\n  @computed\n  public get collateralFactorInUnits(): number {\n    const mantissaDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.collateralFactorMantissa, mantissaDecimals)\n    );\n  }\n\n  @computed\n  public get supplyRatePerBlockInUnits(): number {\n    const ratePerBlockDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.supplyRatePerBlock, ratePerBlockDecimals)\n    );\n  }\n\n  @computed\n  public get borrowRatePerBlockInUnits(): number {\n    const ratePerBlockDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.borrowRatePerBlock, ratePerBlockDecimals)\n    );\n  }\n\n  /***\n   * Supply APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get supplyApyInUnits(): number {\n    const blockPerYear = this.cryptoWalletConnectionStore.blocksPerYear;\n\n    return this.supplyRatePerBlockInUnits * blockPerYear;\n  }\n\n  /***\n   * Borrow APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get borrowApyInUnits(): number {\n    const blockPerYear = this.cryptoWalletConnectionStore.blocksPerYear;\n\n    return this.borrowRatePerBlockInUnits * blockPerYear;\n  }\n\n  /***\n   * Supply APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get supplyApyInPercentages(): number {\n    return this.supplyApyInUnits * 100;\n  }\n\n  /***\n   * Borrow APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get borrowApyInPercentages(): number {\n    return this.borrowApyInUnits * 100;\n  }\n\n  /**\n   * Expected yearly revenue for supply interest.\n   */\n  @computed\n  public get totalYearlyGainsUsd(): number {\n    console.log(`Supply APY in units ${this.supplyApyInUnits}`);\n    console.log(`Supply APY in units ${this.totalSupplyBalanceUsd}`);\n    return this.accountSupplyInUnits * this.supplyApyInUnits;\n  }\n\n  /**\n   * Expected yearly payment for borrow interest.\n   */\n  @computed\n  public get totalYearlyLossesUsd(): number {\n    return this.accountBorrowBalanceUsd * this.borrowApyInUnits;\n  }\n\n  /**\n   * The expected change in value in a year.\n   */\n  @computed\n  public get totalYearlyChangeUsd(): number {\n    return this.totalYearlyGainsUsd - this.totalYearlyLossesUsd;\n  }\n\n  @computed public get hasAnyAllowance(): boolean {\n    return this.tokenAllowance.gt(0);\n  }\n\n  public getUnitsForUsdValue(usdValue: number): number {\n    return usdValue / this.underlyingUsdPrice;\n  }\n\n  // **** Complex setters ****\n\n  @action(\"batchUpdateFromCTokenMeta\")\n  private batchUpdateFromCTokenMeta(\n    cTokenMeta: TCTokenMetadata,\n    cTokenBalances: TCTokenBalances,\n    cTokenUnderlyingPrice: TCTokenUnderlyingPrice\n  ) {\n    this.cTokenAddress = cTokenMeta.cToken;\n    this.cTokenDecimals = cTokenMeta.cTokenDecimals;\n    // this.cTokenName = cTokenMeta.;\n    // this.cTokenSymbol = \"\";\n\n    this.exchangeRateCurrent = cTokenMeta.exchangeRateCurrent;\n    this.supplyRatePerBlock = cTokenMeta.supplyRatePerBlock;\n    this.borrowRatePerBlock = cTokenMeta.borrowRatePerBlock;\n    this.totalBorrows = cTokenMeta.totalBorrows;\n    this.totalReserves = cTokenMeta.totalReserves;\n    this.totalSupply = cTokenMeta.totalSupply;\n    this.totalCash = cTokenMeta.totalCash;\n    this.collateralFactorMantissa = cTokenMeta.collateralFactorMantissa;\n    this.isListed = cTokenMeta.isListed;\n\n    // CToken Balances\n    this.balanceOf = cTokenBalances.balanceOf;\n    this.borrowBalanceCurrent = cTokenBalances.borrowBalanceCurrent;\n    this.balanceOfUnderlying = cTokenBalances.balanceOfUnderlying;\n    this.tokenBalance = cTokenBalances.tokenBalance;\n    this.tokenAllowance = cTokenBalances.tokenAllowance;\n\n    // CToken underlying price\n    this.underlyingPrice = cTokenUnderlyingPrice.underlyingPrice;\n\n    console.log(\n      `${this.underlyingSymbol} collateral factor ${this.collateralFactorMantissa}`\n    );\n  }\n\n  // **** Action setters ****\n  @action(\"setIsCollaterable\")\n  private setIsCollaterable(isCollaterable: boolean) {\n    this.isCollaterable = isCollaterable;\n\n    if (this.isCollaterable)\n      console.log(\n        `${this.underlyingSymbol} is collaterable with balance of ${this.totalSupplyBalanceUsd}`\n      );\n  }\n}\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  makeObservable,\n  observable,\n  reaction,\n  toJS,\n} from \"mobx\";\nimport {\n  EMPTY_ASSET_IN_MARKET_PARAMETERS,\n  ILendingNetworkGist,\n  ILendingNetworkLiveState,\n  ILendingNetworksService,\n  TAssetInMarketParameters,\n} from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TAssetInMarketGist } from \"../../pages/LendingNetworkPage/MarketsTab/markets/types\";\nimport { IObservableArray } from \"mobx/dist/internal\";\nimport {\n  ICompoundLensService,\n  TAccountLimits,\n  TCompBalanceMetadataExt,\n  TCTokenMetadata,\n} from \"../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { BigNumber, ContractTransaction, ethers } from \"ethers\";\nimport {\n  NATIVE_COIN_ASSET_ADDRESS,\n  ZERO_ADDRESS,\n} from \"../../constants/constantAddresses\";\nimport { CryptoWalletConnectionStore } from \"../CryptoWalletConnectionStore\";\nimport { IComptrollerService } from \"../../services/contractsIntegration/ComptrollerService/IComptrollerService\";\nimport { ComptrollerService } from \"../../services/contractsIntegration/ComptrollerService/ComptrollerService\";\nimport { SingleCTokenStore } from \"./SingleCTokenStore\";\nimport { DAILY_BLOCK_PER_CHAIN } from \"../../constants/supportedTokensPerChain\";\nimport { SystemStore } from \"../SystemStore\";\n\nexport class SingleLNStore {\n  @observable doneLoading: boolean = false;\n  @observable errorLoading: boolean = false;\n\n  @observable id: string;\n  @observable name: string;\n  @observable unitrollerAddress: string;\n  @observable maximillionAddress: string;\n  @observable lnHomePage: string;\n\n  @observable tvl: number;\n  @observable participatingSuppliers: number;\n\n  // DEV_NOTE : Currently they all have 6.\n  @observable private _priceCalculationDecimals: number = 6;\n\n  // Holds the parameters, used for initialization\n  @observable\n  assetsParams: IObservableArray<TAssetInMarketParameters> = observable([]);\n  @observable\n  assetBaseAddressToParams = observable(\n    new Map<string, TAssetInMarketParameters>()\n  );\n\n  // Holds the parameters with the live data\n  // @observable\n  // assetsGists: IObservableArray<TAssetInMarketGist> = observable([]);\n\n  // All cTokens addresses in comptroller\n  @observable allMarkets: IObservableArray<string> = observable([]);\n\n  @observable cTokensStores: IObservableArray<SingleCTokenStore> = observable(\n    []\n  );\n\n  // **** Reward token distribution *****\n  @observable\n  distributionAssetParams: TAssetInMarketParameters = EMPTY_ASSET_IN_MARKET_PARAMETERS;\n  @observable distributionAssetRatePerBlock = 0;\n  @observable public incentiveBalance = observable(BigNumber.from(0));\n  @observable public incentiveAllocated = observable(BigNumber.from(0));\n\n  // **** Account specific data *****\n  @observable public liquidity = observable(BigNumber.from(0));\n  @observable public shortfall = observable(BigNumber.from(0));\n  // TODO : Fix native token wrap base address\n  @observable public marketsUserIsIn: IObservableArray<string> = observable([]);\n\n  @computed get lnGist(): ILendingNetworkGist {\n    const gist: ILendingNetworkGist = {\n      chainId: \"\", // TODO : Fill this chain id\n      distributionAssetParameters: EMPTY_ASSET_IN_MARKET_PARAMETERS,\n      unitrollerAddress: this.unitrollerAddress,\n      maximillionAddress: this.maximillionAddress,\n      participatingSuppliers: this.participatingSuppliers,\n      tvl: this.tvl,\n      name: this.name,\n      lnHomePage: this.lnHomePage,\n      assets: this.assetsParams,\n      id: this.id,\n    };\n\n    return gist;\n  }\n\n  // BaseAssetAddress -> CTokenStore\n  @computed get baseAssetsToCTokenStore(): Map<string, SingleCTokenStore> {\n    const map = new Map<string, SingleCTokenStore>();\n    for (let cTokenStore of this.cTokensStores) {\n      map.set(cTokenStore.underlyingAssetAddress, cTokenStore);\n    }\n    return map;\n  }\n\n  @computed\n  public get liquidityUsd(): number {\n    const liquidityDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.liquidity, liquidityDecimals)\n    );\n  }\n\n  @computed\n  public get totalLNSupplyBalanceUsd(): number {\n    let totalSupplyUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalSupplyUsd += cTokenStore.totalSupplyBalanceUsd;\n    }\n\n    return totalSupplyUsd;\n  }\n\n  @computed\n  public get totalAccountSupplyBalanceUsd(): number {\n    let totalAccountSupplyUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalAccountSupplyUsd += cTokenStore.accountSupplyBalanceUsd;\n    }\n\n    return totalAccountSupplyUsd;\n  }\n\n  @computed\n  public get totalLNBorrowBalanceUsd(): number {\n    let totalBorrowUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalBorrowUsd += cTokenStore.totalBorrowBalanceUsd;\n    }\n\n    return totalBorrowUsd;\n  }\n\n  @computed\n  public get totalAccountBorrowBalanceUsd(): number {\n    let totalAccountBorrowUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalAccountBorrowUsd += cTokenStore.accountBorrowBalanceUsd;\n    }\n\n    return totalAccountBorrowUsd;\n  }\n\n  /**\n   * Expected yearly revenue for supply interest from all markets.\n   */\n  @computed\n  public get totalYearlyGains(): number {\n    let totalYearlyGains = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalYearlyGains += cTokenStore.totalYearlyGainsUsd;\n    }\n\n    return totalYearlyGains;\n  }\n\n  /**\n   * Expected yearly payment for borrow interest from all markets.\n   */\n  @computed\n  public get totalYearlyLosses(): number {\n    let totalLossesGains = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalLossesGains += cTokenStore.totalYearlyLossesUsd;\n    }\n\n    return totalLossesGains;\n  }\n\n  /**\n   * The expected USD change in value in a year.\n   */\n  @computed\n  public get totalYearlyChangeUsd(): number {\n    let totalYearlyChanges = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      console.log(\n        `${cTokenStore.underlyingSymbol} change : ${cTokenStore.totalYearlyChangeUsd}`\n      );\n      totalYearlyChanges += cTokenStore.totalYearlyChangeUsd;\n    }\n\n    return totalYearlyChanges;\n  }\n\n  @computed\n  public get netApy(): number {\n    // TODO : CRITICAL : Calculate this.\n    // const netSupplyUsd = this.totalAccountSupplyBalanceUsd;\n    // const netBorrowUsd = this.totalAccountBorrowBalanceUsd;\n\n    // Sum up Yearly profit or loss in each market.\n    // Calculate difference\n    const totalYearlyChange = this.totalYearlyChangeUsd;\n\n    // If positive, divide by total-supply-usd\n    // If negative, divide by total-borrow-usd\n    const divider =\n      totalYearlyChange > 0\n        ? this.totalAccountSupplyBalanceUsd\n        : this.totalAccountBorrowBalanceUsd;\n\n    return totalYearlyChange / divider;\n  }\n\n  @computed\n  public get collateralPotentialInUSD(): number {\n    let potentialCollateral = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      potentialCollateral += cTokenStore.collateralPotentialInUSD;\n    }\n\n    return potentialCollateral;\n  }\n\n  @computed\n  public get usedBorrowPercentage(): number {\n    return this.usedBorrowFraction * 100;\n  }\n\n  @computed\n  public get usedBorrowFraction(): number {\n    return this.totalAccountBorrowBalanceUsd / this.collateralPotentialInUSD;\n  }\n\n  @computed\n  public get distributionAssetApy(): number {\n    // TODO : CRITICAL : Get the right value\n    const blockPerYear = DAILY_BLOCK_PER_CHAIN[\"1\"];\n    return this.distributionAssetRatePerBlock * blockPerYear;\n  }\n\n  @computed public get compBalanceUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.incentiveBalance,\n        this.distributionAssetParams.decimals\n      )\n    );\n  }\n\n  @computed public get compAllocatedUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.incentiveAllocated,\n        this.distributionAssetParams.decimals\n      )\n    );\n  }\n\n  @computed public get priceCalculationDecimals(): number {\n    return this._priceCalculationDecimals;\n  }\n\n  private addressChangeReaction: IReactionDisposer;\n\n  private comptrollerService: IComptrollerService;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private systemStore: SystemStore,\n    private lendingNetworksService: ILendingNetworksService,\n    lendingNetworkGist: ILendingNetworkGist\n  ) {\n    makeObservable(this);\n    this.id = lendingNetworkGist.id;\n    this.name = lendingNetworkGist.name;\n    this.unitrollerAddress = lendingNetworkGist.unitrollerAddress;\n    this.maximillionAddress = lendingNetworkGist.maximillionAddress;\n    this.lnHomePage = lendingNetworkGist.lnHomePage;\n    // Quick-n-Dirty asset params\n    this.assetsParams.replace(lendingNetworkGist.assets);\n    this.assetBaseAddressToParams.replace(\n      new Map(\n        this.assetsParams.map((assetParam) => [assetParam.address, assetParam])\n      )\n    );\n    this.distributionAssetParams =\n      lendingNetworkGist.distributionAssetParameters;\n    this.tvl = lendingNetworkGist.tvl;\n    this.participatingSuppliers = lendingNetworkGist.participatingSuppliers;\n\n    // Move this to an action\n    // this.assetsGists.replace(\n    //   this.assetsParams.map((asset) => this.buildEmptyAssetInMarketGist(asset))\n    // );\n\n    this.comptrollerService = new ComptrollerService(\n      this.unitrollerAddress,\n      this.cryptoWalletIntegrationStore.signerOrProvider\n    );\n\n    // Create cTokens stores\n    this.cTokensStores.replace(\n      this.assetsParams.map(\n        (assetParam) =>\n          new SingleCTokenStore(cryptoWalletIntegrationStore, assetParam)\n      )\n    );\n\n    this.cTokensStores.forEach((cTokenStore) =>\n      console.log(\n        `CTokenStore : ${cTokenStore.underlyingSymbol} ${cTokenStore.underlyingAssetAddress}`\n      )\n    );\n\n    this.addressChangeReaction = reaction(\n      () => [\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress,\n      ],\n      async ([chainId, address]) => {\n        this.setDoneLoading(false);\n        await this.reactToConnectedChainOrAddressChanged(\n          // DEV_NOTE : We add 'as' because TS thinks mixes the string and number in the array\n          chainId as number,\n          address as string\n        );\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Current address changed ****\n  private async reactToConnectedChainOrAddressChanged(\n    chainId: number,\n    currentAddress: string\n  ) {\n    if (currentAddress) {\n      try {\n        await this.readDataForAccount(chainId, currentAddress);\n      } catch (e) {\n        this.failLoadingProcess(e);\n        console.error(\n          \"Error in reacting to address change in Orbs Account Store\",\n          e\n        );\n      }\n    }\n  }\n\n  // **** Data reading and setting ****\n\n  /**\n   * Quick-n-Dirty\n   */\n  public async refreshFromOutside() {\n    return this.readDataForAccount(\n      this.cryptoWalletIntegrationStore.chainId,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n  }\n\n  private async readDataForAccount(chainId: number, accountAddress: string) {\n    console.log(\n      `SingleLnStore : readDataForAccount : ${chainId} ${accountAddress}`\n    );\n    console.log(`reading SINGLE LN data for ${accountAddress} on ${chainId}`);\n    // Clear old data\n    // this.clearAllAccountData();\n    // Refresh LN state\n    this.refreshLNNetworkState().catch((e) =>\n      console.error(`Failed refreshing LN Network state ${e.toString()}`)\n    );\n    // Refresh LN state\n    this.readAndSetCompBalanceMeta(accountAddress).catch((e) =>\n      console.error(`Failed readNSet compBalance ${e.toString()}`)\n    );\n\n    // Refresh cTokens - OLD\n    // this.readMarketsAndCTokensData().catch((e) =>\n    //   console.error(`Failed readNSet markets and ctoken ${e.toString()}`)\n    // );\n\n    await this.readNSetMarkets().catch((e) =>\n      console.error(`Failed readNSet markets ${e.toString()}`)\n    );\n\n    // Refresh cTokens\n    this.batchReadAndUpdateCTokensStores().catch((e) =>\n      console.error(`Failed readNSet batch CTokens state ${e.toString()}`)\n    );\n\n    // Refresh Account details\n    this.readNSetAccountLimits(\n      accountAddress,\n      this.unitrollerAddress\n    ).catch((e) =>\n      console.error(`Failed readNSet accountLimits ${JSON.stringify(e)}`)\n    );\n  }\n\n  /**\n   * Should be called after constructor\n   */\n  public async initialize() {\n    await this.refreshFromOutside();\n  }\n\n  public async refreshLNNetworkState() {\n    const liveState = await this.lendingNetworksService.fetchLendingNetworkLiveState(\n      this.id\n    );\n\n    this.setLiveState(liveState);\n  }\n\n  // **** Contract interactions ****\n  async enterMarketByBaseAsset(baseAssetAddress: string) {\n    const assetToCTokenStore = this.baseAssetsToCTokenStore;\n\n    if (!assetToCTokenStore.has(baseAssetAddress)) {\n      throw new Error(`No CToken Store for ${baseAssetAddress}`);\n    }\n\n    const cTokenStore = assetToCTokenStore.get(\n      baseAssetAddress\n    ) as SingleCTokenStore;\n    const tx = await this.comptrollerService.enterMarkets([\n      cTokenStore.cTokenAddress,\n    ]);\n    await tx.wait(1);\n\n    await this.readDataForAccount(\n      this.cryptoWalletIntegrationStore.chainId,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n  }\n\n  async exitMarketByBaseAsset(baseAssetAddress: string) {\n    const assetToCTokenStore = this.baseAssetsToCTokenStore;\n\n    if (!assetToCTokenStore.has(baseAssetAddress)) {\n      throw new Error(`No CToken Store for ${baseAssetAddress}`);\n    }\n\n    const cTokenStore = assetToCTokenStore.get(\n      baseAssetAddress\n    ) as SingleCTokenStore;\n    const tx = await this.comptrollerService.exitMarket(\n      cTokenStore.cTokenAddress\n    );\n    await tx.wait(1);\n\n    await this.readDataForAccount(\n      this.cryptoWalletIntegrationStore.chainId,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n  }\n\n  async enterMarketByCTokenAddress(\n    cTokenAddress: string\n  ): Promise<ContractTransaction> {\n    const tx = await this.comptrollerService.enterMarkets([cTokenAddress]);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    tx.wait().then(async () => {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    });\n\n    return tx;\n  }\n\n  async exitMarketByCTokenAddress(\n    cTokenAddress: string\n  ): Promise<ContractTransaction> {\n    const tx = await this.comptrollerService.exitMarket(cTokenAddress);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    tx.wait().then(async () => {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    });\n\n    return tx;\n  }\n\n  async claimLnIncentiveToken(): Promise<ContractTransaction> {\n    const tx = await this.comptrollerService.claimIncentiveFromAllMarkets(\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    tx.wait().then(async () => {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    });\n\n    return tx;\n  }\n\n  // **** Read&Set ****\n\n  private async readNSetAccountLimits(\n    accountAddress: string,\n    comptrollerProxy: string\n  ) {\n    if (\n      accountAddress &&\n      comptrollerProxy &&\n      comptrollerProxy !== ZERO_ADDRESS &&\n      this.systemStore.compoundLensServiceInitialized\n    ) {\n      const accountLimits = await this.systemStore.compoundLensService.getAccountLimits(\n        comptrollerProxy,\n        accountAddress\n      );\n\n      this.setAccountLimits(accountLimits);\n    } else {\n      console.warn(\"Comptroller proxy address is empty\");\n    }\n  }\n\n  /**\n   * Simply calls 'getAllMarkets'\n   */\n  private async readNSetMarkets() {\n    const markets = await this.comptrollerService.getAllMarkets();\n    console.log({ markets });\n    this.replaceMarkets(markets);\n  }\n\n  public async readAndSetCompBalanceMeta(account: string) {\n    if (!account || !this.systemStore.compoundLensServiceInitialized) {\n      return;\n    }\n\n    const compBalanceMetadataExt = await this.systemStore.compoundLensService.fetchCompBalanceMetadataExt(\n      this.distributionAssetParams.address,\n      this.unitrollerAddress,\n      account\n    );\n\n    this.setCompBalanceMeta(compBalanceMetadataExt);\n  }\n\n  // public async loadCTokenMetadata(): Promise<void> {\n  //   // this.setTokens(null);\n  //   const [\n  //     allCTokenData,\n  //     allUnderlyingMetadata,\n  //     allCTokenUnderlyingPrice,\n  //   ] = await Promise.all([\n  //     this.lendingNetworksService.fetchCTokenMetadataAll(\n  //       this.unitrollerAddress\n  //     ),\n  //     this.lendingNetworksService.fetchUnderlyingMetadataAll(\n  //       this.unitrollerAddress\n  //     ),\n  //     this.lendingNetworksService.cTokenUnderlyingPriceAll(\n  //       this.unitrollerAddress\n  //     ),\n  //   ]);\n  //\n  //   this.setTokens(\n  //     allCTokenData.map(\n  //       (cTokenData, idx) =>\n  //         new TokenStore(\n  //           cTokenData,\n  //           allUnderlyingMetadata[idx],\n  //           allCTokenUnderlyingPrice[idx]\n  //         )\n  //     )\n  //   );\n  // }\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private async batchReadAndUpdateCTokensStores() {\n    // const [first, ...cTokenMarkets] = this.allMarkets;\n    const cTokenMarkets = this.allMarkets;\n    if (!cTokenMarkets || !cTokenMarkets.length) {\n      return console.log(`No markets for cToken batch read and update`);\n    } else if (!this.systemStore.compoundLensServiceInitialized) {\n      return console.log(\"Lens service not yet initialized\");\n    }\n\n    console.log(`All cToken-markets ${this.allMarkets}`);\n    const cTokenMetas = await this.systemStore.compoundLensService.cTokenMetadataAll(\n      cTokenMarkets\n    );\n    // console.log(`Got metas : ${JSON.stringify(cTokenMetas.length)} `);\n    // console.log(JSON.stringify(cTokenMetas, null, 2));\n    // console.log(\n    //   `cTokenBalances for ${this.cryptoWalletIntegrationStore.mainAddress}`\n    // );\n    const cTokenBalancesAll = await this.systemStore.compoundLensService.cTokenBalancesAll(\n      cTokenMarkets,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n\n    // console.log(`Got balances : ${JSON.stringify(cTokenBalancesAll, null, 2)}`);\n    const cTokenUnderlyingPricesAll = await this.systemStore.compoundLensService.cTokenUnderlyingPriceAll(\n      cTokenMarkets\n    );\n    // console.log(`Got prices: ${JSON.stringify(cTokenUnderlyingPricesAll)} `);\n\n    for (let i = 0; i < cTokenMetas.length; i++) {\n      const cTokenMeta = cTokenMetas[i];\n      const cTokenBalances = cTokenBalancesAll[i];\n      const cTokenUnderlyingPrices = cTokenUnderlyingPricesAll[i];\n      let matchingSTokenStore = this.cTokensStores.find(\n        (cTokenStore) =>\n          cTokenStore.underlyingAssetAddress ===\n          cTokenMeta.underlyingAssetAddress\n      );\n\n      // DEV_NOTE : This is a temp solution to handle the fact that the 'Lens' returns 0x000 address for the native coin.\n      if (\n        !matchingSTokenStore &&\n        cTokenMeta.underlyingAssetAddress === ZERO_ADDRESS\n      ) {\n        console.log(\"Looking for native coin cTokenStore\");\n        console.log(\n          `POssible underlyings : ${this.cTokensStores.map(\n            (cTokenStore) => cTokenStore.underlyingAssetAddress\n          )}`\n        );\n        // TODO : CRITICAL : Lock on one standard\n        matchingSTokenStore = this.cTokensStores.find((cTokenStore) =>\n          [NATIVE_COIN_ASSET_ADDRESS, ZERO_ADDRESS].includes(\n            cTokenStore.underlyingAssetAddress\n          )\n        );\n      }\n\n      if (matchingSTokenStore) {\n        matchingSTokenStore.updateWithFreshState(\n          cTokenMeta,\n          cTokenBalances,\n          cTokenUnderlyingPrices\n        );\n\n        const marketIsColleterable = this.marketsUserIsIn.includes(\n          matchingSTokenStore.cTokenAddress\n        );\n        matchingSTokenStore.updateIsInCollaterable(marketIsColleterable);\n      } else {\n        console.log(\n          `No cTokenStore found for meta of ${cTokenMeta.underlyingAssetAddress}`\n        );\n      }\n    }\n  }\n\n  // @action\n  // private setTokens(tokens: TokenStore[] | null): void {\n  //   this.tokens = tokens;\n  // }\n\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setLiveState\")\n  private setLiveState(lnLiveState: ILendingNetworkLiveState) {\n    this.tvl = lnLiveState.tvl;\n    this.participatingSuppliers = lnLiveState.participatingSuppliers;\n  }\n\n  @action(\"setLiveState\")\n  private setCompBalanceMeta(compBalance: TCompBalanceMetadataExt) {\n    this.incentiveBalance = compBalance.balance;\n    this.incentiveAllocated = compBalance.allocated;\n  }\n\n  @action(\"setDistributionAssetRatePerBlock\")\n  private setDistributionAssetRatePerBlock(\n    distributionAssetRatePerBlock: number\n  ) {\n    this.distributionAssetRatePerBlock = distributionAssetRatePerBlock;\n  }\n\n  @action(\"setAccountLimits\")\n  private setAccountLimits(accountLimits: TAccountLimits) {\n    console.log(`New liquidity ${accountLimits.liquidity}`);\n    console.log(`New shortfal ${accountLimits.shortfall}`);\n    this.liquidity = accountLimits.liquidity;\n    this.shortfall = accountLimits.shortfall;\n    this.marketsUserIsIn.replace(accountLimits.marketsIn);\n    console.log(`New markets in ${accountLimits.marketsIn}`);\n  }\n\n  @action(\"replaceMarkets\")\n  private replaceMarkets(newMarkets: string[]) {\n    this.allMarkets.replace(newMarkets);\n  }\n\n  private buildEmptyAssetInMarketGist(\n    assetInMarketParams: TAssetInMarketParameters\n  ): TAssetInMarketGist {\n    const gist: TAssetInMarketGist = {\n      name: assetInMarketParams.name,\n      symbol: assetInMarketParams.symbol,\n      address: assetInMarketParams.address,\n      decimals: assetInMarketParams.decimals,\n      isNativeCoin: assetInMarketParams.isNativeCoin,\n      // amountInWallet: 0,\n      borrowApy: 0,\n      supplyApy: 0,\n      usdLiquidity: 0,\n    };\n\n    return gist;\n  }\n}\n","import {\n  ILendingNetworkGist,\n  ILendingNetworkParameters,\n  ILendingNetworksService,\n} from \"../services/lendingNetworksService/ILendingNetworksService\";\nimport { action, computed, makeObservable, observable } from \"mobx\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { IObservableArray } from \"mobx/dist/internal\";\nimport { ICompoundLensService } from \"../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { CompoundLensService } from \"../services/contractsIntegration/CompoundLensService/CompoundLensService\";\nimport { SystemStore } from \"./SystemStore\";\n\nexport class LendingNetworksStore {\n  @observable isLoading: boolean = false;\n  @observable\n  lendingNetworkParameters: IObservableArray<ILendingNetworkParameters> = observable(\n    []\n  );\n  @observable\n  lendingNetworkGists: IObservableArray<ILendingNetworkGist> = observable([]);\n  // @observable lendingNetworkLiveState: ILendingNetworkLiveState[] = [];\n  @observable\n  lendingNetworksStores: IObservableArray<SingleLNStore> = observable([]);\n\n  @observable\n  activeLendingNetworkId: string = \"\";\n\n  @computed get allLNGists(): ILendingNetworkGist[] {\n    const gists = this.lendingNetworksStores.map((lnStore) => lnStore.lnGist);\n    return gists;\n  }\n\n  @computed get activeLNStore(): SingleLNStore | undefined {\n    const activeLnStore = this.lendingNetworksStores.find(\n      (lnStore) => lnStore.id === this.activeLendingNetworkId\n    );\n\n    return activeLnStore;\n  }\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private systemStore: SystemStore,\n    private lendingNetworksService: ILendingNetworksService\n  ) {\n    makeObservable(this);\n\n    this.initializeStore();\n  }\n\n  public getLendingNetworkStore(networkId: string): SingleLNStore | null {\n    return this.lendingNetworksStores.find((l) => l.id === networkId) ?? null;\n  }\n\n  async initializeStore() {\n    this.setLoadingState(true);\n\n    // Get params for all registered LNs\n    await this.fetchAllLnParameters();\n\n    // Create a store for each LN\n    this.buildStoresForEachLn();\n\n    // Set the current LN as the first (just to initialize it with something)\n    // Initialize each store\n    this.initializeLNStores();\n\n    // this.setLendingNetworksGists(lnParameters);\n    this.setLoadingState(false);\n  }\n\n  private async fetchAllLnParameters() {\n    const lnParameters = await this.lendingNetworksService.fetchALlLendingNetworksParameters();\n    this.setLendingNetworkParameters(lnParameters);\n  }\n\n  private buildStoresForEachLn() {\n    const lnStores = this.lendingNetworkParameters.map((params) =>\n      this.buildLNStore(params)\n    );\n\n    this.setLendingNetworksStores(lnStores);\n  }\n\n  /**\n   * Calls 'initiailize' on each store\n   */\n  private initializeLNStores() {\n    // TODO : Critical : Should not initialize al stores. only the ones that match the network\n    this.lendingNetworksStores.forEach((lnStore) => lnStore.initialize());\n  }\n\n  private buildEmptyLnGist(\n    lnParams: ILendingNetworkParameters\n  ): ILendingNetworkGist {\n    const gist: ILendingNetworkGist = {\n      ...lnParams,\n      tvl: 0,\n      participatingSuppliers: 0,\n    };\n\n    return gist;\n  }\n\n  private buildLNStore(lnParams: ILendingNetworkParameters): SingleLNStore {\n    // Start with an empty gist\n    const gist: ILendingNetworkGist = {\n      ...lnParams,\n      tvl: 0,\n      participatingSuppliers: 0,\n    };\n\n    // Build the store\n    const lnStore = new SingleLNStore(\n      this.cryptoWalletIntegrationStore,\n      this.systemStore,\n      this.lendingNetworksService,\n      // this.compoundLensService,\n      gist\n    );\n\n    return lnStore;\n  }\n\n  // **** Active LN ****\n  public setActiveLn(lnIdAddress: string) {\n    this.setActiveLendingNetworkId(lnIdAddress);\n  }\n\n  // **** Computed values ****\n\n  // **** Contract interactions ****\n\n  // **** Current address changed ****\n\n  // **** Data reading and setting ****\n\n  // **** Read and Set ****\n\n  // ****  Subscriptions ****\n\n  // ****  Complex setters ****\n\n  // ****  Observables setter actions ****\n  // @action(\"setLendingNetworksGists\")\n  // private setLendingNetworksGists(lendingNetworkGists: ILendingNetworkGist[]) {\n  //   this.lendingNetworks = lendingNetworkGists.map(\n  //     (gits) => new SingleLNStore(this.lendingNetworksService, gits)\n  //   );\n  // }\n\n  @action(\"setLendingNetworksGists\")\n  private setLendingNetworksStores(lendingNetworkStores: SingleLNStore[]) {\n    this.lendingNetworksStores.replace(lendingNetworkStores);\n  }\n\n  @action(\"setLendingNetworksGists\")\n  private setLendingNetworksGists(lendingNetworkGists: ILendingNetworkGist[]) {\n    this.lendingNetworkGists.replace(lendingNetworkGists);\n  }\n\n  @action(\"setLendingNetworkParameters\")\n  private setLendingNetworkParameters(\n    lendingNetworkParameters: ILendingNetworkParameters[]\n  ) {\n    this.lendingNetworkParameters.replace(lendingNetworkParameters);\n  }\n\n  @action(\"setActiveLendingNetworkId\")\n  private setActiveLendingNetworkId(activeLendingNetworkId: string) {\n    this.activeLendingNetworkId = activeLendingNetworkId;\n  }\n\n  @action(\"setLoadingState\")\n  private setLoadingState(isLoading: boolean) {\n    this.isLoading = isLoading;\n  }\n}\n","import { action, computed, makeObservable, observable } from \"mobx\";\n\ntype TModalIds =\n  | \"SUPPLY_MODAL\"\n  | \"BORROW_MODAL\"\n  | \"COLLATERAL_MODAL\"\n  | \"INCENTIVE_MODAL\";\ntype TCurrentModalIds = TModalIds | \"NONE\";\n\nexport class ModalsStore {\n  @observable SUPPLY_MODAL_ID = \"SUPPLY_MODAL\";\n\n  @observable currentModalId: TCurrentModalIds = \"NONE\";\n  @observable assetBaseAddress: string = \"\";\n\n  @computed get isSupplyModalActive(): boolean {\n    return this.currentModalId === \"SUPPLY_MODAL\";\n  }\n\n  @computed get isBorrowModalActive(): boolean {\n    return this.currentModalId === \"BORROW_MODAL\";\n  }\n\n  @computed get isCollateralModalActive(): boolean {\n    return this.currentModalId === \"COLLATERAL_MODAL\";\n  }\n\n  @computed get isInventiveModalActive(): boolean {\n    return this.currentModalId === \"INCENTIVE_MODAL\";\n  }\n\n  constructor() {\n    makeObservable(this);\n  }\n\n  // **** Modal management ****\n\n  public showSupplyModal(supplyAssetBaseAddress: string) {\n    this.showAssetActionModal(\"SUPPLY_MODAL\", supplyAssetBaseAddress);\n  }\n\n  public showBorrowModal(borrowAssetBaseAddress: string) {\n    this.showAssetActionModal(\"BORROW_MODAL\", borrowAssetBaseAddress);\n  }\n\n  public showCollateralModal(borrowAssetBaseAddress: string) {\n    this.showAssetActionModal(\"COLLATERAL_MODAL\", borrowAssetBaseAddress);\n  }\n\n  public showIncentiveModal() {\n    this.setCurrentModalId(\"INCENTIVE_MODAL\");\n  }\n\n  // **** Complex setters ****\n  private showAssetActionModal(\n    supplyModalId: TModalIds,\n    assetBaseAddress: string\n  ) {\n    // DEV_NOTE : Setting the asset before showing the modal to ensure that asset data will be found (no showing \"mid-way\" UI state)\n    this.setAssetBaseAddress(assetBaseAddress);\n    this.setCurrentModalId(supplyModalId);\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'supply'\n   */\n  public hideSupplyModal() {\n    if (this.isSupplyModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'borrow'\n   */\n  public hideBorrowModal() {\n    if (this.isBorrowModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'collateral'\n   */\n  public hideCollateralModal() {\n    if (this.isCollateralModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'incentive'\n   */\n  public hideIncentiveModal() {\n    if (this.isInventiveModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setCurrentModalId\")\n  private setCurrentModalId(currentModalId: TCurrentModalIds) {\n    console.log(`New current modal id ${currentModalId}`);\n    this.currentModalId = currentModalId;\n  }\n\n  @action(\"setAssetBaseAddress\")\n  private setAssetBaseAddress(assetBaseAddress: string) {\n    this.assetBaseAddress = assetBaseAddress;\n  }\n}\n","import { BigNumber, Contract } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport CompoundLensJson from \"../../../solidityInterfaces/CompoundLens.json\";\nimport { CompoundLens } from \"../../../solidityInterfaces/CompoundLens\";\nimport {\n  ICompoundLensService,\n  TAccountLimits,\n  TCompBalanceMetadataExt,\n  TCTokenBalances,\n  TCTokenMetadata,\n  TCTokenUnderlyingPrice,\n} from \"./ICompoundLensService\";\nimport { parseEther } from \"ethers/lib/utils\";\nimport { etheresStructResponseToObject } from \"../contractsIntegrationUtils\";\n\nexport class CompoundLensService implements ICompoundLensService {\n  private compoundLensContract: CompoundLens;\n\n  constructor(\n    compoundLensAddress: string,\n    private signerOrProvider: Signer | Provider\n  ) {\n    console.log(\"PRE-CONSTRUCTOR\");\n    this.compoundLensContract = new Contract(\n      compoundLensAddress,\n      CompoundLensJson.abi,\n      signerOrProvider\n    ) as CompoundLens;\n\n    console.log(\"CONSTRUCTOR\");\n  }\n\n  public updateCompoundLensAddress(newCompoundLensAddress: string) {\n    console.log(`Updating compoundLens address to ${newCompoundLensAddress}`);\n    if (newCompoundLensAddress === \"\") {\n      console.log(\"Got an empty compound lens address\");\n    }\n\n    this.compoundLensContract = new Contract(\n      newCompoundLensAddress,\n      CompoundLensJson.abi,\n      this.signerOrProvider\n    ) as CompoundLens;\n  }\n\n  async cTokenMetadata(cTokenAddress: string): Promise<TCTokenMetadata> {\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : cTokenMetadataAll\");\n    }\n    return etheresStructResponseToObject(\n      await this.compoundLensContract.callStatic.cTokenMetadata(cTokenAddress)\n    );\n  }\n\n  async cTokenMetadataAll(\n    cTokenAddresses: string[]\n  ): Promise<TCTokenMetadata[]> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : cTokenMetadataAll\");\n      return [];\n    }\n    const rawMetas = await this.compoundLensContract.callStatic.cTokenMetadataAll(\n      cTokenAddresses\n    );\n\n    return rawMetas.map((rawMeta) => etheresStructResponseToObject(rawMeta));\n  }\n\n  async cTokenBalancesAll(\n    cTokenAddresses: string[],\n    account: string\n  ): Promise<TCTokenBalances[]> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : cTokenBalancesAll\");\n      return [];\n    }\n    const rawMetas = await this.compoundLensContract.callStatic.cTokenBalancesAll(\n      cTokenAddresses,\n      account\n    );\n\n    return rawMetas.map((rawMeta) => etheresStructResponseToObject(rawMeta));\n  }\n\n  async cTokenUnderlyingPriceAll(\n    cTokenAddresses: string[]\n  ): Promise<TCTokenUnderlyingPrice[]> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : cTokenUnderlyingPriceAll\");\n      return [];\n    }\n    const rawMetas = await this.compoundLensContract.callStatic.cTokenUnderlyingPriceAll(\n      cTokenAddresses\n    );\n\n    return rawMetas.map((rawMeta) => etheresStructResponseToObject(rawMeta));\n  }\n\n  async getAccountLimits(\n    comptrollerAddress: string,\n    account: string\n  ): Promise<TAccountLimits> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : getAccountLimits\");\n      return {\n        shortfall: BigNumber.from(0),\n        liquidity: BigNumber.from(0),\n        marketsIn: [],\n      };\n    }\n    const rawAccountLimits = await this.compoundLensContract.getAccountLimits(\n      comptrollerAddress,\n      account\n    );\n    const [marketsIn, liquidity, shortfall] = rawAccountLimits;\n\n    return {\n      marketsIn,\n      liquidity,\n      shortfall,\n    };\n  }\n\n  async fetchCompBalanceMetadataExt(\n    compToken: string,\n    comptrollerAddress: string,\n    account: string\n  ): Promise<TCompBalanceMetadataExt> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : fetchCompBalanceMetadataExt\");\n      return {\n        balance: BigNumber.from(0),\n        allocated: BigNumber.from(0),\n        votes: BigNumber.from(0),\n      };\n    }\n\n    console.log(`Fetching comp-balance-metadata-ext for inventive`);\n    console.log({ compToken });\n    console.log({ comptrollerAddress });\n    console.log({ account });\n\n    const rawCompBalanceMetaExt = await this.compoundLensContract.callStatic.getCompBalanceMetadataExt(\n      compToken,\n      comptrollerAddress,\n      account\n    );\n\n    return rawCompBalanceMetaExt;\n  }\n\n  private isInitialized(): boolean {\n    console.log(\n      `Compound lens contract : ${this.compoundLensContract.address}`\n    );\n    return this.compoundLensContract.address !== \"\";\n  }\n\n  private safeAddress() {\n    if (!this.isInitialized) {\n      throw new Error(`Compound lens address not initialized`);\n    }\n  }\n}\n","const CHAIN_ID_LOCALHOST = 1377;\nconst CHAIN_ID_HARDHAT = 31337;\nconst CHAIN_ID_ETHEREUM_ROPSTEN = 3;\n\nexport type TLocalChainIds =\n  | typeof CHAIN_ID_LOCALHOST\n  | typeof CHAIN_ID_HARDHAT;\nexport type TLiveChainIds = typeof CHAIN_ID_ETHEREUM_ROPSTEN;\nexport type TChainIds = TLiveChainIds | TLocalChainIds;\n\nexport const LOCAL_CHAINS: TChainIds[] = [1377, 31337];\nexport const LIVE_CHAINS: TChainIds[] = [CHAIN_ID_ETHEREUM_ROPSTEN];\n\nexport type TChainConstants = {\n  id: TChainIds;\n  compoundLensAddress: string;\n};\n\nexport const LIVE_CHAIN_CONSTANTS: Record<TLiveChainIds, TChainConstants> = {\n  \"3\": {\n    compoundLensAddress: \"0x2290026fa95CBcD6a567A0f245A2C50A7DcB6Dd2\",\n    id: 3,\n  },\n};\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  observable,\n  ObservableMap,\n  reaction,\n} from \"mobx\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { PromiEvent, TransactionReceipt } from \"web3-core\";\nimport { JSON_RPC_ERROR_CODES } from \"../constants/ethereumErrorCodes\";\nimport {\n  NATIVE_COIN_SYMBOL_PER_CHAIN,\n  SUPPORTED_TOKENS_PER_CHAIN,\n  SYMBOLS_TO_NAMES,\n} from \"../constants/supportedTokensPerChain\";\nimport {\n  ITokensLensService,\n  TErc20Meta,\n} from \"../services/contractsIntegration/TokensLensService/ITokensLensService\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { ICompoundLensService } from \"../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { IErc20BuilderService } from \"../services/contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { ICTokensBuilderService } from \"../services/contractsIntegration/cTokensService/ICTokensBuilderService\";\nimport ChainAddresses from \"../solidityInterfaces/addresses.json\";\nimport { CompoundLensService } from \"../services/contractsIntegration/CompoundLensService/CompoundLensService\";\nimport {\n  LIVE_CHAIN_CONSTANTS,\n  LIVE_CHAINS,\n  LOCAL_CHAINS,\n  TChainIds,\n  TLiveChainIds,\n} from \"../constants/chainConstants\";\nimport { FUSE_ON_ROPSTEN } from \"../services/lendingNetworksService/lendingNetworksParams\";\n\nexport type TTokenMetaWithBalance = TErc20Meta & {\n  balance: BigNumber;\n  name: string;\n  balanceInUnits: number;\n};\n\nexport type TAssetAmount = {\n  rawAmount: BigNumber;\n  amountInUnits: number;\n};\n\nexport class SystemStore {\n  @observable public contractParametersDoneLoading = false;\n  @observable public contractParametersErrorLoading = false;\n  @observable public doneLoading = false;\n  @observable public errorLoading = false;\n\n  @observable public nativeCoinSymbol = \"ETH\";\n  @observable public compoundLensAddress = \"\";\n\n  // TODO : Move tx's state to a different store\n  @observable\n  public txPending = false;\n  @observable public txHadError = false;\n  @observable public txCanceled = false;\n\n  @computed\n  public get compoundLensServiceInitialized(): boolean {\n    return this.compoundLensAddress !== \"\";\n  }\n\n  @computed\n  public get compoundLensService(): CompoundLensService {\n    if (this.compoundLensServiceInitialized) {\n      return new CompoundLensService(\n        this.compoundLensAddress,\n        this.cryptoWalletIntegrationStore.signerOrProvider\n      );\n    } else {\n      // @ts-ignore : We should always check for 'compoundLensServiceInitialized' before calling\n      return null;\n    }\n  }\n\n  private chainIdChangeReaction: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore\n  ) {\n    this.chainIdChangeReaction = reaction(\n      () => [this.cryptoWalletIntegrationStore.chainId],\n      async ([chainId]) => {\n        this.setDoneLoading(false);\n        await this.reactToConnectedChainChanged(chainId as TChainIds);\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Computed values ****\n\n  // **** Contract interactions ****\n\n  // **** Current address changed ****\n\n  private async reactToConnectedChainChanged(chainId: TChainIds) {\n    console.log(`Chain ID ${chainId}`);\n    // @ts-ignore\n    console.log(`Native coin ${NATIVE_COIN_SYMBOL_PER_CHAIN[chainId]}`);\n\n    // Update compound lens address\n    // DEV_NOTE : This will not cause a re-render, but any call to the service will be to the right address\n    // this.compoundLensServiceInstance.updateCompoundLensAddress(\n    //   this.getChainCompoundLensAddress(chainId)\n    // );\n\n    const chainCompoundLensAddress = this.getChainCompoundLensAddress(chainId);\n\n    this.setCompoundLensAddress(chainCompoundLensAddress);\n\n    // @ts-ignore\n    this.setNativeCoinSymbol(NATIVE_COIN_SYMBOL_PER_CHAIN[chainId] || \"ETH\");\n  }\n\n  // **** Data reading and setting ****\n\n  // **** Read and Set ****\n\n  // ****  Subscriptions ****\n\n  private async refreshAccountListeners(accountAddress: string) {\n    this.cancelAllCurrentSubscriptions();\n  }\n\n  private cancelAllCurrentSubscriptions() {}\n\n  private getChainCompoundLensAddress(chainId: TChainIds): string {\n    console.log(`ChainId-lensAddress: ${chainId}`);\n    if (LOCAL_CHAINS.includes(chainId)) {\n      return ChainAddresses.CompoundLens;\n    } else if (LIVE_CHAINS.includes(chainId)) {\n      return LIVE_CHAIN_CONSTANTS[chainId as TLiveChainIds].compoundLensAddress;\n    } else if ((chainId as number) === -1) {\n      // DEV_NOTE : The initial value, not yet initialized.\n      return \"\";\n    } else {\n      console.error(`Unsupported chain id of ${chainId} (${typeof chainId})`);\n      return \"\";\n    }\n  }\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private resetTxIndicators() {\n    this.setTxPending(false);\n    this.setTxHadError(false);\n    this.setTxCanceled(false);\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setTxPending\")\n  private setTxPending(txPending: boolean) {\n    this.txPending = txPending;\n  }\n\n  @action(\"setTxCanceled\")\n  private setTxCanceled(txCanceled: boolean) {\n    this.txCanceled = txCanceled;\n  }\n\n  @action(\"setTxHadError\")\n  private setTxHadError(txHadError: boolean) {\n    this.txHadError = txHadError;\n  }\n\n  @action(\"setNativeCoinSymbol\")\n  private setNativeCoinSymbol(nativeCoinSymbol: string) {\n    console.log(`Native coin symbol ${nativeCoinSymbol}`);\n    this.nativeCoinSymbol = nativeCoinSymbol;\n  }\n\n  @action(\"setCompoundLensAddress\")\n  private setCompoundLensAddress(compoundLensAddress: string) {\n    console.log(`Setting compoundLensAddress ${compoundLensAddress}`);\n    this.compoundLensAddress = compoundLensAddress;\n  }\n}\n","import { configure } from \"mobx\";\nimport { IStores } from \"./stores\";\n\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\n\n// This import ensures mobx batching\n// TODO : Check if still relevant to mobx6\nimport \"mobx-react-lite/batchingForReactDom\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { ILendingNetworksService } from \"../services/lendingNetworksService/ILendingNetworksService\";\nimport { AccountStore } from \"./AccountStore\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { ModalsStore } from \"./ModalsStore\";\nimport { IErc20BuilderService } from \"../services/contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { ICTokensBuilderService } from \"../services/contractsIntegration/cTokensService/ICTokensBuilderService\";\nimport { SystemStore } from \"./SystemStore\";\n\n/**\n * Builds and initializes all of the stores\n */\nexport function getStores(\n  cryptoWalletConnectionService: ICryptoWalletConnectionService,\n  lendingNetworksService: ILendingNetworksService,\n  erc20BuilderService: IErc20BuilderService,\n  cTokensBuilderService: ICTokensBuilderService\n): IStores {\n  // Create stores instances + Hydrate the stores\n  const cryptoWalletIntegrationStore = new CryptoWalletConnectionStore(\n    cryptoWalletConnectionService\n  );\n\n  const systemStore = new SystemStore(cryptoWalletIntegrationStore);\n\n  const lendingNetworksStore = new LendingNetworksStore(\n    cryptoWalletIntegrationStore,\n    systemStore,\n    lendingNetworksService\n  );\n\n  const accountStore = new AccountStore(\n    cryptoWalletIntegrationStore,\n    systemStore,\n    lendingNetworksStore,\n    erc20BuilderService,\n    cTokensBuilderService\n  );\n\n  const stores: IStores = {\n    cryptoWalletIntegrationStore,\n    accountStore,\n    lendingNetworksStore,\n    systemStore,\n    modalsStore: new ModalsStore(),\n  };\n\n  return stores;\n}\n\n// TODO : Check if this is still relevant to mobx6\n/**\n * Configures the mobx library. Should get called at App's initialization.\n */\nexport function configureMobx() {\n  configure({\n    enforceActions: \"observed\",\n  });\n}\n","import { StylesProvider, ThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport { App } from \"./App\";\nimport { baseTheme } from \"./theme/Theme\";\nimport { buildLNServices, buildServices } from \"./services/Services\";\nimport { configureMobx, getStores } from \"./store/storesInitialization\";\nimport { Provider } from \"mobx-react\";\nimport { ZERO_ADDRESS } from \"./constants/constantAddresses\";\n\ninterface IProps {}\n\nconfigureMobx();\n\n// TODO : Move this to a better place\nconst ethereumProvider = (window as any).ethereum;\nconst services = buildServices(ethereumProvider);\nconst lnServices = buildLNServices(ethereumProvider, {\n  unitrollerAddress: ZERO_ADDRESS,\n});\n// process.env.NODE_ENV === \"production\"\n//   ? buildServices(ethereumProvider)\n//   : buildMockServices(ethereumProvider);\nconst stores = getStores(\n  services.cryptoWalletIntegrationService,\n  services.lendingNetworksService,\n  services.erc20ServiceBuilder,\n  services.cTokenServiceBuilder\n);\n\nexport const AppWrapper = React.memo<IProps>((props) => {\n  return (\n    <Provider {...stores} {...services} {...lnServices}>\n      <StylesProvider injectFirst>\n        <ThemeProvider theme={baseTheme}>\n          <App />\n        </ThemeProvider>\n      </StylesProvider>\n    </Provider>\n  );\n});\n","import { ICryptoWalletConnectionService } from \"./cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"./cryptoWalletConnectionService/IEthereumProvider\";\nimport { CryptoWalletConnectionService } from \"./cryptoWalletConnectionService/CryptoWalletConnectionService\";\nimport { ILendingNetworksService } from \"./lendingNetworksService/ILendingNetworksService\";\nimport { LendingNetworksService } from \"./lendingNetworksService/LendingNetworksService\";\nimport { UniswapAnchoredViewService } from \"./contractsIntegration/UniswapAnchoredView/UniswapAnchoredViewService\";\n\nimport contractsAddresses from \"../solidityInterfaces/addresses.json\";\nimport { getSignerOrProvider } from \"../ethereumConnection/ethereumConnection\";\nimport { IComptrollerService } from \"./contractsIntegration/ComptrollerService/IComptrollerService\";\nimport { ComptrollerService } from \"./contractsIntegration/ComptrollerService/ComptrollerService\";\nimport { IErc20BuilderService } from \"./contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { Erc20BuilderService } from \"./contractsIntegration/erc20Service/Erc20BuilderService\";\nimport { ICTokensBuilderService } from \"./contractsIntegration/cTokensService/ICTokensBuilderService\";\nimport { CTokensBuilderService } from \"./contractsIntegration/cTokensService/CTokensBuilderService\";\n\nexport interface IServices {\n  cryptoWalletIntegrationService: ICryptoWalletConnectionService;\n  lendingNetworksService: ILendingNetworksService;\n  // DEV_NOTE : Seems no one is using this service\n  uniswapAnchoredViewService: UniswapAnchoredViewService;\n\n  // Service builders\n  erc20ServiceBuilder: IErc20BuilderService;\n  cTokenServiceBuilder: ICTokensBuilderService;\n}\n\nexport type TLNContractsAddresses = {\n  unitrollerAddress: string;\n};\n\n/**\n * Services that are LN specific and should be refreshed/replaced when switching a LN.\n */\nexport interface ILNServices {\n  comptrollerLiveService: IComptrollerService;\n}\n\n// DEV_NOTE : For simplicity of early stage dev, we assume that we have ethereum provider, if not, we will not initialize the services.\nexport function buildServices(ethereumProvider: IEthereumProvider): IServices {\n  const signerOrProvider = getSignerOrProvider(ethereumProvider);\n  const addresses = getContractsAddresses();\n\n  return {\n    cryptoWalletIntegrationService: new CryptoWalletConnectionService(\n      ethereumProvider\n    ),\n    lendingNetworksService: new LendingNetworksService(),\n    uniswapAnchoredViewService: new UniswapAnchoredViewService(\n      addresses.UniswapAnchoredView,\n      signerOrProvider\n    ),\n\n    // Service builders\n    erc20ServiceBuilder: new Erc20BuilderService(signerOrProvider),\n    cTokenServiceBuilder: new CTokensBuilderService(signerOrProvider),\n  };\n}\n\n// DEV_NOTE : For simplicity of early stage dev, we assume that we have ethereum provider, if not, we will not initialize the services.\nexport function buildLNServices(\n  ethereumProvider: IEthereumProvider,\n  contractsAddresses: TLNContractsAddresses\n): ILNServices {\n  const signerOrProvider = getSignerOrProvider(ethereumProvider);\n\n  return {\n    comptrollerLiveService: new ComptrollerService(\n      contractsAddresses.unitrollerAddress,\n      signerOrProvider\n    ),\n  };\n}\n\n// export function buildMockServices(\n//   ethereumProvider: IEthereumProvider\n// ): IServices {\n//   const signerOrProvider = getSignerOrProvider(ethereumProvider);\n//   const addresses = getContractsAddresses();\n//\n//   return {\n//     cryptoWalletIntegrationService: new CryptoWalletConnectionService(\n//       ethereumProvider\n//     ),\n//     lendingNetworksService: new LendingNetworksServiceMock(),\n//     uniswapAnchoredViewService: new UniswapAnchoredViewService(\n//       addresses.UniswapAnchoredView,\n//       signerOrProvider\n//     ),\n//     tokensLensService: new\n//   };\n// }\n\n// TODO : Add addresses by network\nexport function getContractsAddresses() {\n  return contractsAddresses;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { AppWrapper } from \"./AppWrapper\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}